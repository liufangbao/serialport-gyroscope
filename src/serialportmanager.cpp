#include "serialportmanager.h"
#include <QTimer>
#include <QDebug>
#include<qmath.h>
QextSerialPort *SerialPortManager::port() const
{
    return mPort;
}

SerialPortManager::SerialPortManager(QString *portName)
{
    memcpy(&mPortName,portName,sizeof(portName));

     iproc = new UAVTalkInputProcessor();
     iproc->cs = 0x00;
    iproc->instId = 0x000000;
    iproc->length = 0x00;
    iproc->objId = 0x00000000;
    iproc->packet_size = 0x0;
    iproc->rxCount =0x0;
    iproc->rxPacketLength=0;
    iproc->state = UAVTALK_STATE_SYNC;
    iproc->timestamp =0x0;
    iproc->timestampLength = 0x0;
    iproc->type = 0x0;

    mTimer = new QTimer();
    mTimer->setInterval(50);

     mSettings = {BAUD115200, DATA_8, PAR_NONE, STOP_1, FLOW_OFF, 10};
     mPort = new QextSerialPort(mSettings, QextSerialPort::Polling);

    mPort->setPortName(this->mPortName);
    mPort->open(QIODevice::ReadWrite);

     connect(mPort, SIGNAL(readyRead()),SLOT(onReadyRead()));
     connect(mTimer, SIGNAL(timeout()),SLOT(onReadyRead()));

     if (mPort->isOpen() && mPort->queryMode() == QextSerialPort::Polling)
         mTimer->start();

}

// CRC lookup table
static const uint8_t crc_table[256] = {
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};

/**
 * Update the crc value with new data.
 *
 * Generated by pycrc v0.7.5, http://www.tty1.net/pycrc/
 * using the configuration:
 *    Width        = 8
 *    Poly         = 0x07
 *    XorIn        = 0x00
 *    ReflectIn    = False
 *    XorOut       = 0x00
 *    ReflectOut   = False
 *    Algorithm    = table-driven
 *
 * \param crc      The current crc value.
 * \param data     Pointer to a buffer of \a data_len bytes.
 * \param length   Number of bytes in the \a data buffer.
 * \return         The updated crc value.
 */
uint8_t SerialPortManager::PIOS_CRC_updateByte(uint8_t crc, const uint8_t data)
{
    return crc_table[crc ^ data];
}

/**
 * Process an byte from the telemetry stream.
 * \param[in] connectionHandle UAVTalkConnection to be used
 * \param[in] rxbyte Received byte
 * \return UAVTalkRxState
 */
SerialPortManager::UAVTalkRxState SerialPortManager::UAVTalkProcessInputStreamQuiet(uint8_t
rxbyte)
{

    if (iproc->state == UAVTALK_STATE_ERROR || iproc->state == UAVTALK_STATE_COMPLETE) {
        iproc->state = UAVTALK_STATE_SYNC;
    }

    if (iproc->rxPacketLength < 0xffff) {
        // update packet byte count
        iproc->rxPacketLength++;
    }

    // Receive state machine
    switch (iproc->state) {
    case UAVTALK_STATE_SYNC:

        if (rxbyte != UAVTALK_SYNC_VAL) {
         //   qDebug()<<iproc->state<<"not a sync"<<endl;
            break;
        }

        // Initialize and update the CRC
        iproc->cs = PIOS_CRC_updateByte(0, rxbyte);

        iproc->rxPacketLength = 1;
        iproc->rxCount = 0;

        iproc->type    = 0;
  //      qDebug()<<iproc->state<<"UAVTALK_SYNC_VAL:"<<UAVTALK_SYNC_VAL<<endl;
        iproc->state   = UAVTALK_STATE_TYPE;
        break;

    case UAVTALK_STATE_TYPE:

        if ((rxbyte & UAVTALK_TYPE_MASK) != UAVTALK_TYPE_VER) {
            qDebug()<<iproc->state<<"not a correct type"<<endl;
            iproc->state = UAVTALK_STATE_SYNC;
            break;
        }

        // update the CRC
        iproc->cs    = PIOS_CRC_updateByte(iproc->cs, rxbyte);

        iproc->type  = rxbyte;

        iproc->packet_size = 0;
     //   qDebug()<<iproc->state<<"UAVTALK_STATE_TYPE:"<<UAVTALK_STATE_TYPE<<endl;
        iproc->state = UAVTALK_STATE_SIZE;
        break;

    case UAVTALK_STATE_SIZE:

        // update the CRC
        iproc->cs = PIOS_CRC_updateByte(iproc->cs, rxbyte);

        if (iproc->rxCount == 0) {
            iproc->packet_size += rxbyte;
            iproc->rxCount++;
            break;
        }
        iproc->packet_size += rxbyte << 8;
        iproc->rxCount      = 0;

        if (iproc->packet_size < UAVTALK_MIN_HEADER_LENGTH || iproc->packet_size > UAVTALK_MAX_HEADER_LENGTH + UAVTALK_MAX_PAYLOAD_LENGTH) {
            // incorrect packet size
            qDebug()<<iproc->state<<"incorrect packet size"<<endl;
            iproc->state = UAVTALK_STATE_ERROR;
            break;
        }

        iproc->objId = 0;
   //      qDebug()<<iproc->state<<"UAVTALK_STATE_SIZE:"<<UAVTALK_STATE_SIZE<<endl;
        iproc->state = UAVTALK_STATE_OBJID;
        break;

    case UAVTALK_STATE_OBJID:

        // update the CRC
        iproc->cs     = PIOS_CRC_updateByte(iproc->cs, rxbyte);

        iproc->objId += rxbyte << (8 * (iproc->rxCount++));
        if (iproc->rxCount < 4) {
            break;
        }
        iproc->rxCount = 0;

        iproc->instId  = 0;
    //     qDebug()<<iproc->state<<"UAVTALK_STATE_OBJID:"<<UAVTALK_STATE_OBJID<<endl;
        iproc->state   = UAVTALK_STATE_INSTID;
        break;

    case UAVTALK_STATE_INSTID:
{
        // update the CRC
        iproc->cs      = PIOS_CRC_updateByte(iproc->cs, rxbyte);

        iproc->instId += rxbyte << (8 * (iproc->rxCount++));
        if (iproc->rxCount < 2) {
            break;
        }
        iproc->rxCount = 0;

        UAVObjectHandler obj(iproc->objId);

        // Determine data length
        if (iproc->type == UAVTALK_TYPE_OBJ_REQ || iproc->type == UAVTALK_TYPE_ACK || iproc->type == UAVTALK_TYPE_NACK) {
            iproc->length = 0;
            iproc->timestampLength = 0;
        } else {
            iproc->timestampLength = (iproc->type & UAVTALK_TIMESTAMPED) ? 2 : 0;
            if (obj.getObjId() != 0) {
                iproc->length = obj.getPacketLength();
            } else {
                iproc->length = iproc->packet_size - iproc->rxPacketLength - iproc->timestampLength;
            }
        }

        // Check length
        if (iproc->length >= UAVTALK_MAX_PAYLOAD_LENGTH) {
            // packet error - exceeded payload max length
            qDebug()<<iproc->state<<"UAVTALK_STATE_INSTID:"<<" packet error - exceeded payload max length"<<endl;
            iproc->state = UAVTALK_STATE_ERROR;
            break;
        }

        // Check the lengths match
        if ((iproc->rxPacketLength + iproc->timestampLength + iproc->length) != iproc->packet_size) {
            // packet error - mismatched packet size
            qDebug()<<iproc->state<<"UAVTALK_STATE_INSTID:"<<"packet error - mismatched packet size"<<endl;
            iproc->state = UAVTALK_STATE_ERROR;
            break;
        }

        // Determine next state
        if (iproc->type & UAVTALK_TIMESTAMPED) {
            // If there is a timestamp get it
            iproc->timestamp = 0;
            iproc->state     = UAVTALK_STATE_TIMESTAMP;
        } else {
            // If there is a payload get it, otherwise receive checksum
            if (iproc->length > 0) {
                iproc->state = UAVTALK_STATE_DATA;
            } else {
                iproc->state = UAVTALK_STATE_CS;
            }
        }
     //   qDebug()<<iproc->state<<"UAVTALK_STATE_INSTID:"<<UAVTALK_STATE_INSTID<<endl;
}
        break;

    case UAVTALK_STATE_TIMESTAMP:

        // update the CRC
        iproc->cs = PIOS_CRC_updateByte(iproc->cs, rxbyte);

        iproc->timestamp += rxbyte << (8 * (iproc->rxCount++));
        if (iproc->rxCount < 2) {
            break;
        }
        iproc->rxCount = 0;

        // If there is a payload get it, otherwise receive checksum
        if (iproc->length > 0) {
            iproc->state = UAVTALK_STATE_DATA;
        } else {
            iproc->state = UAVTALK_STATE_CS;
        }
      //  qDebug()<<iproc->state<<"UAVTALK_STATE_TIMESTAMP:"<<UAVTALK_STATE_TIMESTAMP<<endl;
        break;

    case UAVTALK_STATE_DATA:

        // update the CRC
        iproc->cs = PIOS_CRC_updateByte(iproc->cs, rxbyte);
        mReceivedArray.append(rxbyte);
        iproc->rxCount++;
        if (iproc->rxCount < iproc->length) {
            break;
        }
        iproc->rxCount = 0;

        iproc->state   = UAVTALK_STATE_CS;
        break;

    case UAVTALK_STATE_CS:

        // Check the CRC byte
        if (rxbyte != iproc->cs) {
            // packet error - faulty CRC

            iproc->state = UAVTALK_STATE_ERROR;
            break;
        }

        if (iproc->rxPacketLength != (iproc->packet_size + UAVTALK_CHECKSUM_LENGTH)) {
            // packet error - mismatched packet size
            iproc->state = UAVTALK_STATE_ERROR;
            break;
        }
     //   qDebug()<<iproc->state<<"UAVTALK_STATE_CS:"<<UAVTALK_STATE_CS<<endl;
        iproc->state = UAVTALK_STATE_COMPLETE;
        break;

    default:

        iproc->state = UAVTALK_STATE_ERROR;
        break;
    }

    // Done
    return iproc->state;
}

/*
get packet and send to EmbeddedSvgViewer
 // grep "_OBJID" -R *.h|awk '{print "case "$2":"}'
*/
void SerialPortManager::handlePacket(uint32_t objId,QByteArray array)
{
    switch(objId)
    {
    case ACCELGYROSETTINGS_OBJID:
    case ACCELSENSOR_OBJID:
    case ACCELSTATE_OBJID:
        memcpy(&mAccelStateData,array,sizeof(AccelStateData));
      //  qDebug()<<mAccelStateData.x<<mAccelStateData.y<<mAccelStateData.z<<endl;
        break;
    case ACCESSORYDESIRED_OBJID:
    case ACTUATORCOMMAND_OBJID:
    case ACTUATORDESIRED_OBJID:
    case ACTUATORSETTINGS_OBJID:
    case AIRSPEEDSENSOR_OBJID:
    case AIRSPEEDSETTINGS_OBJID:
    case AIRSPEEDSTATE_OBJID:
    case ALTITUDEFILTERSETTINGS_OBJID:
    case ALTITUDEHOLDSETTINGS_OBJID:
    case ALTITUDEHOLDSTATUS_OBJID:
    case ATTITUDESETTINGS_OBJID:
    case ATTITUDESIMULATED_OBJID:
        break;
    case ATTITUDESTATE_OBJID:
        memcpy(&mAttitudeState,array,sizeof(AttitudeStateDataPacked));

        float q0,q1,q2,q3,Pitch,Roll,Yaw;
        q0=mAttitudeState.q1;
        q1=mAttitudeState.q2;
        q2=mAttitudeState.q3;
        q3=mAttitudeState.q4;
        Pitch=mAttitudeState.Pitch;
        Roll=mAttitudeState.Roll;
        Yaw=mAttitudeState.Yaw;

        if((abs(Pitch - asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3)<10e-3) // pitch
                &&(abs(Roll - atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3)<10e-3) // roll
                &&(abs(Yaw - atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3)<10e-3))		//yaw
        {
           // qDebug()<<"Attitude data OK!"<<endl;
           emit attitudeReady(mAttitudeState.Pitch,mAttitudeState.Roll,mAttitudeState.Yaw);
        }
        break;
    case AUXMAGSENSOR_OBJID:
    case AUXMAGSETTINGS_OBJID:
    case BAROSENSOR_OBJID:
    case CALLBACKINFO_OBJID:
    case CAMERADESIRED_OBJID:
    case CAMERASTABSETTINGS_OBJID:
    case DEBUGLOGCONTROL_OBJID:
    case DEBUGLOGENTRY_OBJID:
    case DEBUGLOGSETTINGS_OBJID:
    case DEBUGLOGSTATUS_OBJID:
    case EKFCONFIGURATION_OBJID:
    case EKFSTATEVARIANCE_OBJID:
    case FAULTSETTINGS_OBJID:
    case FIRMWAREIAPOBJ_OBJID:
    case FIXEDWINGPATHFOLLOWERSETTINGS_OBJID:
    case FIXEDWINGPATHFOLLOWERSTATUS_OBJID:
    case FLIGHTBATTERYSETTINGS_OBJID:
    case FLIGHTBATTERYSTATE_OBJID:
    case FLIGHTMODESETTINGS_OBJID:
    case FLIGHTPLANCONTROL_OBJID:
    case FLIGHTPLANSETTINGS_OBJID:
    case FLIGHTPLANSTATUS_OBJID:
    case FLIGHTSTATUS_OBJID:
    case FLIGHTTELEMETRYSTATS_OBJID:
         memcpy(&mFlightTelemetryStatsData,array,sizeof(FlightTelemetryStatsData));
        break;
    case GCSRECEIVER_OBJID:
        break;
    case GCSTELEMETRYSTATS_OBJID:
        memcpy(&mGCSTelemetryStats,array,sizeof(GCSTelemetryStatsDataPacked));
        //    qDebug()<<"TxDataRate:"<<mGCSTelemetryStats.TxDataRate<<endl;
        break;
    case GPSEXTENDEDSTATUS_OBJID:
    case GPSPOSITIONSENSOR_OBJID:
    case GPSSATELLITES_OBJID:
    case GPSSETTINGS_OBJID:
    case GPSTIME_OBJID:
    case GPSVELOCITYSENSOR_OBJID:
    case GROUNDTRUTH_OBJID:
    case GYROSENSOR_OBJID:
    case GYROSTATE_OBJID:
    case HOMELOCATION_OBJID:
    case HWSETTINGS_OBJID:
    case I2CSTATS_OBJID:
    case MAGSENSOR_OBJID:
    case MAGSTATE_OBJID:
    case MANUALCONTROLCOMMAND_OBJID:
    case MANUALCONTROLSETTINGS_OBJID:
    case MIXERSETTINGS_OBJID:
    case MIXERSTATUS_OBJID:
    case MPU6000SETTINGS_OBJID:
    case NEDACCEL_OBJID:
    case OBJECTPERSISTENCE_OBJID:
    case OPLINKRECEIVER_OBJID:
    case OPLINKSETTINGS_OBJID:
    case OPLINKSTATUS_OBJID:
    case OSDSETTINGS_OBJID:
    case OVEROSYNCSETTINGS_OBJID:
    case OVEROSYNCSTATS_OBJID:
    case PATHACTION_OBJID:
    case PATHDESIRED_OBJID:
    case PATHPLAN_OBJID:
    case PATHSTATUS_OBJID:
    case PATHSUMMARY_OBJID:
    case PERFCOUNTER_OBJID:
    case POILEARNSETTINGS_OBJID:
    case POILOCATION_OBJID:
    case POSITIONSTATE_OBJID:
    case RADIOCOMBRIDGESTATS_OBJID:
    case RATEDESIRED_OBJID:
    case RECEIVERACTIVITY_OBJID:
    case REVOCALIBRATION_OBJID:
    case REVOSETTINGS_OBJID:
    case SONARALTITUDE_OBJID:
    case STABILIZATIONBANK_OBJID:
    case STABILIZATIONDESIRED_OBJID:
    case STABILIZATIONSETTINGSBANK1_OBJID:
    case STABILIZATIONSETTINGSBANK2_OBJID:
    case STABILIZATIONSETTINGSBANK3_OBJID:
    case STABILIZATIONSETTINGS_OBJID:
    case STABILIZATIONSTATUS_OBJID:
        memcpy(&mStabilizationDesiredData,array,sizeof(StabilizationDesiredData));
        //    qDebug()<<mStabilizationDesiredData.Pitch<<mStabilizationDesiredData.Roll<<mStabilizationDesiredData.Yaw<<endl;
        break;
    case SYSTEMALARMS_OBJID:
    case SYSTEMSETTINGS_OBJID:
        break;
    case SYSTEMSTATS_OBJID:
        memcpy(&mSystemStats,array,sizeof(SystemStatsDataPacked));
        //    qDebug()<<"FlightTime [s]:"<<mSystemStats.FlightTime/1000-1200<<"  CPULoad [%]:"<<mSystemStats.CPULoad<<endl;
        break;
    case TAKEOFFLOCATION_OBJID:
    case TASKINFO_OBJID:
    case TXPIDSETTINGS_OBJID:
    case VELOCITYDESIRED_OBJID:
    case VELOCITYSTATE_OBJID:
    case VTOLPATHFOLLOWERSETTINGS_OBJID:
    case VTOLSELFTUNINGSTATS_OBJID:
    case WATCHDOGSTATUS_OBJID:
    case WAYPOINTACTIVE_OBJID:
    case WAYPOINT_OBJID:
        break;
    }
}

void SerialPortManager::onReadyRead()
{
    if (mPort->bytesAvailable()) {
            mReceivedString.clear();
            QByteArray array;
            array = mPort->readAll();
           // qDebug()<<"bytesAvailable count:"<<array.size()<<endl;
            //pick useful packet
            int idx=0;
            for(idx=0;idx<array.size();idx++)
            {
                int isAPacket = UAVTalkProcessInputStreamQuiet(array.at(idx));
                switch(isAPacket)
                {
                case  UAVTALK_STATE_ERROR :
                case    UAVTALK_STATE_SYNC:
                case    UAVTALK_STATE_TYPE:
                case    UAVTALK_STATE_SIZE:
                case    UAVTALK_STATE_OBJID:
                case    UAVTALK_STATE_INSTID:
                case   UAVTALK_STATE_TIMESTAMP:
                case  UAVTALK_STATE_DATA:
                case   UAVTALK_STATE_CS:
                    break;
                case   UAVTALK_STATE_COMPLETE:
                 //       printf("file: %s  objid: %x\n",__FILE__,iproc->objId);
#if 0
                        QString mReceivedString;
                        UAVObjectHandler temp_obj(iproc->objId);
                        for(int i = 0; i< mReceivedArray.count(); i++){
                            QString s;
                            s.sprintf("%02x ", (unsigned char)mReceivedArray.at(i));
                            mReceivedString.append(s);
                        }
                        qDebug()<<
                                   "file:"<<__FILE__<<
                                   " packet_size:"<<iproc->packet_size<<
                                   "objId:"<<hex<<iproc->objId<<"  name:"<<temp_obj.getPacketName()<<endl<<
                                   "data:"<<mReceivedString<<endl;
#endif
                            handlePacket(iproc->objId ,mReceivedArray);

                        mReceivedArray.clear();
                    break;
                }
            }
    }
}

SerialPortManager::UAVObjectHandler::UAVObjectHandler()
{
}

SerialPortManager::UAVObjectHandler::UAVObjectHandler( uint32_t objId)
{
    switch(objId)
    {
    case ATTITUDESTATE_OBJID:
        mPacketName = "ATTITUDESTATE_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(AttitudeStateDataPacked);
        break;
    case GCSTELEMETRYSTATS_OBJID:
        mPacketName = "GCSTELEMETRYSTATS_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(GCSTelemetryStatsDataPacked);
        break;
    case FLIGHTTELEMETRYSTATS_OBJID:
        mPacketName = "FLIGHTTELEMETRYSTATS_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(FlightTelemetryStatsDataPacked);
        break;
    case SYSTEMSTATS_OBJID:
        mPacketName = "SYSTEMSTATS_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(SystemStatsDataPacked);
        break;
    case RATEDESIRED_OBJID:
        mPacketName = "RATEDESIRED_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(RateDesiredDataPacked);
        break;
    case ACCESSORYDESIRED_OBJID:
        mPacketName = "ACCESSORYDESIRED_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(AccessoryDesiredDataPacked);
        break;
    case STABILIZATIONSTATUS_OBJID:
        mPacketName = "STABILIZATIONSTATUS_OBJID";
        mObjId = objId;
        mPacketLength = sizeof(StabilizationStatusDataPacked);
        break;
    default:
        mObjId = 0;
        mPacketLength = 0;
        break;
    }
}

QString SerialPortManager::UAVObjectHandler::getPacketName()
{
    return mPacketName;
}

uint32_t SerialPortManager::UAVObjectHandler::getPacketLength()
{
    return mPacketLength;
}

uint32_t SerialPortManager::UAVObjectHandler::getObjId()
{
    return mObjId;
}
