/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup SystemAlarms SystemAlarms 
 * @brief Alarms from OpenPilot to indicate failure conditions or warnings.  Set by various modules.  Some modules may have a module defined Status and Substatus fields that details its condition.
 *
 * Autogenerated files and functions for SystemAlarms Object
 *
 * @{ 
 *
 * @file       systemalarms.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the SystemAlarms object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: systemalarms.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef SYSTEMALARMS_H
#define SYSTEMALARMS_H

/* Object constants */
#define SYSTEMALARMS_OBJID 0x6B7639EC
#define SYSTEMALARMS_ISSINGLEINST 1
#define SYSTEMALARMS_ISSETTINGS 0
#define SYSTEMALARMS_ISPRIORITY 1
#define SYSTEMALARMS_NUMBYTES sizeof(SystemAlarmsData)

/* Generic interface functions */
int32_t SystemAlarmsInitialize();
UAVObjHandle SystemAlarmsHandle();
void SystemAlarmsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint8_t SystemConfiguration;
    uint8_t BootFault;
    uint8_t OutOfMemory;
    uint8_t StackOverflow;
    uint8_t CPUOverload;
    uint8_t EventSystem;
    uint8_t Telemetry;
    uint8_t Receiver;
    uint8_t ManualControl;
    uint8_t Actuator;
    uint8_t Attitude;
    uint8_t Sensors;
    uint8_t Magnetometer;
    uint8_t Airspeed;
    uint8_t Stabilization;
    uint8_t Guidance;
    uint8_t PathPlan;
    uint8_t Battery;
    uint8_t FlightTime;
    uint8_t I2C;
    uint8_t GPS;
}  SystemAlarmsAlarmData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[21];
}  SystemAlarmsAlarmDataArray ;
#define SystemAlarmsAlarmToArray( var ) UAVObjectFieldToArray( SystemAlarmsAlarmData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t SystemConfiguration;
    uint8_t BootFault;
}  SystemAlarmsExtendedAlarmStatusData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[2];
}  SystemAlarmsExtendedAlarmStatusDataArray ;
#define SystemAlarmsExtendedAlarmStatusToArray( var ) UAVObjectFieldToArray( SystemAlarmsExtendedAlarmStatusData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t SystemConfiguration;
    uint8_t BootFault;
}  SystemAlarmsExtendedAlarmSubStatusData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[2];
}  SystemAlarmsExtendedAlarmSubStatusDataArray ;
#define SystemAlarmsExtendedAlarmSubStatusToArray( var ) UAVObjectFieldToArray( SystemAlarmsExtendedAlarmSubStatusData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    SystemAlarmsAlarmData Alarm;
    SystemAlarmsExtendedAlarmStatusData ExtendedAlarmStatus;
    SystemAlarmsExtendedAlarmSubStatusData ExtendedAlarmSubStatus;
} __attribute__((packed)) SystemAlarmsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef SystemAlarmsDataPacked __attribute__((aligned(4))) SystemAlarmsData;
    
/* Typesafe Object access functions */
static inline int32_t SystemAlarmsGet(SystemAlarmsData *dataOut) { return UAVObjGetData(SystemAlarmsHandle(), dataOut); }
static inline int32_t SystemAlarmsSet(const SystemAlarmsData *dataIn) { return UAVObjSetData(SystemAlarmsHandle(), dataIn); }
static inline int32_t SystemAlarmsInstGet(uint16_t instId, SystemAlarmsData *dataOut) { return UAVObjGetInstanceData(SystemAlarmsHandle(), instId, dataOut); }
static inline int32_t SystemAlarmsInstSet(uint16_t instId, const SystemAlarmsData *dataIn) { return UAVObjSetInstanceData(SystemAlarmsHandle(), instId, dataIn); }
static inline int32_t SystemAlarmsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(SystemAlarmsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t SystemAlarmsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(SystemAlarmsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t SystemAlarmsCreateInstance() { return UAVObjCreateInstance(SystemAlarmsHandle(), &SystemAlarmsSetDefaults); }
static inline void SystemAlarmsRequestUpdate() { UAVObjRequestUpdate(SystemAlarmsHandle()); }
static inline void SystemAlarmsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(SystemAlarmsHandle(), instId); }
static inline void SystemAlarmsUpdated() { UAVObjUpdated(SystemAlarmsHandle()); }
static inline void SystemAlarmsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(SystemAlarmsHandle(), instId); }
static inline void SystemAlarmsLogging() { UAVObjLogging(SystemAlarmsHandle()); }
static inline void SystemAlarmsInstLogging(uint16_t instId) { UAVObjInstanceLogging(SystemAlarmsHandle(), instId); }
static inline int32_t SystemAlarmsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(SystemAlarmsHandle(), dataOut); }
static inline int32_t SystemAlarmsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(SystemAlarmsHandle(), dataIn); }
static inline int8_t SystemAlarmsReadOnly() { return UAVObjReadOnly(SystemAlarmsHandle()); }

/* Field Alarm information */

// Enumeration options for field Alarm
typedef enum {
    SYSTEMALARMS_ALARM_UNINITIALISED=0,
    SYSTEMALARMS_ALARM_OK=1,
    SYSTEMALARMS_ALARM_WARNING=2,
    SYSTEMALARMS_ALARM_CRITICAL=3,
    SYSTEMALARMS_ALARM_ERROR=4
} SystemAlarmsAlarmOptions;

// Array element names for field Alarm
typedef enum {
    SYSTEMALARMS_ALARM_SYSTEMCONFIGURATION=0,
    SYSTEMALARMS_ALARM_BOOTFAULT=1,
    SYSTEMALARMS_ALARM_OUTOFMEMORY=2,
    SYSTEMALARMS_ALARM_STACKOVERFLOW=3,
    SYSTEMALARMS_ALARM_CPUOVERLOAD=4,
    SYSTEMALARMS_ALARM_EVENTSYSTEM=5,
    SYSTEMALARMS_ALARM_TELEMETRY=6,
    SYSTEMALARMS_ALARM_RECEIVER=7,
    SYSTEMALARMS_ALARM_MANUALCONTROL=8,
    SYSTEMALARMS_ALARM_ACTUATOR=9,
    SYSTEMALARMS_ALARM_ATTITUDE=10,
    SYSTEMALARMS_ALARM_SENSORS=11,
    SYSTEMALARMS_ALARM_MAGNETOMETER=12,
    SYSTEMALARMS_ALARM_AIRSPEED=13,
    SYSTEMALARMS_ALARM_STABILIZATION=14,
    SYSTEMALARMS_ALARM_GUIDANCE=15,
    SYSTEMALARMS_ALARM_PATHPLAN=16,
    SYSTEMALARMS_ALARM_BATTERY=17,
    SYSTEMALARMS_ALARM_FLIGHTTIME=18,
    SYSTEMALARMS_ALARM_I2C=19,
    SYSTEMALARMS_ALARM_GPS=20
} SystemAlarmsAlarmElem;

// Number of elements for field Alarm
#define SYSTEMALARMS_ALARM_NUMELEM 21

/* Field ExtendedAlarmStatus information */

// Enumeration options for field ExtendedAlarmStatus
typedef enum {
    SYSTEMALARMS_EXTENDEDALARMSTATUS_NONE=0,
    SYSTEMALARMS_EXTENDEDALARMSTATUS_REBOOTREQUIRED=1,
    SYSTEMALARMS_EXTENDEDALARMSTATUS_FLIGHTMODE=2,
    SYSTEMALARMS_EXTENDEDALARMSTATUS_UNSUPPORTEDCONFIG_ONESHOT=3,
    SYSTEMALARMS_EXTENDEDALARMSTATUS_BADTHROTTLEORCOLLECTIVEINPUTRANGE=4
} SystemAlarmsExtendedAlarmStatusOptions;

// Array element names for field ExtendedAlarmStatus
typedef enum {
    SYSTEMALARMS_EXTENDEDALARMSTATUS_SYSTEMCONFIGURATION=0,
    SYSTEMALARMS_EXTENDEDALARMSTATUS_BOOTFAULT=1
} SystemAlarmsExtendedAlarmStatusElem;

// Number of elements for field ExtendedAlarmStatus
#define SYSTEMALARMS_EXTENDEDALARMSTATUS_NUMELEM 2

/* Field ExtendedAlarmSubStatus information */

// Array element names for field ExtendedAlarmSubStatus
typedef enum {
    SYSTEMALARMS_EXTENDEDALARMSUBSTATUS_SYSTEMCONFIGURATION=0,
    SYSTEMALARMS_EXTENDEDALARMSUBSTATUS_BOOTFAULT=1
} SystemAlarmsExtendedAlarmSubStatusElem;

// Number of elements for field ExtendedAlarmSubStatus
#define SYSTEMALARMS_EXTENDEDALARMSUBSTATUS_NUMELEM 2



/* Set/Get functions */
extern void SystemAlarmsAlarmSet(SystemAlarmsAlarmData *NewAlarm);
extern void SystemAlarmsAlarmGet(SystemAlarmsAlarmData *NewAlarm);
extern void SystemAlarmsAlarmArraySet(uint8_t *NewAlarm);
extern void SystemAlarmsAlarmArrayGet(uint8_t *NewAlarm);
extern void SystemAlarmsExtendedAlarmStatusSet(SystemAlarmsExtendedAlarmStatusData *NewExtendedAlarmStatus);
extern void SystemAlarmsExtendedAlarmStatusGet(SystemAlarmsExtendedAlarmStatusData *NewExtendedAlarmStatus);
extern void SystemAlarmsExtendedAlarmStatusArraySet(uint8_t *NewExtendedAlarmStatus);
extern void SystemAlarmsExtendedAlarmStatusArrayGet(uint8_t *NewExtendedAlarmStatus);
extern void SystemAlarmsExtendedAlarmSubStatusSet(SystemAlarmsExtendedAlarmSubStatusData *NewExtendedAlarmSubStatus);
extern void SystemAlarmsExtendedAlarmSubStatusGet(SystemAlarmsExtendedAlarmSubStatusData *NewExtendedAlarmSubStatus);
extern void SystemAlarmsExtendedAlarmSubStatusArraySet(uint8_t *NewExtendedAlarmSubStatus);
extern void SystemAlarmsExtendedAlarmSubStatusArrayGet(uint8_t *NewExtendedAlarmSubStatus);


#endif // SYSTEMALARMS_H

/**
 * @}
 * @}
 */
