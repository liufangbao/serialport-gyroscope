/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup ManualControlCommand ManualControlCommand 
 * @brief The output from the @ref ManualControlModule which decodes the receiver inputs. Overriden by GCS for fly-by-wire control.
 *
 * Autogenerated files and functions for ManualControlCommand Object
 *
 * @{ 
 *
 * @file       manualcontrolcommand.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the ManualControlCommand object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: manualcontrolcommand.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef MANUALCONTROLCOMMAND_H
#define MANUALCONTROLCOMMAND_H

/* Object constants */
#define MANUALCONTROLCOMMAND_OBJID 0x161A2C98
#define MANUALCONTROLCOMMAND_ISSINGLEINST 1
#define MANUALCONTROLCOMMAND_ISSETTINGS 0
#define MANUALCONTROLCOMMAND_ISPRIORITY 0
#define MANUALCONTROLCOMMAND_NUMBYTES sizeof(ManualControlCommandData)

/* Generic interface functions */
int32_t ManualControlCommandInitialize();
UAVObjHandle ManualControlCommandHandle();
void ManualControlCommandSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float Throttle;
    float Roll;
    float Pitch;
    float Yaw;
    float Collective;
    float Thrust;
    uint16_t Channel[9];
    uint8_t Connected;
    uint8_t FlightModeSwitchPosition;
} __attribute__((packed)) ManualControlCommandDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef ManualControlCommandDataPacked __attribute__((aligned(4))) ManualControlCommandData;
    
/* Typesafe Object access functions */
static inline int32_t ManualControlCommandGet(ManualControlCommandData *dataOut) { return UAVObjGetData(ManualControlCommandHandle(), dataOut); }
static inline int32_t ManualControlCommandSet(const ManualControlCommandData *dataIn) { return UAVObjSetData(ManualControlCommandHandle(), dataIn); }
static inline int32_t ManualControlCommandInstGet(uint16_t instId, ManualControlCommandData *dataOut) { return UAVObjGetInstanceData(ManualControlCommandHandle(), instId, dataOut); }
static inline int32_t ManualControlCommandInstSet(uint16_t instId, const ManualControlCommandData *dataIn) { return UAVObjSetInstanceData(ManualControlCommandHandle(), instId, dataIn); }
static inline int32_t ManualControlCommandConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(ManualControlCommandHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t ManualControlCommandConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ManualControlCommandHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t ManualControlCommandCreateInstance() { return UAVObjCreateInstance(ManualControlCommandHandle(), &ManualControlCommandSetDefaults); }
static inline void ManualControlCommandRequestUpdate() { UAVObjRequestUpdate(ManualControlCommandHandle()); }
static inline void ManualControlCommandRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ManualControlCommandHandle(), instId); }
static inline void ManualControlCommandUpdated() { UAVObjUpdated(ManualControlCommandHandle()); }
static inline void ManualControlCommandInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ManualControlCommandHandle(), instId); }
static inline void ManualControlCommandLogging() { UAVObjLogging(ManualControlCommandHandle()); }
static inline void ManualControlCommandInstLogging(uint16_t instId) { UAVObjInstanceLogging(ManualControlCommandHandle(), instId); }
static inline int32_t ManualControlCommandGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ManualControlCommandHandle(), dataOut); }
static inline int32_t ManualControlCommandSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ManualControlCommandHandle(), dataIn); }
static inline int8_t ManualControlCommandReadOnly() { return UAVObjReadOnly(ManualControlCommandHandle()); }

/* Field Throttle information */

/* Field Roll information */

/* Field Pitch information */

/* Field Yaw information */

/* Field Collective information */

/* Field Thrust information */

/* Field Channel information */

// Number of elements for field Channel
#define MANUALCONTROLCOMMAND_CHANNEL_NUMELEM 9

/* Field Connected information */

// Enumeration options for field Connected
typedef enum {
    MANUALCONTROLCOMMAND_CONNECTED_FALSE=0,
    MANUALCONTROLCOMMAND_CONNECTED_TRUE=1
} ManualControlCommandConnectedOptions;

/* Field FlightModeSwitchPosition information */



/* Set/Get functions */
extern void ManualControlCommandThrottleSet(float *NewThrottle);
extern void ManualControlCommandThrottleGet(float *NewThrottle);
extern void ManualControlCommandRollSet(float *NewRoll);
extern void ManualControlCommandRollGet(float *NewRoll);
extern void ManualControlCommandPitchSet(float *NewPitch);
extern void ManualControlCommandPitchGet(float *NewPitch);
extern void ManualControlCommandYawSet(float *NewYaw);
extern void ManualControlCommandYawGet(float *NewYaw);
extern void ManualControlCommandCollectiveSet(float *NewCollective);
extern void ManualControlCommandCollectiveGet(float *NewCollective);
extern void ManualControlCommandThrustSet(float *NewThrust);
extern void ManualControlCommandThrustGet(float *NewThrust);
extern void ManualControlCommandChannelSet(uint16_t *NewChannel);
extern void ManualControlCommandChannelGet(uint16_t *NewChannel);
extern void ManualControlCommandConnectedSet(uint8_t *NewConnected);
extern void ManualControlCommandConnectedGet(uint8_t *NewConnected);
extern void ManualControlCommandFlightModeSwitchPositionSet(uint8_t *NewFlightModeSwitchPosition);
extern void ManualControlCommandFlightModeSwitchPositionGet(uint8_t *NewFlightModeSwitchPosition);


#endif // MANUALCONTROLCOMMAND_H

/**
 * @}
 * @}
 */
