/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AccelSensor AccelSensor 
 * @brief Calibrated sensor data from 3 axis accelerometer in m/sÂ².
 *
 * Autogenerated files and functions for AccelSensor Object
 *
 * @{ 
 *
 * @file       accelsensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AccelSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: accelsensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACCELSENSOR_H
#define ACCELSENSOR_H

/* Object constants */
#define ACCELSENSOR_OBJID 0x8B7BBFB6
#define ACCELSENSOR_ISSINGLEINST 1
#define ACCELSENSOR_ISSETTINGS 0
#define ACCELSENSOR_ISPRIORITY 0
#define ACCELSENSOR_NUMBYTES sizeof(AccelSensorData)

/* Generic interface functions */
int32_t AccelSensorInitialize();
UAVObjHandle AccelSensorHandle();
void AccelSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
    float temperature;
} __attribute__((packed)) AccelSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AccelSensorDataPacked __attribute__((aligned(4))) AccelSensorData;
    
/* Typesafe Object access functions */
static inline int32_t AccelSensorGet(AccelSensorData *dataOut) { return UAVObjGetData(AccelSensorHandle(), dataOut); }
static inline int32_t AccelSensorSet(const AccelSensorData *dataIn) { return UAVObjSetData(AccelSensorHandle(), dataIn); }
static inline int32_t AccelSensorInstGet(uint16_t instId, AccelSensorData *dataOut) { return UAVObjGetInstanceData(AccelSensorHandle(), instId, dataOut); }
static inline int32_t AccelSensorInstSet(uint16_t instId, const AccelSensorData *dataIn) { return UAVObjSetInstanceData(AccelSensorHandle(), instId, dataIn); }
static inline int32_t AccelSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AccelSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AccelSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AccelSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AccelSensorCreateInstance() { return UAVObjCreateInstance(AccelSensorHandle(), &AccelSensorSetDefaults); }
static inline void AccelSensorRequestUpdate() { UAVObjRequestUpdate(AccelSensorHandle()); }
static inline void AccelSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AccelSensorHandle(), instId); }
static inline void AccelSensorUpdated() { UAVObjUpdated(AccelSensorHandle()); }
static inline void AccelSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AccelSensorHandle(), instId); }
static inline void AccelSensorLogging() { UAVObjLogging(AccelSensorHandle()); }
static inline void AccelSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(AccelSensorHandle(), instId); }
static inline int32_t AccelSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AccelSensorHandle(), dataOut); }
static inline int32_t AccelSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AccelSensorHandle(), dataIn); }
static inline int8_t AccelSensorReadOnly() { return UAVObjReadOnly(AccelSensorHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */

/* Field temperature information */



/* Set/Get functions */
extern void AccelSensorxSet(float *Newx);
extern void AccelSensorxGet(float *Newx);
extern void AccelSensorySet(float *Newy);
extern void AccelSensoryGet(float *Newy);
extern void AccelSensorzSet(float *Newz);
extern void AccelSensorzGet(float *Newz);
extern void AccelSensortemperatureSet(float *Newtemperature);
extern void AccelSensortemperatureGet(float *Newtemperature);


#endif // ACCELSENSOR_H

/**
 * @}
 * @}
 */
