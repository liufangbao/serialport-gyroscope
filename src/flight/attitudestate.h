/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AttitudeState AttitudeState 
 * @brief The updated Attitude estimation from @ref StateEstimationModule.
 *
 * Autogenerated files and functions for AttitudeState Object
 *
 * @{ 
 *
 * @file       attitudestate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AttitudeState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: attitudestate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ATTITUDESTATE_H
#define ATTITUDESTATE_H

/* Object constants */
#define ATTITUDESTATE_OBJID 0xD7E0D964
#define ATTITUDESTATE_ISSINGLEINST 1
#define ATTITUDESTATE_ISSETTINGS 0
#define ATTITUDESTATE_ISPRIORITY 0
#define ATTITUDESTATE_NUMBYTES sizeof(AttitudeStateData)

/* Generic interface functions */
int32_t AttitudeStateInitialize();
UAVObjHandle AttitudeStateHandle();
void AttitudeStateSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float q1;
    float q2;
    float q3;
    float q4;
    float Roll;
    float Pitch;
    float Yaw;
} __attribute__((packed)) AttitudeStateDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AttitudeStateDataPacked __attribute__((aligned(4))) AttitudeStateData;
    
/* Typesafe Object access functions */
static inline int32_t AttitudeStateGet(AttitudeStateData *dataOut) { return UAVObjGetData(AttitudeStateHandle(), dataOut); }
static inline int32_t AttitudeStateSet(const AttitudeStateData *dataIn) { return UAVObjSetData(AttitudeStateHandle(), dataIn); }
static inline int32_t AttitudeStateInstGet(uint16_t instId, AttitudeStateData *dataOut) { return UAVObjGetInstanceData(AttitudeStateHandle(), instId, dataOut); }
static inline int32_t AttitudeStateInstSet(uint16_t instId, const AttitudeStateData *dataIn) { return UAVObjSetInstanceData(AttitudeStateHandle(), instId, dataIn); }
static inline int32_t AttitudeStateConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AttitudeStateHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AttitudeStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AttitudeStateHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AttitudeStateCreateInstance() { return UAVObjCreateInstance(AttitudeStateHandle(), &AttitudeStateSetDefaults); }
static inline void AttitudeStateRequestUpdate() { UAVObjRequestUpdate(AttitudeStateHandle()); }
static inline void AttitudeStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AttitudeStateHandle(), instId); }
static inline void AttitudeStateUpdated() { UAVObjUpdated(AttitudeStateHandle()); }
static inline void AttitudeStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AttitudeStateHandle(), instId); }
static inline void AttitudeStateLogging() { UAVObjLogging(AttitudeStateHandle()); }
static inline void AttitudeStateInstLogging(uint16_t instId) { UAVObjInstanceLogging(AttitudeStateHandle(), instId); }
static inline int32_t AttitudeStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AttitudeStateHandle(), dataOut); }
static inline int32_t AttitudeStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AttitudeStateHandle(), dataIn); }
static inline int8_t AttitudeStateReadOnly() { return UAVObjReadOnly(AttitudeStateHandle()); }

/* Field q1 information */

/* Field q2 information */

/* Field q3 information */

/* Field q4 information */

/* Field Roll information */

/* Field Pitch information */

/* Field Yaw information */



/* Set/Get functions */
extern void AttitudeStateq1Set(float *Newq1);
extern void AttitudeStateq1Get(float *Newq1);
extern void AttitudeStateq2Set(float *Newq2);
extern void AttitudeStateq2Get(float *Newq2);
extern void AttitudeStateq3Set(float *Newq3);
extern void AttitudeStateq3Get(float *Newq3);
extern void AttitudeStateq4Set(float *Newq4);
extern void AttitudeStateq4Get(float *Newq4);
extern void AttitudeStateRollSet(float *NewRoll);
extern void AttitudeStateRollGet(float *NewRoll);
extern void AttitudeStatePitchSet(float *NewPitch);
extern void AttitudeStatePitchGet(float *NewPitch);
extern void AttitudeStateYawSet(float *NewYaw);
extern void AttitudeStateYawGet(float *NewYaw);


#endif // ATTITUDESTATE_H

/**
 * @}
 * @}
 */
