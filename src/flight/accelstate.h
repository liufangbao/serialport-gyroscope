/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AccelState AccelState 
 * @brief The filtered acceleration data.
 *
 * Autogenerated files and functions for AccelState Object
 *
 * @{ 
 *
 * @file       accelstate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AccelState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: accelstate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACCELSTATE_H
#define ACCELSTATE_H

/* Object constants */
#define ACCELSTATE_OBJID 0xAD3C0E06
#define ACCELSTATE_ISSINGLEINST 1
#define ACCELSTATE_ISSETTINGS 0
#define ACCELSTATE_ISPRIORITY 0
#define ACCELSTATE_NUMBYTES sizeof(AccelStateData)

/* Generic interface functions */
int32_t AccelStateInitialize();
UAVObjHandle AccelStateHandle();
void AccelStateSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
} __attribute__((packed)) AccelStateDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AccelStateDataPacked __attribute__((aligned(4))) AccelStateData;
    
/* Typesafe Object access functions */
static inline int32_t AccelStateGet(AccelStateData *dataOut) { return UAVObjGetData(AccelStateHandle(), dataOut); }
static inline int32_t AccelStateSet(const AccelStateData *dataIn) { return UAVObjSetData(AccelStateHandle(), dataIn); }
static inline int32_t AccelStateInstGet(uint16_t instId, AccelStateData *dataOut) { return UAVObjGetInstanceData(AccelStateHandle(), instId, dataOut); }
static inline int32_t AccelStateInstSet(uint16_t instId, const AccelStateData *dataIn) { return UAVObjSetInstanceData(AccelStateHandle(), instId, dataIn); }
static inline int32_t AccelStateConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AccelStateHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AccelStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AccelStateHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AccelStateCreateInstance() { return UAVObjCreateInstance(AccelStateHandle(), &AccelStateSetDefaults); }
static inline void AccelStateRequestUpdate() { UAVObjRequestUpdate(AccelStateHandle()); }
static inline void AccelStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AccelStateHandle(), instId); }
static inline void AccelStateUpdated() { UAVObjUpdated(AccelStateHandle()); }
static inline void AccelStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AccelStateHandle(), instId); }
static inline void AccelStateLogging() { UAVObjLogging(AccelStateHandle()); }
static inline void AccelStateInstLogging(uint16_t instId) { UAVObjInstanceLogging(AccelStateHandle(), instId); }
static inline int32_t AccelStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AccelStateHandle(), dataOut); }
static inline int32_t AccelStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AccelStateHandle(), dataIn); }
static inline int8_t AccelStateReadOnly() { return UAVObjReadOnly(AccelStateHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */



/* Set/Get functions */
extern void AccelStatexSet(float *Newx);
extern void AccelStatexGet(float *Newx);
extern void AccelStateySet(float *Newy);
extern void AccelStateyGet(float *Newy);
extern void AccelStatezSet(float *Newz);
extern void AccelStatezGet(float *Newz);


#endif // ACCELSTATE_H

/**
 * @}
 * @}
 */
