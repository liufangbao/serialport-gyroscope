/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GPSVelocitySensor GPSVelocitySensor 
 * @brief Raw GPS velocity in NED frame and m/s from @ref GPSModule.
 *
 * Autogenerated files and functions for GPSVelocitySensor Object
 *
 * @{ 
 *
 * @file       gpsvelocitysensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GPSVelocitySensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gpsvelocitysensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GPSVELOCITYSENSOR_H
#define GPSVELOCITYSENSOR_H

/* Object constants */
#define GPSVELOCITYSENSOR_OBJID 0xBC57454
#define GPSVELOCITYSENSOR_ISSINGLEINST 1
#define GPSVELOCITYSENSOR_ISSETTINGS 0
#define GPSVELOCITYSENSOR_ISPRIORITY 0
#define GPSVELOCITYSENSOR_NUMBYTES sizeof(GPSVelocitySensorData)

/* Generic interface functions */
int32_t GPSVelocitySensorInitialize();
UAVObjHandle GPSVelocitySensorHandle();
void GPSVelocitySensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float North;
    float East;
    float Down;
} __attribute__((packed)) GPSVelocitySensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GPSVelocitySensorDataPacked __attribute__((aligned(4))) GPSVelocitySensorData;
    
/* Typesafe Object access functions */
static inline int32_t GPSVelocitySensorGet(GPSVelocitySensorData *dataOut) { return UAVObjGetData(GPSVelocitySensorHandle(), dataOut); }
static inline int32_t GPSVelocitySensorSet(const GPSVelocitySensorData *dataIn) { return UAVObjSetData(GPSVelocitySensorHandle(), dataIn); }
static inline int32_t GPSVelocitySensorInstGet(uint16_t instId, GPSVelocitySensorData *dataOut) { return UAVObjGetInstanceData(GPSVelocitySensorHandle(), instId, dataOut); }
static inline int32_t GPSVelocitySensorInstSet(uint16_t instId, const GPSVelocitySensorData *dataIn) { return UAVObjSetInstanceData(GPSVelocitySensorHandle(), instId, dataIn); }
static inline int32_t GPSVelocitySensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GPSVelocitySensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GPSVelocitySensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GPSVelocitySensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GPSVelocitySensorCreateInstance() { return UAVObjCreateInstance(GPSVelocitySensorHandle(), &GPSVelocitySensorSetDefaults); }
static inline void GPSVelocitySensorRequestUpdate() { UAVObjRequestUpdate(GPSVelocitySensorHandle()); }
static inline void GPSVelocitySensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GPSVelocitySensorHandle(), instId); }
static inline void GPSVelocitySensorUpdated() { UAVObjUpdated(GPSVelocitySensorHandle()); }
static inline void GPSVelocitySensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GPSVelocitySensorHandle(), instId); }
static inline void GPSVelocitySensorLogging() { UAVObjLogging(GPSVelocitySensorHandle()); }
static inline void GPSVelocitySensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(GPSVelocitySensorHandle(), instId); }
static inline int32_t GPSVelocitySensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GPSVelocitySensorHandle(), dataOut); }
static inline int32_t GPSVelocitySensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GPSVelocitySensorHandle(), dataIn); }
static inline int8_t GPSVelocitySensorReadOnly() { return UAVObjReadOnly(GPSVelocitySensorHandle()); }

/* Field North information */

/* Field East information */

/* Field Down information */



/* Set/Get functions */
extern void GPSVelocitySensorNorthSet(float *NewNorth);
extern void GPSVelocitySensorNorthGet(float *NewNorth);
extern void GPSVelocitySensorEastSet(float *NewEast);
extern void GPSVelocitySensorEastGet(float *NewEast);
extern void GPSVelocitySensorDownSet(float *NewDown);
extern void GPSVelocitySensorDownGet(float *NewDown);


#endif // GPSVELOCITYSENSOR_H

/**
 * @}
 * @}
 */
