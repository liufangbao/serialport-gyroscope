/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup OPLinkStatus OPLinkStatus 
 * @brief OPLink device status.
 *
 * Autogenerated files and functions for OPLinkStatus Object
 *
 * @{ 
 *
 * @file       oplinkstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OPLinkStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: oplinkstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OPLINKSTATUS_H
#define OPLINKSTATUS_H

/* Object constants */
#define OPLINKSTATUS_OBJID 0xB1A94E20
#define OPLINKSTATUS_ISSINGLEINST 1
#define OPLINKSTATUS_ISSETTINGS 0
#define OPLINKSTATUS_ISPRIORITY 1
#define OPLINKSTATUS_NUMBYTES sizeof(OPLinkStatusData)

/* Generic interface functions */
int32_t OPLinkStatusInitialize();
UAVObjHandle OPLinkStatusHandle();
void OPLinkStatusSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t DeviceID;
    uint32_t PairIDs[4];
    uint16_t BoardRevision;
    uint16_t HeapRemaining;
    uint16_t UAVTalkErrors;
    uint16_t TXRate;
    uint16_t RXRate;
    uint16_t TXSeq;
    uint16_t RXSeq;
    uint8_t Description[40];
    uint8_t CPUSerial[12];
    uint8_t BoardType;
    uint8_t RxGood;
    uint8_t RxCorrected;
    uint8_t RxErrors;
    uint8_t RxMissed;
    uint8_t RxFailure;
    uint8_t TxDropped;
    uint8_t TxFailure;
    uint8_t Resets;
    uint8_t Timeouts;
    int8_t RSSI;
    uint8_t LinkQuality;
    uint8_t LinkState;
    int8_t PairSignalStrengths[4];
} __attribute__((packed)) OPLinkStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OPLinkStatusDataPacked __attribute__((aligned(4))) OPLinkStatusData;
    
/* Typesafe Object access functions */
static inline int32_t OPLinkStatusGet(OPLinkStatusData *dataOut) { return UAVObjGetData(OPLinkStatusHandle(), dataOut); }
static inline int32_t OPLinkStatusSet(const OPLinkStatusData *dataIn) { return UAVObjSetData(OPLinkStatusHandle(), dataIn); }
static inline int32_t OPLinkStatusInstGet(uint16_t instId, OPLinkStatusData *dataOut) { return UAVObjGetInstanceData(OPLinkStatusHandle(), instId, dataOut); }
static inline int32_t OPLinkStatusInstSet(uint16_t instId, const OPLinkStatusData *dataIn) { return UAVObjSetInstanceData(OPLinkStatusHandle(), instId, dataIn); }
static inline int32_t OPLinkStatusConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(OPLinkStatusHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t OPLinkStatusConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OPLinkStatusHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t OPLinkStatusCreateInstance() { return UAVObjCreateInstance(OPLinkStatusHandle(), &OPLinkStatusSetDefaults); }
static inline void OPLinkStatusRequestUpdate() { UAVObjRequestUpdate(OPLinkStatusHandle()); }
static inline void OPLinkStatusRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OPLinkStatusHandle(), instId); }
static inline void OPLinkStatusUpdated() { UAVObjUpdated(OPLinkStatusHandle()); }
static inline void OPLinkStatusInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OPLinkStatusHandle(), instId); }
static inline void OPLinkStatusLogging() { UAVObjLogging(OPLinkStatusHandle()); }
static inline void OPLinkStatusInstLogging(uint16_t instId) { UAVObjInstanceLogging(OPLinkStatusHandle(), instId); }
static inline int32_t OPLinkStatusGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OPLinkStatusHandle(), dataOut); }
static inline int32_t OPLinkStatusSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OPLinkStatusHandle(), dataIn); }
static inline int8_t OPLinkStatusReadOnly() { return UAVObjReadOnly(OPLinkStatusHandle()); }

/* Field DeviceID information */

/* Field PairIDs information */

// Number of elements for field PairIDs
#define OPLINKSTATUS_PAIRIDS_NUMELEM 4

/* Field BoardRevision information */

/* Field HeapRemaining information */

/* Field UAVTalkErrors information */

/* Field TXRate information */

/* Field RXRate information */

/* Field TXSeq information */

/* Field RXSeq information */

/* Field Description information */

// Number of elements for field Description
#define OPLINKSTATUS_DESCRIPTION_NUMELEM 40

/* Field CPUSerial information */

// Number of elements for field CPUSerial
#define OPLINKSTATUS_CPUSERIAL_NUMELEM 12

/* Field BoardType information */

/* Field RxGood information */

/* Field RxCorrected information */

/* Field RxErrors information */

/* Field RxMissed information */

/* Field RxFailure information */

/* Field TxDropped information */

/* Field TxFailure information */

/* Field Resets information */

/* Field Timeouts information */

/* Field RSSI information */

/* Field LinkQuality information */

/* Field LinkState information */

// Enumeration options for field LinkState
typedef enum {
    OPLINKSTATUS_LINKSTATE_DISABLED=0,
    OPLINKSTATUS_LINKSTATE_ENABLED=1,
    OPLINKSTATUS_LINKSTATE_DISCONNECTED=2,
    OPLINKSTATUS_LINKSTATE_CONNECTING=3,
    OPLINKSTATUS_LINKSTATE_CONNECTED=4
} OPLinkStatusLinkStateOptions;

/* Field PairSignalStrengths information */

// Number of elements for field PairSignalStrengths
#define OPLINKSTATUS_PAIRSIGNALSTRENGTHS_NUMELEM 4



/* Set/Get functions */
extern void OPLinkStatusDeviceIDSet(uint32_t *NewDeviceID);
extern void OPLinkStatusDeviceIDGet(uint32_t *NewDeviceID);
extern void OPLinkStatusPairIDsSet(uint32_t *NewPairIDs);
extern void OPLinkStatusPairIDsGet(uint32_t *NewPairIDs);
extern void OPLinkStatusBoardRevisionSet(uint16_t *NewBoardRevision);
extern void OPLinkStatusBoardRevisionGet(uint16_t *NewBoardRevision);
extern void OPLinkStatusHeapRemainingSet(uint16_t *NewHeapRemaining);
extern void OPLinkStatusHeapRemainingGet(uint16_t *NewHeapRemaining);
extern void OPLinkStatusUAVTalkErrorsSet(uint16_t *NewUAVTalkErrors);
extern void OPLinkStatusUAVTalkErrorsGet(uint16_t *NewUAVTalkErrors);
extern void OPLinkStatusTXRateSet(uint16_t *NewTXRate);
extern void OPLinkStatusTXRateGet(uint16_t *NewTXRate);
extern void OPLinkStatusRXRateSet(uint16_t *NewRXRate);
extern void OPLinkStatusRXRateGet(uint16_t *NewRXRate);
extern void OPLinkStatusTXSeqSet(uint16_t *NewTXSeq);
extern void OPLinkStatusTXSeqGet(uint16_t *NewTXSeq);
extern void OPLinkStatusRXSeqSet(uint16_t *NewRXSeq);
extern void OPLinkStatusRXSeqGet(uint16_t *NewRXSeq);
extern void OPLinkStatusDescriptionSet(uint8_t *NewDescription);
extern void OPLinkStatusDescriptionGet(uint8_t *NewDescription);
extern void OPLinkStatusCPUSerialSet(uint8_t *NewCPUSerial);
extern void OPLinkStatusCPUSerialGet(uint8_t *NewCPUSerial);
extern void OPLinkStatusBoardTypeSet(uint8_t *NewBoardType);
extern void OPLinkStatusBoardTypeGet(uint8_t *NewBoardType);
extern void OPLinkStatusRxGoodSet(uint8_t *NewRxGood);
extern void OPLinkStatusRxGoodGet(uint8_t *NewRxGood);
extern void OPLinkStatusRxCorrectedSet(uint8_t *NewRxCorrected);
extern void OPLinkStatusRxCorrectedGet(uint8_t *NewRxCorrected);
extern void OPLinkStatusRxErrorsSet(uint8_t *NewRxErrors);
extern void OPLinkStatusRxErrorsGet(uint8_t *NewRxErrors);
extern void OPLinkStatusRxMissedSet(uint8_t *NewRxMissed);
extern void OPLinkStatusRxMissedGet(uint8_t *NewRxMissed);
extern void OPLinkStatusRxFailureSet(uint8_t *NewRxFailure);
extern void OPLinkStatusRxFailureGet(uint8_t *NewRxFailure);
extern void OPLinkStatusTxDroppedSet(uint8_t *NewTxDropped);
extern void OPLinkStatusTxDroppedGet(uint8_t *NewTxDropped);
extern void OPLinkStatusTxFailureSet(uint8_t *NewTxFailure);
extern void OPLinkStatusTxFailureGet(uint8_t *NewTxFailure);
extern void OPLinkStatusResetsSet(uint8_t *NewResets);
extern void OPLinkStatusResetsGet(uint8_t *NewResets);
extern void OPLinkStatusTimeoutsSet(uint8_t *NewTimeouts);
extern void OPLinkStatusTimeoutsGet(uint8_t *NewTimeouts);
extern void OPLinkStatusRSSISet(int8_t *NewRSSI);
extern void OPLinkStatusRSSIGet(int8_t *NewRSSI);
extern void OPLinkStatusLinkQualitySet(uint8_t *NewLinkQuality);
extern void OPLinkStatusLinkQualityGet(uint8_t *NewLinkQuality);
extern void OPLinkStatusLinkStateSet(uint8_t *NewLinkState);
extern void OPLinkStatusLinkStateGet(uint8_t *NewLinkState);
extern void OPLinkStatusPairSignalStrengthsSet(int8_t *NewPairSignalStrengths);
extern void OPLinkStatusPairSignalStrengthsGet(int8_t *NewPairSignalStrengths);


#endif // OPLINKSTATUS_H

/**
 * @}
 * @}
 */
