/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GCSTelemetryStats GCSTelemetryStats 
 * @brief The telemetry statistics from the ground computer
 *
 * Autogenerated files and functions for GCSTelemetryStats Object
 *
 * @{ 
 *
 * @file       gcstelemetrystats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GCSTelemetryStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gcstelemetrystats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GCSTELEMETRYSTATS_H
#define GCSTELEMETRYSTATS_H

/* Object constants */
#define GCSTELEMETRYSTATS_OBJID 0xCAD1DC0A
#define GCSTELEMETRYSTATS_ISSINGLEINST 1
#define GCSTELEMETRYSTATS_ISSETTINGS 0
#define GCSTELEMETRYSTATS_ISPRIORITY 1
#define GCSTELEMETRYSTATS_NUMBYTES sizeof(GCSTelemetryStatsData)

/* Generic interface functions */
int32_t GCSTelemetryStatsInitialize();
UAVObjHandle GCSTelemetryStatsHandle();
void GCSTelemetryStatsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float TxDataRate;
    uint32_t TxBytes;
    uint32_t TxFailures;
    uint32_t TxRetries;
    float RxDataRate;
    uint32_t RxBytes;
    uint32_t RxFailures;
    uint32_t RxSyncErrors;
    uint32_t RxCrcErrors;
    uint8_t Status;
} __attribute__((packed)) GCSTelemetryStatsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GCSTelemetryStatsDataPacked __attribute__((aligned(4))) GCSTelemetryStatsData;
    
/* Typesafe Object access functions */
static inline int32_t GCSTelemetryStatsGet(GCSTelemetryStatsData *dataOut) { return UAVObjGetData(GCSTelemetryStatsHandle(), dataOut); }
static inline int32_t GCSTelemetryStatsSet(const GCSTelemetryStatsData *dataIn) { return UAVObjSetData(GCSTelemetryStatsHandle(), dataIn); }
static inline int32_t GCSTelemetryStatsInstGet(uint16_t instId, GCSTelemetryStatsData *dataOut) { return UAVObjGetInstanceData(GCSTelemetryStatsHandle(), instId, dataOut); }
static inline int32_t GCSTelemetryStatsInstSet(uint16_t instId, const GCSTelemetryStatsData *dataIn) { return UAVObjSetInstanceData(GCSTelemetryStatsHandle(), instId, dataIn); }
static inline int32_t GCSTelemetryStatsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GCSTelemetryStatsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GCSTelemetryStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GCSTelemetryStatsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GCSTelemetryStatsCreateInstance() { return UAVObjCreateInstance(GCSTelemetryStatsHandle(), &GCSTelemetryStatsSetDefaults); }
static inline void GCSTelemetryStatsRequestUpdate() { UAVObjRequestUpdate(GCSTelemetryStatsHandle()); }
static inline void GCSTelemetryStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GCSTelemetryStatsHandle(), instId); }
static inline void GCSTelemetryStatsUpdated() { UAVObjUpdated(GCSTelemetryStatsHandle()); }
static inline void GCSTelemetryStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GCSTelemetryStatsHandle(), instId); }
static inline void GCSTelemetryStatsLogging() { UAVObjLogging(GCSTelemetryStatsHandle()); }
static inline void GCSTelemetryStatsInstLogging(uint16_t instId) { UAVObjInstanceLogging(GCSTelemetryStatsHandle(), instId); }
static inline int32_t GCSTelemetryStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GCSTelemetryStatsHandle(), dataOut); }
static inline int32_t GCSTelemetryStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GCSTelemetryStatsHandle(), dataIn); }
static inline int8_t GCSTelemetryStatsReadOnly() { return UAVObjReadOnly(GCSTelemetryStatsHandle()); }

/* Field TxDataRate information */

/* Field TxBytes information */

/* Field TxFailures information */

/* Field TxRetries information */

/* Field RxDataRate information */

/* Field RxBytes information */

/* Field RxFailures information */

/* Field RxSyncErrors information */

/* Field RxCrcErrors information */

/* Field Status information */

// Enumeration options for field Status
typedef enum {
    GCSTELEMETRYSTATS_STATUS_DISCONNECTED=0,
    GCSTELEMETRYSTATS_STATUS_HANDSHAKEREQ=1,
    GCSTELEMETRYSTATS_STATUS_HANDSHAKEACK=2,
    GCSTELEMETRYSTATS_STATUS_CONNECTED=3
} GCSTelemetryStatsStatusOptions;



/* Set/Get functions */
extern void GCSTelemetryStatsTxDataRateSet(float *NewTxDataRate);
extern void GCSTelemetryStatsTxDataRateGet(float *NewTxDataRate);
extern void GCSTelemetryStatsTxBytesSet(uint32_t *NewTxBytes);
extern void GCSTelemetryStatsTxBytesGet(uint32_t *NewTxBytes);
extern void GCSTelemetryStatsTxFailuresSet(uint32_t *NewTxFailures);
extern void GCSTelemetryStatsTxFailuresGet(uint32_t *NewTxFailures);
extern void GCSTelemetryStatsTxRetriesSet(uint32_t *NewTxRetries);
extern void GCSTelemetryStatsTxRetriesGet(uint32_t *NewTxRetries);
extern void GCSTelemetryStatsRxDataRateSet(float *NewRxDataRate);
extern void GCSTelemetryStatsRxDataRateGet(float *NewRxDataRate);
extern void GCSTelemetryStatsRxBytesSet(uint32_t *NewRxBytes);
extern void GCSTelemetryStatsRxBytesGet(uint32_t *NewRxBytes);
extern void GCSTelemetryStatsRxFailuresSet(uint32_t *NewRxFailures);
extern void GCSTelemetryStatsRxFailuresGet(uint32_t *NewRxFailures);
extern void GCSTelemetryStatsRxSyncErrorsSet(uint32_t *NewRxSyncErrors);
extern void GCSTelemetryStatsRxSyncErrorsGet(uint32_t *NewRxSyncErrors);
extern void GCSTelemetryStatsRxCrcErrorsSet(uint32_t *NewRxCrcErrors);
extern void GCSTelemetryStatsRxCrcErrorsGet(uint32_t *NewRxCrcErrors);
extern void GCSTelemetryStatsStatusSet(uint8_t *NewStatus);
extern void GCSTelemetryStatsStatusGet(uint8_t *NewStatus);


#endif // GCSTELEMETRYSTATS_H

/**
 * @}
 * @}
 */
