/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AuxMagSensor AuxMagSensor 
 * @brief Calibrated sensor data from aux 3 axis magnetometer in MilliGauss.
 *
 * Autogenerated files and functions for AuxMagSensor Object
 *
 * @{ 
 *
 * @file       auxmagsensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AuxMagSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: auxmagsensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AUXMAGSENSOR_H
#define AUXMAGSENSOR_H

/* Object constants */
#define AUXMAGSENSOR_OBJID 0x9B459A2
#define AUXMAGSENSOR_ISSINGLEINST 1
#define AUXMAGSENSOR_ISSETTINGS 0
#define AUXMAGSENSOR_ISPRIORITY 0
#define AUXMAGSENSOR_NUMBYTES sizeof(AuxMagSensorData)

/* Generic interface functions */
int32_t AuxMagSensorInitialize();
UAVObjHandle AuxMagSensorHandle();
void AuxMagSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
    uint8_t Status;
} __attribute__((packed)) AuxMagSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AuxMagSensorDataPacked __attribute__((aligned(4))) AuxMagSensorData;
    
/* Typesafe Object access functions */
static inline int32_t AuxMagSensorGet(AuxMagSensorData *dataOut) { return UAVObjGetData(AuxMagSensorHandle(), dataOut); }
static inline int32_t AuxMagSensorSet(const AuxMagSensorData *dataIn) { return UAVObjSetData(AuxMagSensorHandle(), dataIn); }
static inline int32_t AuxMagSensorInstGet(uint16_t instId, AuxMagSensorData *dataOut) { return UAVObjGetInstanceData(AuxMagSensorHandle(), instId, dataOut); }
static inline int32_t AuxMagSensorInstSet(uint16_t instId, const AuxMagSensorData *dataIn) { return UAVObjSetInstanceData(AuxMagSensorHandle(), instId, dataIn); }
static inline int32_t AuxMagSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AuxMagSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AuxMagSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AuxMagSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AuxMagSensorCreateInstance() { return UAVObjCreateInstance(AuxMagSensorHandle(), &AuxMagSensorSetDefaults); }
static inline void AuxMagSensorRequestUpdate() { UAVObjRequestUpdate(AuxMagSensorHandle()); }
static inline void AuxMagSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AuxMagSensorHandle(), instId); }
static inline void AuxMagSensorUpdated() { UAVObjUpdated(AuxMagSensorHandle()); }
static inline void AuxMagSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AuxMagSensorHandle(), instId); }
static inline void AuxMagSensorLogging() { UAVObjLogging(AuxMagSensorHandle()); }
static inline void AuxMagSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(AuxMagSensorHandle(), instId); }
static inline int32_t AuxMagSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AuxMagSensorHandle(), dataOut); }
static inline int32_t AuxMagSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AuxMagSensorHandle(), dataIn); }
static inline int8_t AuxMagSensorReadOnly() { return UAVObjReadOnly(AuxMagSensorHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */

/* Field Status information */

// Enumeration options for field Status
typedef enum {
    AUXMAGSENSOR_STATUS_NONE=0,
    AUXMAGSENSOR_STATUS_OK=1
} AuxMagSensorStatusOptions;



/* Set/Get functions */
extern void AuxMagSensorxSet(float *Newx);
extern void AuxMagSensorxGet(float *Newx);
extern void AuxMagSensorySet(float *Newy);
extern void AuxMagSensoryGet(float *Newy);
extern void AuxMagSensorzSet(float *Newz);
extern void AuxMagSensorzGet(float *Newz);
extern void AuxMagSensorStatusSet(uint8_t *NewStatus);
extern void AuxMagSensorStatusGet(uint8_t *NewStatus);


#endif // AUXMAGSENSOR_H

/**
 * @}
 * @}
 */
