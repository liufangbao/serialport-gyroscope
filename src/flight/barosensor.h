/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup BaroSensor BaroSensor 
 * @brief The raw data from the barometric sensor with pressure, temperature and altitude estimate.
 *
 * Autogenerated files and functions for BaroSensor Object
 *
 * @{ 
 *
 * @file       barosensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the BaroSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: barosensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef BAROSENSOR_H
#define BAROSENSOR_H

/* Object constants */
#define BAROSENSOR_OBJID 0x48120EA6
#define BAROSENSOR_ISSINGLEINST 1
#define BAROSENSOR_ISSETTINGS 0
#define BAROSENSOR_ISPRIORITY 0
#define BAROSENSOR_NUMBYTES sizeof(BaroSensorData)

/* Generic interface functions */
int32_t BaroSensorInitialize();
UAVObjHandle BaroSensorHandle();
void BaroSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float Altitude;
    float Temperature;
    float Pressure;
} __attribute__((packed)) BaroSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef BaroSensorDataPacked __attribute__((aligned(4))) BaroSensorData;
    
/* Typesafe Object access functions */
static inline int32_t BaroSensorGet(BaroSensorData *dataOut) { return UAVObjGetData(BaroSensorHandle(), dataOut); }
static inline int32_t BaroSensorSet(const BaroSensorData *dataIn) { return UAVObjSetData(BaroSensorHandle(), dataIn); }
static inline int32_t BaroSensorInstGet(uint16_t instId, BaroSensorData *dataOut) { return UAVObjGetInstanceData(BaroSensorHandle(), instId, dataOut); }
static inline int32_t BaroSensorInstSet(uint16_t instId, const BaroSensorData *dataIn) { return UAVObjSetInstanceData(BaroSensorHandle(), instId, dataIn); }
static inline int32_t BaroSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(BaroSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t BaroSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(BaroSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t BaroSensorCreateInstance() { return UAVObjCreateInstance(BaroSensorHandle(), &BaroSensorSetDefaults); }
static inline void BaroSensorRequestUpdate() { UAVObjRequestUpdate(BaroSensorHandle()); }
static inline void BaroSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(BaroSensorHandle(), instId); }
static inline void BaroSensorUpdated() { UAVObjUpdated(BaroSensorHandle()); }
static inline void BaroSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(BaroSensorHandle(), instId); }
static inline void BaroSensorLogging() { UAVObjLogging(BaroSensorHandle()); }
static inline void BaroSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(BaroSensorHandle(), instId); }
static inline int32_t BaroSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(BaroSensorHandle(), dataOut); }
static inline int32_t BaroSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(BaroSensorHandle(), dataIn); }
static inline int8_t BaroSensorReadOnly() { return UAVObjReadOnly(BaroSensorHandle()); }

/* Field Altitude information */

/* Field Temperature information */

/* Field Pressure information */



/* Set/Get functions */
extern void BaroSensorAltitudeSet(float *NewAltitude);
extern void BaroSensorAltitudeGet(float *NewAltitude);
extern void BaroSensorTemperatureSet(float *NewTemperature);
extern void BaroSensorTemperatureGet(float *NewTemperature);
extern void BaroSensorPressureSet(float *NewPressure);
extern void BaroSensorPressureGet(float *NewPressure);


#endif // BAROSENSOR_H

/**
 * @}
 * @}
 */
