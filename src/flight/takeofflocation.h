/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup TakeOffLocation TakeOffLocation 
 * @brief TakeOffLocation setting which contains the destination of a ReturnToBase operation
 *
 * Autogenerated files and functions for TakeOffLocation Object
 *
 * @{ 
 *
 * @file       takeofflocation.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the TakeOffLocation object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: takeofflocation.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TAKEOFFLOCATION_H
#define TAKEOFFLOCATION_H

/* Object constants */
#define TAKEOFFLOCATION_OBJID 0xD292FDCC
#define TAKEOFFLOCATION_ISSINGLEINST 1
#define TAKEOFFLOCATION_ISSETTINGS 1
#define TAKEOFFLOCATION_ISPRIORITY 0
#define TAKEOFFLOCATION_NUMBYTES sizeof(TakeOffLocationData)

/* Generic interface functions */
int32_t TakeOffLocationInitialize();
UAVObjHandle TakeOffLocationHandle();
void TakeOffLocationSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float North;
    float East;
    float Down;
    uint8_t Mode;
    uint8_t Status;
} __attribute__((packed)) TakeOffLocationDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef TakeOffLocationDataPacked __attribute__((aligned(4))) TakeOffLocationData;
    
/* Typesafe Object access functions */
static inline int32_t TakeOffLocationGet(TakeOffLocationData *dataOut) { return UAVObjGetData(TakeOffLocationHandle(), dataOut); }
static inline int32_t TakeOffLocationSet(const TakeOffLocationData *dataIn) { return UAVObjSetData(TakeOffLocationHandle(), dataIn); }
static inline int32_t TakeOffLocationInstGet(uint16_t instId, TakeOffLocationData *dataOut) { return UAVObjGetInstanceData(TakeOffLocationHandle(), instId, dataOut); }
static inline int32_t TakeOffLocationInstSet(uint16_t instId, const TakeOffLocationData *dataIn) { return UAVObjSetInstanceData(TakeOffLocationHandle(), instId, dataIn); }
static inline int32_t TakeOffLocationConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(TakeOffLocationHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t TakeOffLocationConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(TakeOffLocationHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t TakeOffLocationCreateInstance() { return UAVObjCreateInstance(TakeOffLocationHandle(), &TakeOffLocationSetDefaults); }
static inline void TakeOffLocationRequestUpdate() { UAVObjRequestUpdate(TakeOffLocationHandle()); }
static inline void TakeOffLocationRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(TakeOffLocationHandle(), instId); }
static inline void TakeOffLocationUpdated() { UAVObjUpdated(TakeOffLocationHandle()); }
static inline void TakeOffLocationInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(TakeOffLocationHandle(), instId); }
static inline void TakeOffLocationLogging() { UAVObjLogging(TakeOffLocationHandle()); }
static inline void TakeOffLocationInstLogging(uint16_t instId) { UAVObjInstanceLogging(TakeOffLocationHandle(), instId); }
static inline int32_t TakeOffLocationGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(TakeOffLocationHandle(), dataOut); }
static inline int32_t TakeOffLocationSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(TakeOffLocationHandle(), dataIn); }
static inline int8_t TakeOffLocationReadOnly() { return UAVObjReadOnly(TakeOffLocationHandle()); }

/* Field North information */

/* Field East information */

/* Field Down information */

/* Field Mode information */

// Enumeration options for field Mode
typedef enum {
    TAKEOFFLOCATION_MODE_ARMINGLOCATION=0,
    TAKEOFFLOCATION_MODE_FIRSTARMINGLOCATION=1,
    TAKEOFFLOCATION_MODE_PRESET=2
} TakeOffLocationModeOptions;

/* Field Status information */

// Enumeration options for field Status
typedef enum {
    TAKEOFFLOCATION_STATUS_VALID=0,
    TAKEOFFLOCATION_STATUS_INVALID=1
} TakeOffLocationStatusOptions;



/* Set/Get functions */
extern void TakeOffLocationNorthSet(float *NewNorth);
extern void TakeOffLocationNorthGet(float *NewNorth);
extern void TakeOffLocationEastSet(float *NewEast);
extern void TakeOffLocationEastGet(float *NewEast);
extern void TakeOffLocationDownSet(float *NewDown);
extern void TakeOffLocationDownGet(float *NewDown);
extern void TakeOffLocationModeSet(uint8_t *NewMode);
extern void TakeOffLocationModeGet(uint8_t *NewMode);
extern void TakeOffLocationStatusSet(uint8_t *NewStatus);
extern void TakeOffLocationStatusGet(uint8_t *NewStatus);


#endif // TAKEOFFLOCATION_H

/**
 * @}
 * @}
 */
