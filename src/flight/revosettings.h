/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup RevoSettings RevoSettings 
 * @brief Settings for the revo to control the algorithm and what is updated
 *
 * Autogenerated files and functions for RevoSettings Object
 *
 * @{ 
 *
 * @file       revosettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the RevoSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: revosettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef REVOSETTINGS_H
#define REVOSETTINGS_H

/* Object constants */
#define REVOSETTINGS_OBJID 0xC456EB9A
#define REVOSETTINGS_ISSINGLEINST 1
#define REVOSETTINGS_ISSETTINGS 1
#define REVOSETTINGS_ISPRIORITY 0
#define REVOSETTINGS_NUMBYTES sizeof(RevoSettingsData)

/* Generic interface functions */
int32_t RevoSettingsInitialize();
UAVObjHandle RevoSettingsHandle();
void RevoSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    float Warning;
    float Error;
}  RevoSettingsMagnetometerMaxDeviationData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  RevoSettingsMagnetometerMaxDeviationDataArray ;
#define RevoSettingsMagnetometerMaxDeviationToArray( var ) UAVObjectFieldToArray( RevoSettingsMagnetometerMaxDeviationData, var )

typedef struct __attribute__ ((__packed__)) {
    float a;
    float b;
    float c;
    float d;
}  RevoSettingsBaroTempCorrectionPolynomialData ;
typedef struct __attribute__ ((__packed__)) {
    float array[4];
}  RevoSettingsBaroTempCorrectionPolynomialDataArray ;
#define RevoSettingsBaroTempCorrectionPolynomialToArray( var ) UAVObjectFieldToArray( RevoSettingsBaroTempCorrectionPolynomialData, var )

typedef struct __attribute__ ((__packed__)) {
    float min;
    float max;
}  RevoSettingsBaroTempCorrectionExtentData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  RevoSettingsBaroTempCorrectionExtentDataArray ;
#define RevoSettingsBaroTempCorrectionExtentToArray( var ) UAVObjectFieldToArray( RevoSettingsBaroTempCorrectionExtentData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float BaroGPSOffsetCorrectionAlpha;
    RevoSettingsMagnetometerMaxDeviationData MagnetometerMaxDeviation;
    RevoSettingsBaroTempCorrectionPolynomialData BaroTempCorrectionPolynomial;
    RevoSettingsBaroTempCorrectionExtentData BaroTempCorrectionExtent;
    float VelocityPostProcessingLowPassAlpha;
    uint8_t FusionAlgorithm;
} __attribute__((packed)) RevoSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef RevoSettingsDataPacked __attribute__((aligned(4))) RevoSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t RevoSettingsGet(RevoSettingsData *dataOut) { return UAVObjGetData(RevoSettingsHandle(), dataOut); }
static inline int32_t RevoSettingsSet(const RevoSettingsData *dataIn) { return UAVObjSetData(RevoSettingsHandle(), dataIn); }
static inline int32_t RevoSettingsInstGet(uint16_t instId, RevoSettingsData *dataOut) { return UAVObjGetInstanceData(RevoSettingsHandle(), instId, dataOut); }
static inline int32_t RevoSettingsInstSet(uint16_t instId, const RevoSettingsData *dataIn) { return UAVObjSetInstanceData(RevoSettingsHandle(), instId, dataIn); }
static inline int32_t RevoSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(RevoSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t RevoSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(RevoSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t RevoSettingsCreateInstance() { return UAVObjCreateInstance(RevoSettingsHandle(), &RevoSettingsSetDefaults); }
static inline void RevoSettingsRequestUpdate() { UAVObjRequestUpdate(RevoSettingsHandle()); }
static inline void RevoSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(RevoSettingsHandle(), instId); }
static inline void RevoSettingsUpdated() { UAVObjUpdated(RevoSettingsHandle()); }
static inline void RevoSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(RevoSettingsHandle(), instId); }
static inline void RevoSettingsLogging() { UAVObjLogging(RevoSettingsHandle()); }
static inline void RevoSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(RevoSettingsHandle(), instId); }
static inline int32_t RevoSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(RevoSettingsHandle(), dataOut); }
static inline int32_t RevoSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(RevoSettingsHandle(), dataIn); }
static inline int8_t RevoSettingsReadOnly() { return UAVObjReadOnly(RevoSettingsHandle()); }

/* Field BaroGPSOffsetCorrectionAlpha information */

/* Field MagnetometerMaxDeviation information */

// Array element names for field MagnetometerMaxDeviation
typedef enum {
    REVOSETTINGS_MAGNETOMETERMAXDEVIATION_WARNING=0,
    REVOSETTINGS_MAGNETOMETERMAXDEVIATION_ERROR=1
} RevoSettingsMagnetometerMaxDeviationElem;

// Number of elements for field MagnetometerMaxDeviation
#define REVOSETTINGS_MAGNETOMETERMAXDEVIATION_NUMELEM 2

/* Field BaroTempCorrectionPolynomial information */

// Array element names for field BaroTempCorrectionPolynomial
typedef enum {
    REVOSETTINGS_BAROTEMPCORRECTIONPOLYNOMIAL_A=0,
    REVOSETTINGS_BAROTEMPCORRECTIONPOLYNOMIAL_B=1,
    REVOSETTINGS_BAROTEMPCORRECTIONPOLYNOMIAL_C=2,
    REVOSETTINGS_BAROTEMPCORRECTIONPOLYNOMIAL_D=3
} RevoSettingsBaroTempCorrectionPolynomialElem;

// Number of elements for field BaroTempCorrectionPolynomial
#define REVOSETTINGS_BAROTEMPCORRECTIONPOLYNOMIAL_NUMELEM 4

/* Field BaroTempCorrectionExtent information */

// Array element names for field BaroTempCorrectionExtent
typedef enum {
    REVOSETTINGS_BAROTEMPCORRECTIONEXTENT_MIN=0,
    REVOSETTINGS_BAROTEMPCORRECTIONEXTENT_MAX=1
} RevoSettingsBaroTempCorrectionExtentElem;

// Number of elements for field BaroTempCorrectionExtent
#define REVOSETTINGS_BAROTEMPCORRECTIONEXTENT_NUMELEM 2

/* Field VelocityPostProcessingLowPassAlpha information */

/* Field FusionAlgorithm information */

// Enumeration options for field FusionAlgorithm
typedef enum {
    REVOSETTINGS_FUSIONALGORITHM_NONE=0,
    REVOSETTINGS_FUSIONALGORITHM_BASICCOMPLEMENTARY=1,
    REVOSETTINGS_FUSIONALGORITHM_COMPLEMENTARYMAG=2,
    REVOSETTINGS_FUSIONALGORITHM_COMPLEMENTARYMAGGPSOUTDOOR=3,
    REVOSETTINGS_FUSIONALGORITHM_INS13INDOOR=4,
    REVOSETTINGS_FUSIONALGORITHM_GPSNAVIGATIONINS13=5
} RevoSettingsFusionAlgorithmOptions;



/* Set/Get functions */
extern void RevoSettingsBaroGPSOffsetCorrectionAlphaSet(float *NewBaroGPSOffsetCorrectionAlpha);
extern void RevoSettingsBaroGPSOffsetCorrectionAlphaGet(float *NewBaroGPSOffsetCorrectionAlpha);
extern void RevoSettingsMagnetometerMaxDeviationSet(RevoSettingsMagnetometerMaxDeviationData *NewMagnetometerMaxDeviation);
extern void RevoSettingsMagnetometerMaxDeviationGet(RevoSettingsMagnetometerMaxDeviationData *NewMagnetometerMaxDeviation);
extern void RevoSettingsMagnetometerMaxDeviationArraySet(float *NewMagnetometerMaxDeviation);
extern void RevoSettingsMagnetometerMaxDeviationArrayGet(float *NewMagnetometerMaxDeviation);
extern void RevoSettingsBaroTempCorrectionPolynomialSet(RevoSettingsBaroTempCorrectionPolynomialData *NewBaroTempCorrectionPolynomial);
extern void RevoSettingsBaroTempCorrectionPolynomialGet(RevoSettingsBaroTempCorrectionPolynomialData *NewBaroTempCorrectionPolynomial);
extern void RevoSettingsBaroTempCorrectionPolynomialArraySet(float *NewBaroTempCorrectionPolynomial);
extern void RevoSettingsBaroTempCorrectionPolynomialArrayGet(float *NewBaroTempCorrectionPolynomial);
extern void RevoSettingsBaroTempCorrectionExtentSet(RevoSettingsBaroTempCorrectionExtentData *NewBaroTempCorrectionExtent);
extern void RevoSettingsBaroTempCorrectionExtentGet(RevoSettingsBaroTempCorrectionExtentData *NewBaroTempCorrectionExtent);
extern void RevoSettingsBaroTempCorrectionExtentArraySet(float *NewBaroTempCorrectionExtent);
extern void RevoSettingsBaroTempCorrectionExtentArrayGet(float *NewBaroTempCorrectionExtent);
extern void RevoSettingsVelocityPostProcessingLowPassAlphaSet(float *NewVelocityPostProcessingLowPassAlpha);
extern void RevoSettingsVelocityPostProcessingLowPassAlphaGet(float *NewVelocityPostProcessingLowPassAlpha);
extern void RevoSettingsFusionAlgorithmSet(uint8_t *NewFusionAlgorithm);
extern void RevoSettingsFusionAlgorithmGet(uint8_t *NewFusionAlgorithm);


#endif // REVOSETTINGS_H

/**
 * @}
 * @}
 */
