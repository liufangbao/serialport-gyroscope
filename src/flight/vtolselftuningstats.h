/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup VtolSelfTuningStats VtolSelfTuningStats 
 * @brief Automatically calculated adjustments to parameters used into vtol auto flight modes. Can come from @ref PathFollower 
 *
 * Autogenerated files and functions for VtolSelfTuningStats Object
 *
 * @{ 
 *
 * @file       vtolselftuningstats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the VtolSelfTuningStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: vtolselftuningstats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef VTOLSELFTUNINGSTATS_H
#define VTOLSELFTUNINGSTATS_H

/* Object constants */
#define VTOLSELFTUNINGSTATS_OBJID 0x1B0B1B34
#define VTOLSELFTUNINGSTATS_ISSINGLEINST 1
#define VTOLSELFTUNINGSTATS_ISSETTINGS 0
#define VTOLSELFTUNINGSTATS_ISPRIORITY 0
#define VTOLSELFTUNINGSTATS_NUMBYTES sizeof(VtolSelfTuningStatsData)

/* Generic interface functions */
int32_t VtolSelfTuningStatsInitialize();
UAVObjHandle VtolSelfTuningStatsHandle();
void VtolSelfTuningStatsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float NeutralThrustOffset;
    float NeutralThrustCorrection;
    float NeutralThrustAccumulator;
    float NeutralThrustRange;
} __attribute__((packed)) VtolSelfTuningStatsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef VtolSelfTuningStatsDataPacked __attribute__((aligned(4))) VtolSelfTuningStatsData;
    
/* Typesafe Object access functions */
static inline int32_t VtolSelfTuningStatsGet(VtolSelfTuningStatsData *dataOut) { return UAVObjGetData(VtolSelfTuningStatsHandle(), dataOut); }
static inline int32_t VtolSelfTuningStatsSet(const VtolSelfTuningStatsData *dataIn) { return UAVObjSetData(VtolSelfTuningStatsHandle(), dataIn); }
static inline int32_t VtolSelfTuningStatsInstGet(uint16_t instId, VtolSelfTuningStatsData *dataOut) { return UAVObjGetInstanceData(VtolSelfTuningStatsHandle(), instId, dataOut); }
static inline int32_t VtolSelfTuningStatsInstSet(uint16_t instId, const VtolSelfTuningStatsData *dataIn) { return UAVObjSetInstanceData(VtolSelfTuningStatsHandle(), instId, dataIn); }
static inline int32_t VtolSelfTuningStatsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(VtolSelfTuningStatsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t VtolSelfTuningStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(VtolSelfTuningStatsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t VtolSelfTuningStatsCreateInstance() { return UAVObjCreateInstance(VtolSelfTuningStatsHandle(), &VtolSelfTuningStatsSetDefaults); }
static inline void VtolSelfTuningStatsRequestUpdate() { UAVObjRequestUpdate(VtolSelfTuningStatsHandle()); }
static inline void VtolSelfTuningStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(VtolSelfTuningStatsHandle(), instId); }
static inline void VtolSelfTuningStatsUpdated() { UAVObjUpdated(VtolSelfTuningStatsHandle()); }
static inline void VtolSelfTuningStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(VtolSelfTuningStatsHandle(), instId); }
static inline void VtolSelfTuningStatsLogging() { UAVObjLogging(VtolSelfTuningStatsHandle()); }
static inline void VtolSelfTuningStatsInstLogging(uint16_t instId) { UAVObjInstanceLogging(VtolSelfTuningStatsHandle(), instId); }
static inline int32_t VtolSelfTuningStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(VtolSelfTuningStatsHandle(), dataOut); }
static inline int32_t VtolSelfTuningStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(VtolSelfTuningStatsHandle(), dataIn); }
static inline int8_t VtolSelfTuningStatsReadOnly() { return UAVObjReadOnly(VtolSelfTuningStatsHandle()); }

/* Field NeutralThrustOffset information */

/* Field NeutralThrustCorrection information */

/* Field NeutralThrustAccumulator information */

/* Field NeutralThrustRange information */



/* Set/Get functions */
extern void VtolSelfTuningStatsNeutralThrustOffsetSet(float *NewNeutralThrustOffset);
extern void VtolSelfTuningStatsNeutralThrustOffsetGet(float *NewNeutralThrustOffset);
extern void VtolSelfTuningStatsNeutralThrustCorrectionSet(float *NewNeutralThrustCorrection);
extern void VtolSelfTuningStatsNeutralThrustCorrectionGet(float *NewNeutralThrustCorrection);
extern void VtolSelfTuningStatsNeutralThrustAccumulatorSet(float *NewNeutralThrustAccumulator);
extern void VtolSelfTuningStatsNeutralThrustAccumulatorGet(float *NewNeutralThrustAccumulator);
extern void VtolSelfTuningStatsNeutralThrustRangeSet(float *NewNeutralThrustRange);
extern void VtolSelfTuningStatsNeutralThrustRangeGet(float *NewNeutralThrustRange);


#endif // VTOLSELFTUNINGSTATS_H

/**
 * @}
 * @}
 */
