/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup CallbackInfo CallbackInfo 
 * @brief Task information
 *
 * Autogenerated files and functions for CallbackInfo Object
 *
 * @{ 
 *
 * @file       callbackinfo.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the CallbackInfo object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: callbackinfo.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef CALLBACKINFO_H
#define CALLBACKINFO_H

/* Object constants */
#define CALLBACKINFO_OBJID 0xB984C78C
#define CALLBACKINFO_ISSINGLEINST 1
#define CALLBACKINFO_ISSETTINGS 0
#define CALLBACKINFO_ISPRIORITY 0
#define CALLBACKINFO_NUMBYTES sizeof(CallbackInfoData)

/* Generic interface functions */
int32_t CallbackInfoInitialize();
UAVObjHandle CallbackInfoHandle();
void CallbackInfoSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint32_t EventDispatcher;
    uint32_t StateEstimation;
    uint32_t AltitudeHold;
    uint32_t Stabilization0;
    uint32_t Stabilization1;
    uint32_t PathFollower;
    uint32_t PathPlanner0;
    uint32_t PathPlanner1;
    uint32_t ManualControl;
}  CallbackInfoRunningTimeData ;
typedef struct __attribute__ ((__packed__)) {
    uint32_t array[9];
}  CallbackInfoRunningTimeDataArray ;
#define CallbackInfoRunningTimeToArray( var ) UAVObjectFieldToArray( CallbackInfoRunningTimeData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t EventDispatcher;
    int16_t StateEstimation;
    int16_t AltitudeHold;
    int16_t Stabilization0;
    int16_t Stabilization1;
    int16_t PathFollower;
    int16_t PathPlanner0;
    int16_t PathPlanner1;
    int16_t ManualControl;
}  CallbackInfoStackRemainingData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[9];
}  CallbackInfoStackRemainingDataArray ;
#define CallbackInfoStackRemainingToArray( var ) UAVObjectFieldToArray( CallbackInfoStackRemainingData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t EventDispatcher;
    uint8_t StateEstimation;
    uint8_t AltitudeHold;
    uint8_t Stabilization0;
    uint8_t Stabilization1;
    uint8_t PathFollower;
    uint8_t PathPlanner0;
    uint8_t PathPlanner1;
    uint8_t ManualControl;
}  CallbackInfoRunningData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[9];
}  CallbackInfoRunningDataArray ;
#define CallbackInfoRunningToArray( var ) UAVObjectFieldToArray( CallbackInfoRunningData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    CallbackInfoRunningTimeData RunningTime;
    CallbackInfoStackRemainingData StackRemaining;
    CallbackInfoRunningData Running;
} __attribute__((packed)) CallbackInfoDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef CallbackInfoDataPacked __attribute__((aligned(4))) CallbackInfoData;
    
/* Typesafe Object access functions */
static inline int32_t CallbackInfoGet(CallbackInfoData *dataOut) { return UAVObjGetData(CallbackInfoHandle(), dataOut); }
static inline int32_t CallbackInfoSet(const CallbackInfoData *dataIn) { return UAVObjSetData(CallbackInfoHandle(), dataIn); }
static inline int32_t CallbackInfoInstGet(uint16_t instId, CallbackInfoData *dataOut) { return UAVObjGetInstanceData(CallbackInfoHandle(), instId, dataOut); }
static inline int32_t CallbackInfoInstSet(uint16_t instId, const CallbackInfoData *dataIn) { return UAVObjSetInstanceData(CallbackInfoHandle(), instId, dataIn); }
static inline int32_t CallbackInfoConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(CallbackInfoHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t CallbackInfoConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(CallbackInfoHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t CallbackInfoCreateInstance() { return UAVObjCreateInstance(CallbackInfoHandle(), &CallbackInfoSetDefaults); }
static inline void CallbackInfoRequestUpdate() { UAVObjRequestUpdate(CallbackInfoHandle()); }
static inline void CallbackInfoRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(CallbackInfoHandle(), instId); }
static inline void CallbackInfoUpdated() { UAVObjUpdated(CallbackInfoHandle()); }
static inline void CallbackInfoInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(CallbackInfoHandle(), instId); }
static inline void CallbackInfoLogging() { UAVObjLogging(CallbackInfoHandle()); }
static inline void CallbackInfoInstLogging(uint16_t instId) { UAVObjInstanceLogging(CallbackInfoHandle(), instId); }
static inline int32_t CallbackInfoGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(CallbackInfoHandle(), dataOut); }
static inline int32_t CallbackInfoSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(CallbackInfoHandle(), dataIn); }
static inline int8_t CallbackInfoReadOnly() { return UAVObjReadOnly(CallbackInfoHandle()); }

/* Field RunningTime information */

// Array element names for field RunningTime
typedef enum {
    CALLBACKINFO_RUNNINGTIME_EVENTDISPATCHER=0,
    CALLBACKINFO_RUNNINGTIME_STATEESTIMATION=1,
    CALLBACKINFO_RUNNINGTIME_ALTITUDEHOLD=2,
    CALLBACKINFO_RUNNINGTIME_STABILIZATION0=3,
    CALLBACKINFO_RUNNINGTIME_STABILIZATION1=4,
    CALLBACKINFO_RUNNINGTIME_PATHFOLLOWER=5,
    CALLBACKINFO_RUNNINGTIME_PATHPLANNER0=6,
    CALLBACKINFO_RUNNINGTIME_PATHPLANNER1=7,
    CALLBACKINFO_RUNNINGTIME_MANUALCONTROL=8
} CallbackInfoRunningTimeElem;

// Number of elements for field RunningTime
#define CALLBACKINFO_RUNNINGTIME_NUMELEM 9

/* Field StackRemaining information */

// Array element names for field StackRemaining
typedef enum {
    CALLBACKINFO_STACKREMAINING_EVENTDISPATCHER=0,
    CALLBACKINFO_STACKREMAINING_STATEESTIMATION=1,
    CALLBACKINFO_STACKREMAINING_ALTITUDEHOLD=2,
    CALLBACKINFO_STACKREMAINING_STABILIZATION0=3,
    CALLBACKINFO_STACKREMAINING_STABILIZATION1=4,
    CALLBACKINFO_STACKREMAINING_PATHFOLLOWER=5,
    CALLBACKINFO_STACKREMAINING_PATHPLANNER0=6,
    CALLBACKINFO_STACKREMAINING_PATHPLANNER1=7,
    CALLBACKINFO_STACKREMAINING_MANUALCONTROL=8
} CallbackInfoStackRemainingElem;

// Number of elements for field StackRemaining
#define CALLBACKINFO_STACKREMAINING_NUMELEM 9

/* Field Running information */

// Enumeration options for field Running
typedef enum {
    CALLBACKINFO_RUNNING_FALSE=0,
    CALLBACKINFO_RUNNING_TRUE=1
} CallbackInfoRunningOptions;

// Array element names for field Running
typedef enum {
    CALLBACKINFO_RUNNING_EVENTDISPATCHER=0,
    CALLBACKINFO_RUNNING_STATEESTIMATION=1,
    CALLBACKINFO_RUNNING_ALTITUDEHOLD=2,
    CALLBACKINFO_RUNNING_STABILIZATION0=3,
    CALLBACKINFO_RUNNING_STABILIZATION1=4,
    CALLBACKINFO_RUNNING_PATHFOLLOWER=5,
    CALLBACKINFO_RUNNING_PATHPLANNER0=6,
    CALLBACKINFO_RUNNING_PATHPLANNER1=7,
    CALLBACKINFO_RUNNING_MANUALCONTROL=8
} CallbackInfoRunningElem;

// Number of elements for field Running
#define CALLBACKINFO_RUNNING_NUMELEM 9



/* Set/Get functions */
extern void CallbackInfoRunningTimeSet(CallbackInfoRunningTimeData *NewRunningTime);
extern void CallbackInfoRunningTimeGet(CallbackInfoRunningTimeData *NewRunningTime);
extern void CallbackInfoRunningTimeArraySet(uint32_t *NewRunningTime);
extern void CallbackInfoRunningTimeArrayGet(uint32_t *NewRunningTime);
extern void CallbackInfoStackRemainingSet(CallbackInfoStackRemainingData *NewStackRemaining);
extern void CallbackInfoStackRemainingGet(CallbackInfoStackRemainingData *NewStackRemaining);
extern void CallbackInfoStackRemainingArraySet(int16_t *NewStackRemaining);
extern void CallbackInfoStackRemainingArrayGet(int16_t *NewStackRemaining);
extern void CallbackInfoRunningSet(CallbackInfoRunningData *NewRunning);
extern void CallbackInfoRunningGet(CallbackInfoRunningData *NewRunning);
extern void CallbackInfoRunningArraySet(uint8_t *NewRunning);
extern void CallbackInfoRunningArrayGet(uint8_t *NewRunning);


#endif // CALLBACKINFO_H

/**
 * @}
 * @}
 */
