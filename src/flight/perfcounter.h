/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup PerfCounter PerfCounter 
 * @brief A single performance counter, used to instrument flight code
 *
 * Autogenerated files and functions for PerfCounter Object
 *
 * @{ 
 *
 * @file       perfcounter.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the PerfCounter object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: perfcounter.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PERFCOUNTER_H
#define PERFCOUNTER_H

/* Object constants */
#define PERFCOUNTER_OBJID 0x692FBF7A
#define PERFCOUNTER_ISSINGLEINST 0
#define PERFCOUNTER_ISSETTINGS 0
#define PERFCOUNTER_ISPRIORITY 0
#define PERFCOUNTER_NUMBYTES sizeof(PerfCounterData)

/* Generic interface functions */
int32_t PerfCounterInitialize();
UAVObjHandle PerfCounterHandle();
void PerfCounterSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    int32_t Value;
    int32_t Min;
    int32_t Max;
}  PerfCounterCounterData ;
typedef struct __attribute__ ((__packed__)) {
    int32_t array[3];
}  PerfCounterCounterDataArray ;
#define PerfCounterCounterToArray( var ) UAVObjectFieldToArray( PerfCounterCounterData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t Id;
    PerfCounterCounterData Counter;
} __attribute__((packed)) PerfCounterDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef PerfCounterDataPacked __attribute__((aligned(4))) PerfCounterData;
    
/* Typesafe Object access functions */
static inline int32_t PerfCounterGet(PerfCounterData *dataOut) { return UAVObjGetData(PerfCounterHandle(), dataOut); }
static inline int32_t PerfCounterSet(const PerfCounterData *dataIn) { return UAVObjSetData(PerfCounterHandle(), dataIn); }
static inline int32_t PerfCounterInstGet(uint16_t instId, PerfCounterData *dataOut) { return UAVObjGetInstanceData(PerfCounterHandle(), instId, dataOut); }
static inline int32_t PerfCounterInstSet(uint16_t instId, const PerfCounterData *dataIn) { return UAVObjSetInstanceData(PerfCounterHandle(), instId, dataIn); }
static inline int32_t PerfCounterConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PerfCounterHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t PerfCounterConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PerfCounterHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t PerfCounterCreateInstance() { return UAVObjCreateInstance(PerfCounterHandle(), &PerfCounterSetDefaults); }
static inline void PerfCounterRequestUpdate() { UAVObjRequestUpdate(PerfCounterHandle()); }
static inline void PerfCounterRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PerfCounterHandle(), instId); }
static inline void PerfCounterUpdated() { UAVObjUpdated(PerfCounterHandle()); }
static inline void PerfCounterInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PerfCounterHandle(), instId); }
static inline void PerfCounterLogging() { UAVObjLogging(PerfCounterHandle()); }
static inline void PerfCounterInstLogging(uint16_t instId) { UAVObjInstanceLogging(PerfCounterHandle(), instId); }
static inline int32_t PerfCounterGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PerfCounterHandle(), dataOut); }
static inline int32_t PerfCounterSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PerfCounterHandle(), dataIn); }
static inline int8_t PerfCounterReadOnly() { return UAVObjReadOnly(PerfCounterHandle()); }

/* Field Id information */

/* Field Counter information */

// Array element names for field Counter
typedef enum {
    PERFCOUNTER_COUNTER_VALUE=0,
    PERFCOUNTER_COUNTER_MIN=1,
    PERFCOUNTER_COUNTER_MAX=2
} PerfCounterCounterElem;

// Number of elements for field Counter
#define PERFCOUNTER_COUNTER_NUMELEM 3



/* Set/Get functions */
extern void PerfCounterIdSet(uint32_t *NewId);
extern void PerfCounterIdGet(uint32_t *NewId);
extern void PerfCounterCounterSet(PerfCounterCounterData *NewCounter);
extern void PerfCounterCounterGet(PerfCounterCounterData *NewCounter);
extern void PerfCounterCounterArraySet(int32_t *NewCounter);
extern void PerfCounterCounterArrayGet(int32_t *NewCounter);


#endif // PERFCOUNTER_H

/**
 * @}
 * @}
 */
