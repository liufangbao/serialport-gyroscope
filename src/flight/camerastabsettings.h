/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup CameraStabSettings CameraStabSettings 
 * @brief Settings for the @ref CameraStab module
 *
 * Autogenerated files and functions for CameraStabSettings Object
 *
 * @{ 
 *
 * @file       camerastabsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the CameraStabSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: camerastabsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef CAMERASTABSETTINGS_H
#define CAMERASTABSETTINGS_H

/* Object constants */
#define CAMERASTABSETTINGS_OBJID 0xEA58E53A
#define CAMERASTABSETTINGS_ISSINGLEINST 1
#define CAMERASTABSETTINGS_ISSETTINGS 1
#define CAMERASTABSETTINGS_ISPRIORITY 0
#define CAMERASTABSETTINGS_NUMBYTES sizeof(CameraStabSettingsData)

/* Generic interface functions */
int32_t CameraStabSettingsInitialize();
UAVObjHandle CameraStabSettingsHandle();
void CameraStabSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsInputData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsInputDataArray ;
#define CameraStabSettingsInputToArray( var ) UAVObjectFieldToArray( CameraStabSettingsInputData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsInputRangeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsInputRangeDataArray ;
#define CameraStabSettingsInputRangeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsInputRangeData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsInputRateData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsInputRateDataArray ;
#define CameraStabSettingsInputRateToArray( var ) UAVObjectFieldToArray( CameraStabSettingsInputRateData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsStabilizationModeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsStabilizationModeDataArray ;
#define CameraStabSettingsStabilizationModeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsStabilizationModeData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsOutputRangeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsOutputRangeDataArray ;
#define CameraStabSettingsOutputRangeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsOutputRangeData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsResponseTimeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsResponseTimeDataArray ;
#define CameraStabSettingsResponseTimeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsResponseTimeData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsFeedForwardData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsFeedForwardDataArray ;
#define CameraStabSettingsFeedForwardToArray( var ) UAVObjectFieldToArray( CameraStabSettingsFeedForwardData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsAccelTimeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsAccelTimeDataArray ;
#define CameraStabSettingsAccelTimeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsAccelTimeData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  CameraStabSettingsDecelTimeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  CameraStabSettingsDecelTimeDataArray ;
#define CameraStabSettingsDecelTimeToArray( var ) UAVObjectFieldToArray( CameraStabSettingsDecelTimeData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float MaxAxisLockRate;
    uint16_t MaxAccel;
    CameraStabSettingsInputData Input;
    CameraStabSettingsInputRangeData InputRange;
    CameraStabSettingsInputRateData InputRate;
    CameraStabSettingsStabilizationModeData StabilizationMode;
    CameraStabSettingsOutputRangeData OutputRange;
    CameraStabSettingsResponseTimeData ResponseTime;
    uint8_t GimbalType;
    CameraStabSettingsFeedForwardData FeedForward;
    CameraStabSettingsAccelTimeData AccelTime;
    CameraStabSettingsDecelTimeData DecelTime;
    uint8_t Servo1PitchReverse;
    uint8_t Servo2PitchReverse;
} __attribute__((packed)) CameraStabSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef CameraStabSettingsDataPacked __attribute__((aligned(4))) CameraStabSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t CameraStabSettingsGet(CameraStabSettingsData *dataOut) { return UAVObjGetData(CameraStabSettingsHandle(), dataOut); }
static inline int32_t CameraStabSettingsSet(const CameraStabSettingsData *dataIn) { return UAVObjSetData(CameraStabSettingsHandle(), dataIn); }
static inline int32_t CameraStabSettingsInstGet(uint16_t instId, CameraStabSettingsData *dataOut) { return UAVObjGetInstanceData(CameraStabSettingsHandle(), instId, dataOut); }
static inline int32_t CameraStabSettingsInstSet(uint16_t instId, const CameraStabSettingsData *dataIn) { return UAVObjSetInstanceData(CameraStabSettingsHandle(), instId, dataIn); }
static inline int32_t CameraStabSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(CameraStabSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t CameraStabSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(CameraStabSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t CameraStabSettingsCreateInstance() { return UAVObjCreateInstance(CameraStabSettingsHandle(), &CameraStabSettingsSetDefaults); }
static inline void CameraStabSettingsRequestUpdate() { UAVObjRequestUpdate(CameraStabSettingsHandle()); }
static inline void CameraStabSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(CameraStabSettingsHandle(), instId); }
static inline void CameraStabSettingsUpdated() { UAVObjUpdated(CameraStabSettingsHandle()); }
static inline void CameraStabSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(CameraStabSettingsHandle(), instId); }
static inline void CameraStabSettingsLogging() { UAVObjLogging(CameraStabSettingsHandle()); }
static inline void CameraStabSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(CameraStabSettingsHandle(), instId); }
static inline int32_t CameraStabSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(CameraStabSettingsHandle(), dataOut); }
static inline int32_t CameraStabSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(CameraStabSettingsHandle(), dataIn); }
static inline int8_t CameraStabSettingsReadOnly() { return UAVObjReadOnly(CameraStabSettingsHandle()); }

/* Field MaxAxisLockRate information */

/* Field MaxAccel information */

/* Field Input information */

// Enumeration options for field Input
typedef enum {
    CAMERASTABSETTINGS_INPUT_ACCESSORY0=0,
    CAMERASTABSETTINGS_INPUT_ACCESSORY1=1,
    CAMERASTABSETTINGS_INPUT_ACCESSORY2=2,
    CAMERASTABSETTINGS_INPUT_ACCESSORY3=3,
    CAMERASTABSETTINGS_INPUT_ACCESSORY4=4,
    CAMERASTABSETTINGS_INPUT_ACCESSORY5=5,
    CAMERASTABSETTINGS_INPUT_NONE=6
} CameraStabSettingsInputOptions;

// Array element names for field Input
typedef enum {
    CAMERASTABSETTINGS_INPUT_ROLL=0,
    CAMERASTABSETTINGS_INPUT_PITCH=1,
    CAMERASTABSETTINGS_INPUT_YAW=2
} CameraStabSettingsInputElem;

// Number of elements for field Input
#define CAMERASTABSETTINGS_INPUT_NUMELEM 3

/* Field InputRange information */

// Array element names for field InputRange
typedef enum {
    CAMERASTABSETTINGS_INPUTRANGE_ROLL=0,
    CAMERASTABSETTINGS_INPUTRANGE_PITCH=1,
    CAMERASTABSETTINGS_INPUTRANGE_YAW=2
} CameraStabSettingsInputRangeElem;

// Number of elements for field InputRange
#define CAMERASTABSETTINGS_INPUTRANGE_NUMELEM 3

/* Field InputRate information */

// Array element names for field InputRate
typedef enum {
    CAMERASTABSETTINGS_INPUTRATE_ROLL=0,
    CAMERASTABSETTINGS_INPUTRATE_PITCH=1,
    CAMERASTABSETTINGS_INPUTRATE_YAW=2
} CameraStabSettingsInputRateElem;

// Number of elements for field InputRate
#define CAMERASTABSETTINGS_INPUTRATE_NUMELEM 3

/* Field StabilizationMode information */

// Enumeration options for field StabilizationMode
typedef enum {
    CAMERASTABSETTINGS_STABILIZATIONMODE_ATTITUDE=0,
    CAMERASTABSETTINGS_STABILIZATIONMODE_AXISLOCK=1
} CameraStabSettingsStabilizationModeOptions;

// Array element names for field StabilizationMode
typedef enum {
    CAMERASTABSETTINGS_STABILIZATIONMODE_ROLL=0,
    CAMERASTABSETTINGS_STABILIZATIONMODE_PITCH=1,
    CAMERASTABSETTINGS_STABILIZATIONMODE_YAW=2
} CameraStabSettingsStabilizationModeElem;

// Number of elements for field StabilizationMode
#define CAMERASTABSETTINGS_STABILIZATIONMODE_NUMELEM 3

/* Field OutputRange information */

// Array element names for field OutputRange
typedef enum {
    CAMERASTABSETTINGS_OUTPUTRANGE_ROLL=0,
    CAMERASTABSETTINGS_OUTPUTRANGE_PITCH=1,
    CAMERASTABSETTINGS_OUTPUTRANGE_YAW=2
} CameraStabSettingsOutputRangeElem;

// Number of elements for field OutputRange
#define CAMERASTABSETTINGS_OUTPUTRANGE_NUMELEM 3

/* Field ResponseTime information */

// Array element names for field ResponseTime
typedef enum {
    CAMERASTABSETTINGS_RESPONSETIME_ROLL=0,
    CAMERASTABSETTINGS_RESPONSETIME_PITCH=1,
    CAMERASTABSETTINGS_RESPONSETIME_YAW=2
} CameraStabSettingsResponseTimeElem;

// Number of elements for field ResponseTime
#define CAMERASTABSETTINGS_RESPONSETIME_NUMELEM 3

/* Field GimbalType information */

// Enumeration options for field GimbalType
typedef enum {
    CAMERASTABSETTINGS_GIMBALTYPE_GENERIC=0,
    CAMERASTABSETTINGS_GIMBALTYPE_YAWROLLPITCH=1,
    CAMERASTABSETTINGS_GIMBALTYPE_YAWPITCHROLL=2,
    CAMERASTABSETTINGS_GIMBALTYPE_ROLLPITCHMIXED=3
} CameraStabSettingsGimbalTypeOptions;

/* Field FeedForward information */

// Array element names for field FeedForward
typedef enum {
    CAMERASTABSETTINGS_FEEDFORWARD_ROLL=0,
    CAMERASTABSETTINGS_FEEDFORWARD_PITCH=1,
    CAMERASTABSETTINGS_FEEDFORWARD_YAW=2
} CameraStabSettingsFeedForwardElem;

// Number of elements for field FeedForward
#define CAMERASTABSETTINGS_FEEDFORWARD_NUMELEM 3

/* Field AccelTime information */

// Array element names for field AccelTime
typedef enum {
    CAMERASTABSETTINGS_ACCELTIME_ROLL=0,
    CAMERASTABSETTINGS_ACCELTIME_PITCH=1,
    CAMERASTABSETTINGS_ACCELTIME_YAW=2
} CameraStabSettingsAccelTimeElem;

// Number of elements for field AccelTime
#define CAMERASTABSETTINGS_ACCELTIME_NUMELEM 3

/* Field DecelTime information */

// Array element names for field DecelTime
typedef enum {
    CAMERASTABSETTINGS_DECELTIME_ROLL=0,
    CAMERASTABSETTINGS_DECELTIME_PITCH=1,
    CAMERASTABSETTINGS_DECELTIME_YAW=2
} CameraStabSettingsDecelTimeElem;

// Number of elements for field DecelTime
#define CAMERASTABSETTINGS_DECELTIME_NUMELEM 3

/* Field Servo1PitchReverse information */

// Enumeration options for field Servo1PitchReverse
typedef enum {
    CAMERASTABSETTINGS_SERVO1PITCHREVERSE_FALSE=0,
    CAMERASTABSETTINGS_SERVO1PITCHREVERSE_TRUE=1
} CameraStabSettingsServo1PitchReverseOptions;

/* Field Servo2PitchReverse information */

// Enumeration options for field Servo2PitchReverse
typedef enum {
    CAMERASTABSETTINGS_SERVO2PITCHREVERSE_FALSE=0,
    CAMERASTABSETTINGS_SERVO2PITCHREVERSE_TRUE=1
} CameraStabSettingsServo2PitchReverseOptions;



/* Set/Get functions */
extern void CameraStabSettingsMaxAxisLockRateSet(float *NewMaxAxisLockRate);
extern void CameraStabSettingsMaxAxisLockRateGet(float *NewMaxAxisLockRate);
extern void CameraStabSettingsMaxAccelSet(uint16_t *NewMaxAccel);
extern void CameraStabSettingsMaxAccelGet(uint16_t *NewMaxAccel);
extern void CameraStabSettingsInputSet(CameraStabSettingsInputData *NewInput);
extern void CameraStabSettingsInputGet(CameraStabSettingsInputData *NewInput);
extern void CameraStabSettingsInputArraySet(uint8_t *NewInput);
extern void CameraStabSettingsInputArrayGet(uint8_t *NewInput);
extern void CameraStabSettingsInputRangeSet(CameraStabSettingsInputRangeData *NewInputRange);
extern void CameraStabSettingsInputRangeGet(CameraStabSettingsInputRangeData *NewInputRange);
extern void CameraStabSettingsInputRangeArraySet(uint8_t *NewInputRange);
extern void CameraStabSettingsInputRangeArrayGet(uint8_t *NewInputRange);
extern void CameraStabSettingsInputRateSet(CameraStabSettingsInputRateData *NewInputRate);
extern void CameraStabSettingsInputRateGet(CameraStabSettingsInputRateData *NewInputRate);
extern void CameraStabSettingsInputRateArraySet(uint8_t *NewInputRate);
extern void CameraStabSettingsInputRateArrayGet(uint8_t *NewInputRate);
extern void CameraStabSettingsStabilizationModeSet(CameraStabSettingsStabilizationModeData *NewStabilizationMode);
extern void CameraStabSettingsStabilizationModeGet(CameraStabSettingsStabilizationModeData *NewStabilizationMode);
extern void CameraStabSettingsStabilizationModeArraySet(uint8_t *NewStabilizationMode);
extern void CameraStabSettingsStabilizationModeArrayGet(uint8_t *NewStabilizationMode);
extern void CameraStabSettingsOutputRangeSet(CameraStabSettingsOutputRangeData *NewOutputRange);
extern void CameraStabSettingsOutputRangeGet(CameraStabSettingsOutputRangeData *NewOutputRange);
extern void CameraStabSettingsOutputRangeArraySet(uint8_t *NewOutputRange);
extern void CameraStabSettingsOutputRangeArrayGet(uint8_t *NewOutputRange);
extern void CameraStabSettingsResponseTimeSet(CameraStabSettingsResponseTimeData *NewResponseTime);
extern void CameraStabSettingsResponseTimeGet(CameraStabSettingsResponseTimeData *NewResponseTime);
extern void CameraStabSettingsResponseTimeArraySet(uint8_t *NewResponseTime);
extern void CameraStabSettingsResponseTimeArrayGet(uint8_t *NewResponseTime);
extern void CameraStabSettingsGimbalTypeSet(uint8_t *NewGimbalType);
extern void CameraStabSettingsGimbalTypeGet(uint8_t *NewGimbalType);
extern void CameraStabSettingsFeedForwardSet(CameraStabSettingsFeedForwardData *NewFeedForward);
extern void CameraStabSettingsFeedForwardGet(CameraStabSettingsFeedForwardData *NewFeedForward);
extern void CameraStabSettingsFeedForwardArraySet(uint8_t *NewFeedForward);
extern void CameraStabSettingsFeedForwardArrayGet(uint8_t *NewFeedForward);
extern void CameraStabSettingsAccelTimeSet(CameraStabSettingsAccelTimeData *NewAccelTime);
extern void CameraStabSettingsAccelTimeGet(CameraStabSettingsAccelTimeData *NewAccelTime);
extern void CameraStabSettingsAccelTimeArraySet(uint8_t *NewAccelTime);
extern void CameraStabSettingsAccelTimeArrayGet(uint8_t *NewAccelTime);
extern void CameraStabSettingsDecelTimeSet(CameraStabSettingsDecelTimeData *NewDecelTime);
extern void CameraStabSettingsDecelTimeGet(CameraStabSettingsDecelTimeData *NewDecelTime);
extern void CameraStabSettingsDecelTimeArraySet(uint8_t *NewDecelTime);
extern void CameraStabSettingsDecelTimeArrayGet(uint8_t *NewDecelTime);
extern void CameraStabSettingsServo1PitchReverseSet(uint8_t *NewServo1PitchReverse);
extern void CameraStabSettingsServo1PitchReverseGet(uint8_t *NewServo1PitchReverse);
extern void CameraStabSettingsServo2PitchReverseSet(uint8_t *NewServo2PitchReverse);
extern void CameraStabSettingsServo2PitchReverseGet(uint8_t *NewServo2PitchReverse);


#endif // CAMERASTABSETTINGS_H

/**
 * @}
 * @}
 */
