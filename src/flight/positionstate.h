/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup PositionState PositionState 
 * @brief Contains the estimate of the current position relative to @ref HomeLocation, in NED coordinates
 *
 * Autogenerated files and functions for PositionState Object
 *
 * @{ 
 *
 * @file       positionstate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the PositionState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: positionstate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef POSITIONSTATE_H
#define POSITIONSTATE_H

/* Object constants */
#define POSITIONSTATE_OBJID 0x4AFDB658
#define POSITIONSTATE_ISSINGLEINST 1
#define POSITIONSTATE_ISSETTINGS 0
#define POSITIONSTATE_ISPRIORITY 0
#define POSITIONSTATE_NUMBYTES sizeof(PositionStateData)

/* Generic interface functions */
int32_t PositionStateInitialize();
UAVObjHandle PositionStateHandle();
void PositionStateSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float North;
    float East;
    float Down;
} __attribute__((packed)) PositionStateDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef PositionStateDataPacked __attribute__((aligned(4))) PositionStateData;
    
/* Typesafe Object access functions */
static inline int32_t PositionStateGet(PositionStateData *dataOut) { return UAVObjGetData(PositionStateHandle(), dataOut); }
static inline int32_t PositionStateSet(const PositionStateData *dataIn) { return UAVObjSetData(PositionStateHandle(), dataIn); }
static inline int32_t PositionStateInstGet(uint16_t instId, PositionStateData *dataOut) { return UAVObjGetInstanceData(PositionStateHandle(), instId, dataOut); }
static inline int32_t PositionStateInstSet(uint16_t instId, const PositionStateData *dataIn) { return UAVObjSetInstanceData(PositionStateHandle(), instId, dataIn); }
static inline int32_t PositionStateConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PositionStateHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t PositionStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PositionStateHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t PositionStateCreateInstance() { return UAVObjCreateInstance(PositionStateHandle(), &PositionStateSetDefaults); }
static inline void PositionStateRequestUpdate() { UAVObjRequestUpdate(PositionStateHandle()); }
static inline void PositionStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PositionStateHandle(), instId); }
static inline void PositionStateUpdated() { UAVObjUpdated(PositionStateHandle()); }
static inline void PositionStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PositionStateHandle(), instId); }
static inline void PositionStateLogging() { UAVObjLogging(PositionStateHandle()); }
static inline void PositionStateInstLogging(uint16_t instId) { UAVObjInstanceLogging(PositionStateHandle(), instId); }
static inline int32_t PositionStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PositionStateHandle(), dataOut); }
static inline int32_t PositionStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PositionStateHandle(), dataIn); }
static inline int8_t PositionStateReadOnly() { return UAVObjReadOnly(PositionStateHandle()); }

/* Field North information */

/* Field East information */

/* Field Down information */



/* Set/Get functions */
extern void PositionStateNorthSet(float *NewNorth);
extern void PositionStateNorthGet(float *NewNorth);
extern void PositionStateEastSet(float *NewEast);
extern void PositionStateEastGet(float *NewEast);
extern void PositionStateDownSet(float *NewDown);
extern void PositionStateDownGet(float *NewDown);


#endif // POSITIONSTATE_H

/**
 * @}
 * @}
 */
