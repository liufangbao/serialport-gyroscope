/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AuxMagSettings AuxMagSettings 
 * @brief Settings for auxiliary magnetometer calibration
 *
 * Autogenerated files and functions for AuxMagSettings Object
 *
 * @{ 
 *
 * @file       auxmagsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AuxMagSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: auxmagsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AUXMAGSETTINGS_H
#define AUXMAGSETTINGS_H

/* Object constants */
#define AUXMAGSETTINGS_OBJID 0x42F462A
#define AUXMAGSETTINGS_ISSINGLEINST 1
#define AUXMAGSETTINGS_ISSETTINGS 1
#define AUXMAGSETTINGS_ISPRIORITY 0
#define AUXMAGSETTINGS_NUMBYTES sizeof(AuxMagSettingsData)

/* Generic interface functions */
int32_t AuxMagSettingsInitialize();
UAVObjHandle AuxMagSettingsHandle();
void AuxMagSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    float X;
    float Y;
    float Z;
}  AuxMagSettingsmag_biasData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  AuxMagSettingsmag_biasDataArray ;
#define AuxMagSettingsmag_biasToArray( var ) UAVObjectFieldToArray( AuxMagSettingsmag_biasData, var )

typedef struct __attribute__ ((__packed__)) {
    float r0c0;
    float r0c1;
    float r0c2;
    float r1c0;
    float r1c1;
    float r1c2;
    float r2c0;
    float r2c1;
    float r2c2;
}  AuxMagSettingsmag_transformData ;
typedef struct __attribute__ ((__packed__)) {
    float array[9];
}  AuxMagSettingsmag_transformDataArray ;
#define AuxMagSettingsmag_transformToArray( var ) UAVObjectFieldToArray( AuxMagSettingsmag_transformData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    AuxMagSettingsmag_biasData mag_bias;
    AuxMagSettingsmag_transformData mag_transform;
    float MagBiasNullingRate;
    float Orientation;
    uint8_t Type;
    uint8_t Usage;
} __attribute__((packed)) AuxMagSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AuxMagSettingsDataPacked __attribute__((aligned(4))) AuxMagSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t AuxMagSettingsGet(AuxMagSettingsData *dataOut) { return UAVObjGetData(AuxMagSettingsHandle(), dataOut); }
static inline int32_t AuxMagSettingsSet(const AuxMagSettingsData *dataIn) { return UAVObjSetData(AuxMagSettingsHandle(), dataIn); }
static inline int32_t AuxMagSettingsInstGet(uint16_t instId, AuxMagSettingsData *dataOut) { return UAVObjGetInstanceData(AuxMagSettingsHandle(), instId, dataOut); }
static inline int32_t AuxMagSettingsInstSet(uint16_t instId, const AuxMagSettingsData *dataIn) { return UAVObjSetInstanceData(AuxMagSettingsHandle(), instId, dataIn); }
static inline int32_t AuxMagSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AuxMagSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AuxMagSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AuxMagSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AuxMagSettingsCreateInstance() { return UAVObjCreateInstance(AuxMagSettingsHandle(), &AuxMagSettingsSetDefaults); }
static inline void AuxMagSettingsRequestUpdate() { UAVObjRequestUpdate(AuxMagSettingsHandle()); }
static inline void AuxMagSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AuxMagSettingsHandle(), instId); }
static inline void AuxMagSettingsUpdated() { UAVObjUpdated(AuxMagSettingsHandle()); }
static inline void AuxMagSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AuxMagSettingsHandle(), instId); }
static inline void AuxMagSettingsLogging() { UAVObjLogging(AuxMagSettingsHandle()); }
static inline void AuxMagSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(AuxMagSettingsHandle(), instId); }
static inline int32_t AuxMagSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AuxMagSettingsHandle(), dataOut); }
static inline int32_t AuxMagSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AuxMagSettingsHandle(), dataIn); }
static inline int8_t AuxMagSettingsReadOnly() { return UAVObjReadOnly(AuxMagSettingsHandle()); }

/* Field mag_bias information */

// Array element names for field mag_bias
typedef enum {
    AUXMAGSETTINGS_MAG_BIAS_X=0,
    AUXMAGSETTINGS_MAG_BIAS_Y=1,
    AUXMAGSETTINGS_MAG_BIAS_Z=2
} AuxMagSettingsmag_biasElem;

// Number of elements for field mag_bias
#define AUXMAGSETTINGS_MAG_BIAS_NUMELEM 3

/* Field mag_transform information */

// Array element names for field mag_transform
typedef enum {
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C0=0,
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C1=1,
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C2=2,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C0=3,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C1=4,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C2=5,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C0=6,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C1=7,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C2=8
} AuxMagSettingsmag_transformElem;

// Number of elements for field mag_transform
#define AUXMAGSETTINGS_MAG_TRANSFORM_NUMELEM 9

/* Field MagBiasNullingRate information */

/* Field Orientation information */

/* Field Type information */

// Enumeration options for field Type
typedef enum {
    AUXMAGSETTINGS_TYPE_GPSV9=0,
    AUXMAGSETTINGS_TYPE_EXT=1
} AuxMagSettingsTypeOptions;

/* Field Usage information */

// Enumeration options for field Usage
typedef enum {
    AUXMAGSETTINGS_USAGE_BOTH=0,
    AUXMAGSETTINGS_USAGE_ONBOARDONLY=1,
    AUXMAGSETTINGS_USAGE_AUXONLY=2
} AuxMagSettingsUsageOptions;



/* Set/Get functions */
extern void AuxMagSettingsmag_biasSet(AuxMagSettingsmag_biasData *Newmag_bias);
extern void AuxMagSettingsmag_biasGet(AuxMagSettingsmag_biasData *Newmag_bias);
extern void AuxMagSettingsmag_biasArraySet(float *Newmag_bias);
extern void AuxMagSettingsmag_biasArrayGet(float *Newmag_bias);
extern void AuxMagSettingsmag_transformSet(AuxMagSettingsmag_transformData *Newmag_transform);
extern void AuxMagSettingsmag_transformGet(AuxMagSettingsmag_transformData *Newmag_transform);
extern void AuxMagSettingsmag_transformArraySet(float *Newmag_transform);
extern void AuxMagSettingsmag_transformArrayGet(float *Newmag_transform);
extern void AuxMagSettingsMagBiasNullingRateSet(float *NewMagBiasNullingRate);
extern void AuxMagSettingsMagBiasNullingRateGet(float *NewMagBiasNullingRate);
extern void AuxMagSettingsOrientationSet(float *NewOrientation);
extern void AuxMagSettingsOrientationGet(float *NewOrientation);
extern void AuxMagSettingsTypeSet(uint8_t *NewType);
extern void AuxMagSettingsTypeGet(uint8_t *NewType);
extern void AuxMagSettingsUsageSet(uint8_t *NewUsage);
extern void AuxMagSettingsUsageGet(uint8_t *NewUsage);


#endif // AUXMAGSETTINGS_H

/**
 * @}
 * @}
 */
