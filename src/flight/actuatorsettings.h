/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup ActuatorSettings ActuatorSettings 
 * @brief Settings for the @ref ActuatorModule that controls the channel assignments for the mixer based on AircraftType
 *
 * Autogenerated files and functions for ActuatorSettings Object
 *
 * @{ 
 *
 * @file       actuatorsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the ActuatorSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: actuatorsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACTUATORSETTINGS_H
#define ACTUATORSETTINGS_H

/* Object constants */
#define ACTUATORSETTINGS_OBJID 0xD2AD60A2
#define ACTUATORSETTINGS_ISSINGLEINST 1
#define ACTUATORSETTINGS_ISSETTINGS 1
#define ACTUATORSETTINGS_ISPRIORITY 0
#define ACTUATORSETTINGS_NUMBYTES sizeof(ActuatorSettingsData)

/* Generic interface functions */
int32_t ActuatorSettingsInitialize();
UAVObjHandle ActuatorSettingsHandle();
void ActuatorSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint8_t Roll;
    uint8_t Pitch;
    uint8_t Yaw;
}  ActuatorSettingsLowThrottleZeroAxisData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[3];
}  ActuatorSettingsLowThrottleZeroAxisDataArray ;
#define ActuatorSettingsLowThrottleZeroAxisToArray( var ) UAVObjectFieldToArray( ActuatorSettingsLowThrottleZeroAxisData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint16_t BankUpdateFreq[6];
    int16_t ChannelMax[12];
    int16_t ChannelNeutral[12];
    int16_t ChannelMin[12];
    uint8_t BankMode[6];
    uint8_t ChannelType[12];
    uint8_t ChannelAddr[12];
    uint8_t MotorsSpinWhileArmed;
    ActuatorSettingsLowThrottleZeroAxisData LowThrottleZeroAxis;
} __attribute__((packed)) ActuatorSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef ActuatorSettingsDataPacked __attribute__((aligned(4))) ActuatorSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t ActuatorSettingsGet(ActuatorSettingsData *dataOut) { return UAVObjGetData(ActuatorSettingsHandle(), dataOut); }
static inline int32_t ActuatorSettingsSet(const ActuatorSettingsData *dataIn) { return UAVObjSetData(ActuatorSettingsHandle(), dataIn); }
static inline int32_t ActuatorSettingsInstGet(uint16_t instId, ActuatorSettingsData *dataOut) { return UAVObjGetInstanceData(ActuatorSettingsHandle(), instId, dataOut); }
static inline int32_t ActuatorSettingsInstSet(uint16_t instId, const ActuatorSettingsData *dataIn) { return UAVObjSetInstanceData(ActuatorSettingsHandle(), instId, dataIn); }
static inline int32_t ActuatorSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(ActuatorSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t ActuatorSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ActuatorSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t ActuatorSettingsCreateInstance() { return UAVObjCreateInstance(ActuatorSettingsHandle(), &ActuatorSettingsSetDefaults); }
static inline void ActuatorSettingsRequestUpdate() { UAVObjRequestUpdate(ActuatorSettingsHandle()); }
static inline void ActuatorSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ActuatorSettingsHandle(), instId); }
static inline void ActuatorSettingsUpdated() { UAVObjUpdated(ActuatorSettingsHandle()); }
static inline void ActuatorSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ActuatorSettingsHandle(), instId); }
static inline void ActuatorSettingsLogging() { UAVObjLogging(ActuatorSettingsHandle()); }
static inline void ActuatorSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(ActuatorSettingsHandle(), instId); }
static inline int32_t ActuatorSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ActuatorSettingsHandle(), dataOut); }
static inline int32_t ActuatorSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ActuatorSettingsHandle(), dataIn); }
static inline int8_t ActuatorSettingsReadOnly() { return UAVObjReadOnly(ActuatorSettingsHandle()); }

/* Field BankUpdateFreq information */

// Number of elements for field BankUpdateFreq
#define ACTUATORSETTINGS_BANKUPDATEFREQ_NUMELEM 6

/* Field ChannelMax information */

// Number of elements for field ChannelMax
#define ACTUATORSETTINGS_CHANNELMAX_NUMELEM 12

/* Field ChannelNeutral information */

// Number of elements for field ChannelNeutral
#define ACTUATORSETTINGS_CHANNELNEUTRAL_NUMELEM 12

/* Field ChannelMin information */

// Number of elements for field ChannelMin
#define ACTUATORSETTINGS_CHANNELMIN_NUMELEM 12

/* Field BankMode information */

// Enumeration options for field BankMode
typedef enum {
    ACTUATORSETTINGS_BANKMODE_PWM=0,
    ACTUATORSETTINGS_BANKMODE_PWMSYNC=1,
    ACTUATORSETTINGS_BANKMODE_ONESHOT125=2
} ActuatorSettingsBankModeOptions;

// Number of elements for field BankMode
#define ACTUATORSETTINGS_BANKMODE_NUMELEM 6

/* Field ChannelType information */

// Enumeration options for field ChannelType
typedef enum {
    ACTUATORSETTINGS_CHANNELTYPE_PWM=0,
    ACTUATORSETTINGS_CHANNELTYPE_MK=1,
    ACTUATORSETTINGS_CHANNELTYPE_ASTEC4=2,
    ACTUATORSETTINGS_CHANNELTYPE_PWMALARMBUZZER=3,
    ACTUATORSETTINGS_CHANNELTYPE_ARMINGLED=4,
    ACTUATORSETTINGS_CHANNELTYPE_INFOLED=5
} ActuatorSettingsChannelTypeOptions;

// Number of elements for field ChannelType
#define ACTUATORSETTINGS_CHANNELTYPE_NUMELEM 12

/* Field ChannelAddr information */

// Number of elements for field ChannelAddr
#define ACTUATORSETTINGS_CHANNELADDR_NUMELEM 12

/* Field MotorsSpinWhileArmed information */

// Enumeration options for field MotorsSpinWhileArmed
typedef enum {
    ACTUATORSETTINGS_MOTORSSPINWHILEARMED_FALSE=0,
    ACTUATORSETTINGS_MOTORSSPINWHILEARMED_TRUE=1
} ActuatorSettingsMotorsSpinWhileArmedOptions;

/* Field LowThrottleZeroAxis information */

// Enumeration options for field LowThrottleZeroAxis
typedef enum {
    ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_FALSE=0,
    ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_TRUE=1
} ActuatorSettingsLowThrottleZeroAxisOptions;

// Array element names for field LowThrottleZeroAxis
typedef enum {
    ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_ROLL=0,
    ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_PITCH=1,
    ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_YAW=2
} ActuatorSettingsLowThrottleZeroAxisElem;

// Number of elements for field LowThrottleZeroAxis
#define ACTUATORSETTINGS_LOWTHROTTLEZEROAXIS_NUMELEM 3



/* Set/Get functions */
extern void ActuatorSettingsBankUpdateFreqSet(uint16_t *NewBankUpdateFreq);
extern void ActuatorSettingsBankUpdateFreqGet(uint16_t *NewBankUpdateFreq);
extern void ActuatorSettingsChannelMaxSet(int16_t *NewChannelMax);
extern void ActuatorSettingsChannelMaxGet(int16_t *NewChannelMax);
extern void ActuatorSettingsChannelNeutralSet(int16_t *NewChannelNeutral);
extern void ActuatorSettingsChannelNeutralGet(int16_t *NewChannelNeutral);
extern void ActuatorSettingsChannelMinSet(int16_t *NewChannelMin);
extern void ActuatorSettingsChannelMinGet(int16_t *NewChannelMin);
extern void ActuatorSettingsBankModeSet(uint8_t *NewBankMode);
extern void ActuatorSettingsBankModeGet(uint8_t *NewBankMode);
extern void ActuatorSettingsChannelTypeSet(uint8_t *NewChannelType);
extern void ActuatorSettingsChannelTypeGet(uint8_t *NewChannelType);
extern void ActuatorSettingsChannelAddrSet(uint8_t *NewChannelAddr);
extern void ActuatorSettingsChannelAddrGet(uint8_t *NewChannelAddr);
extern void ActuatorSettingsMotorsSpinWhileArmedSet(uint8_t *NewMotorsSpinWhileArmed);
extern void ActuatorSettingsMotorsSpinWhileArmedGet(uint8_t *NewMotorsSpinWhileArmed);
extern void ActuatorSettingsLowThrottleZeroAxisSet(ActuatorSettingsLowThrottleZeroAxisData *NewLowThrottleZeroAxis);
extern void ActuatorSettingsLowThrottleZeroAxisGet(ActuatorSettingsLowThrottleZeroAxisData *NewLowThrottleZeroAxis);
extern void ActuatorSettingsLowThrottleZeroAxisArraySet(uint8_t *NewLowThrottleZeroAxis);
extern void ActuatorSettingsLowThrottleZeroAxisArrayGet(uint8_t *NewLowThrottleZeroAxis);


#endif // ACTUATORSETTINGS_H

/**
 * @}
 * @}
 */
