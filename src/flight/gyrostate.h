/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GyroState GyroState 
 * @brief The filtered rotation sensor data.
 *
 * Autogenerated files and functions for GyroState Object
 *
 * @{ 
 *
 * @file       gyrostate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GyroState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gyrostate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GYROSTATE_H
#define GYROSTATE_H

/* Object constants */
#define GYROSTATE_OBJID 0x8C2D810A
#define GYROSTATE_ISSINGLEINST 1
#define GYROSTATE_ISSETTINGS 0
#define GYROSTATE_ISPRIORITY 0
#define GYROSTATE_NUMBYTES sizeof(GyroStateData)

/* Generic interface functions */
int32_t GyroStateInitialize();
UAVObjHandle GyroStateHandle();
void GyroStateSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
} __attribute__((packed)) GyroStateDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GyroStateDataPacked __attribute__((aligned(4))) GyroStateData;
    
/* Typesafe Object access functions */
static inline int32_t GyroStateGet(GyroStateData *dataOut) { return UAVObjGetData(GyroStateHandle(), dataOut); }
static inline int32_t GyroStateSet(const GyroStateData *dataIn) { return UAVObjSetData(GyroStateHandle(), dataIn); }
static inline int32_t GyroStateInstGet(uint16_t instId, GyroStateData *dataOut) { return UAVObjGetInstanceData(GyroStateHandle(), instId, dataOut); }
static inline int32_t GyroStateInstSet(uint16_t instId, const GyroStateData *dataIn) { return UAVObjSetInstanceData(GyroStateHandle(), instId, dataIn); }
static inline int32_t GyroStateConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GyroStateHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GyroStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GyroStateHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GyroStateCreateInstance() { return UAVObjCreateInstance(GyroStateHandle(), &GyroStateSetDefaults); }
static inline void GyroStateRequestUpdate() { UAVObjRequestUpdate(GyroStateHandle()); }
static inline void GyroStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GyroStateHandle(), instId); }
static inline void GyroStateUpdated() { UAVObjUpdated(GyroStateHandle()); }
static inline void GyroStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GyroStateHandle(), instId); }
static inline void GyroStateLogging() { UAVObjLogging(GyroStateHandle()); }
static inline void GyroStateInstLogging(uint16_t instId) { UAVObjInstanceLogging(GyroStateHandle(), instId); }
static inline int32_t GyroStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GyroStateHandle(), dataOut); }
static inline int32_t GyroStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GyroStateHandle(), dataIn); }
static inline int8_t GyroStateReadOnly() { return UAVObjReadOnly(GyroStateHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */



/* Set/Get functions */
extern void GyroStatexSet(float *Newx);
extern void GyroStatexGet(float *Newx);
extern void GyroStateySet(float *Newy);
extern void GyroStateyGet(float *Newy);
extern void GyroStatezSet(float *Newz);
extern void GyroStatezGet(float *Newz);


#endif // GYROSTATE_H

/**
 * @}
 * @}
 */
