/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GyroSensor GyroSensor 
 * @brief Calibrated sensor data from 3 axis gyroscope in deg/s.
 *
 * Autogenerated files and functions for GyroSensor Object
 *
 * @{ 
 *
 * @file       gyrosensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GyroSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gyrosensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GYROSENSOR_H
#define GYROSENSOR_H

/* Object constants */
#define GYROSENSOR_OBJID 0xA63680C6
#define GYROSENSOR_ISSINGLEINST 1
#define GYROSENSOR_ISSETTINGS 0
#define GYROSENSOR_ISPRIORITY 0
#define GYROSENSOR_NUMBYTES sizeof(GyroSensorData)

/* Generic interface functions */
int32_t GyroSensorInitialize();
UAVObjHandle GyroSensorHandle();
void GyroSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
    float temperature;
} __attribute__((packed)) GyroSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GyroSensorDataPacked __attribute__((aligned(4))) GyroSensorData;
    
/* Typesafe Object access functions */
static inline int32_t GyroSensorGet(GyroSensorData *dataOut) { return UAVObjGetData(GyroSensorHandle(), dataOut); }
static inline int32_t GyroSensorSet(const GyroSensorData *dataIn) { return UAVObjSetData(GyroSensorHandle(), dataIn); }
static inline int32_t GyroSensorInstGet(uint16_t instId, GyroSensorData *dataOut) { return UAVObjGetInstanceData(GyroSensorHandle(), instId, dataOut); }
static inline int32_t GyroSensorInstSet(uint16_t instId, const GyroSensorData *dataIn) { return UAVObjSetInstanceData(GyroSensorHandle(), instId, dataIn); }
static inline int32_t GyroSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GyroSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GyroSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GyroSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GyroSensorCreateInstance() { return UAVObjCreateInstance(GyroSensorHandle(), &GyroSensorSetDefaults); }
static inline void GyroSensorRequestUpdate() { UAVObjRequestUpdate(GyroSensorHandle()); }
static inline void GyroSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GyroSensorHandle(), instId); }
static inline void GyroSensorUpdated() { UAVObjUpdated(GyroSensorHandle()); }
static inline void GyroSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GyroSensorHandle(), instId); }
static inline void GyroSensorLogging() { UAVObjLogging(GyroSensorHandle()); }
static inline void GyroSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(GyroSensorHandle(), instId); }
static inline int32_t GyroSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GyroSensorHandle(), dataOut); }
static inline int32_t GyroSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GyroSensorHandle(), dataIn); }
static inline int8_t GyroSensorReadOnly() { return UAVObjReadOnly(GyroSensorHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */

/* Field temperature information */



/* Set/Get functions */
extern void GyroSensorxSet(float *Newx);
extern void GyroSensorxGet(float *Newx);
extern void GyroSensorySet(float *Newy);
extern void GyroSensoryGet(float *Newy);
extern void GyroSensorzSet(float *Newz);
extern void GyroSensorzGet(float *Newz);
extern void GyroSensortemperatureSet(float *Newtemperature);
extern void GyroSensortemperatureGet(float *Newtemperature);


#endif // GYROSENSOR_H

/**
 * @}
 * @}
 */
