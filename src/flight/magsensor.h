/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup MagSensor MagSensor 
 * @brief Calibrated sensor data from 3 axis magnetometer in MilliGauss.
 *
 * Autogenerated files and functions for MagSensor Object
 *
 * @{ 
 *
 * @file       magsensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the MagSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: magsensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef MAGSENSOR_H
#define MAGSENSOR_H

/* Object constants */
#define MAGSENSOR_OBJID 0x70DAD456
#define MAGSENSOR_ISSINGLEINST 1
#define MAGSENSOR_ISSETTINGS 0
#define MAGSENSOR_ISPRIORITY 0
#define MAGSENSOR_NUMBYTES sizeof(MagSensorData)

/* Generic interface functions */
int32_t MagSensorInitialize();
UAVObjHandle MagSensorHandle();
void MagSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float x;
    float y;
    float z;
    float temperature;
} __attribute__((packed)) MagSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef MagSensorDataPacked __attribute__((aligned(4))) MagSensorData;
    
/* Typesafe Object access functions */
static inline int32_t MagSensorGet(MagSensorData *dataOut) { return UAVObjGetData(MagSensorHandle(), dataOut); }
static inline int32_t MagSensorSet(const MagSensorData *dataIn) { return UAVObjSetData(MagSensorHandle(), dataIn); }
static inline int32_t MagSensorInstGet(uint16_t instId, MagSensorData *dataOut) { return UAVObjGetInstanceData(MagSensorHandle(), instId, dataOut); }
static inline int32_t MagSensorInstSet(uint16_t instId, const MagSensorData *dataIn) { return UAVObjSetInstanceData(MagSensorHandle(), instId, dataIn); }
static inline int32_t MagSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(MagSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t MagSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(MagSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t MagSensorCreateInstance() { return UAVObjCreateInstance(MagSensorHandle(), &MagSensorSetDefaults); }
static inline void MagSensorRequestUpdate() { UAVObjRequestUpdate(MagSensorHandle()); }
static inline void MagSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(MagSensorHandle(), instId); }
static inline void MagSensorUpdated() { UAVObjUpdated(MagSensorHandle()); }
static inline void MagSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(MagSensorHandle(), instId); }
static inline void MagSensorLogging() { UAVObjLogging(MagSensorHandle()); }
static inline void MagSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(MagSensorHandle(), instId); }
static inline int32_t MagSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(MagSensorHandle(), dataOut); }
static inline int32_t MagSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(MagSensorHandle(), dataIn); }
static inline int8_t MagSensorReadOnly() { return UAVObjReadOnly(MagSensorHandle()); }

/* Field x information */

/* Field y information */

/* Field z information */

/* Field temperature information */



/* Set/Get functions */
extern void MagSensorxSet(float *Newx);
extern void MagSensorxGet(float *Newx);
extern void MagSensorySet(float *Newy);
extern void MagSensoryGet(float *Newy);
extern void MagSensorzSet(float *Newz);
extern void MagSensorzGet(float *Newz);
extern void MagSensortemperatureSet(float *Newtemperature);
extern void MagSensortemperatureGet(float *Newtemperature);


#endif // MAGSENSOR_H

/**
 * @}
 * @}
 */
