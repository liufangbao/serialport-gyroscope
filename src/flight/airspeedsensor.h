/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AirspeedSensor AirspeedSensor 
 * @brief The raw data from the dynamic pressure sensor with pressure, temperature and airspeed.
 *
 * Autogenerated files and functions for AirspeedSensor Object
 *
 * @{ 
 *
 * @file       airspeedsensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AirspeedSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: airspeedsensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AIRSPEEDSENSOR_H
#define AIRSPEEDSENSOR_H

/* Object constants */
#define AIRSPEEDSENSOR_OBJID 0x438D5F9A
#define AIRSPEEDSENSOR_ISSINGLEINST 1
#define AIRSPEEDSENSOR_ISSETTINGS 0
#define AIRSPEEDSENSOR_ISPRIORITY 0
#define AIRSPEEDSENSOR_NUMBYTES sizeof(AirspeedSensorData)

/* Generic interface functions */
int32_t AirspeedSensorInitialize();
UAVObjHandle AirspeedSensorHandle();
void AirspeedSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float DifferentialPressure;
    float Temperature;
    float CalibratedAirspeed;
    float TrueAirspeed;
    uint16_t SensorValue;
    uint16_t SensorValueTemperature;
    uint8_t SensorConnected;
} __attribute__((packed)) AirspeedSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AirspeedSensorDataPacked __attribute__((aligned(4))) AirspeedSensorData;
    
/* Typesafe Object access functions */
static inline int32_t AirspeedSensorGet(AirspeedSensorData *dataOut) { return UAVObjGetData(AirspeedSensorHandle(), dataOut); }
static inline int32_t AirspeedSensorSet(const AirspeedSensorData *dataIn) { return UAVObjSetData(AirspeedSensorHandle(), dataIn); }
static inline int32_t AirspeedSensorInstGet(uint16_t instId, AirspeedSensorData *dataOut) { return UAVObjGetInstanceData(AirspeedSensorHandle(), instId, dataOut); }
static inline int32_t AirspeedSensorInstSet(uint16_t instId, const AirspeedSensorData *dataIn) { return UAVObjSetInstanceData(AirspeedSensorHandle(), instId, dataIn); }
static inline int32_t AirspeedSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AirspeedSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AirspeedSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AirspeedSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AirspeedSensorCreateInstance() { return UAVObjCreateInstance(AirspeedSensorHandle(), &AirspeedSensorSetDefaults); }
static inline void AirspeedSensorRequestUpdate() { UAVObjRequestUpdate(AirspeedSensorHandle()); }
static inline void AirspeedSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AirspeedSensorHandle(), instId); }
static inline void AirspeedSensorUpdated() { UAVObjUpdated(AirspeedSensorHandle()); }
static inline void AirspeedSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AirspeedSensorHandle(), instId); }
static inline void AirspeedSensorLogging() { UAVObjLogging(AirspeedSensorHandle()); }
static inline void AirspeedSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(AirspeedSensorHandle(), instId); }
static inline int32_t AirspeedSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AirspeedSensorHandle(), dataOut); }
static inline int32_t AirspeedSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AirspeedSensorHandle(), dataIn); }
static inline int8_t AirspeedSensorReadOnly() { return UAVObjReadOnly(AirspeedSensorHandle()); }

/* Field DifferentialPressure information */

/* Field Temperature information */

/* Field CalibratedAirspeed information */

/* Field TrueAirspeed information */

/* Field SensorValue information */

/* Field SensorValueTemperature information */

/* Field SensorConnected information */

// Enumeration options for field SensorConnected
typedef enum {
    AIRSPEEDSENSOR_SENSORCONNECTED_FALSE=0,
    AIRSPEEDSENSOR_SENSORCONNECTED_TRUE=1
} AirspeedSensorSensorConnectedOptions;



/* Set/Get functions */
extern void AirspeedSensorDifferentialPressureSet(float *NewDifferentialPressure);
extern void AirspeedSensorDifferentialPressureGet(float *NewDifferentialPressure);
extern void AirspeedSensorTemperatureSet(float *NewTemperature);
extern void AirspeedSensorTemperatureGet(float *NewTemperature);
extern void AirspeedSensorCalibratedAirspeedSet(float *NewCalibratedAirspeed);
extern void AirspeedSensorCalibratedAirspeedGet(float *NewCalibratedAirspeed);
extern void AirspeedSensorTrueAirspeedSet(float *NewTrueAirspeed);
extern void AirspeedSensorTrueAirspeedGet(float *NewTrueAirspeed);
extern void AirspeedSensorSensorValueSet(uint16_t *NewSensorValue);
extern void AirspeedSensorSensorValueGet(uint16_t *NewSensorValue);
extern void AirspeedSensorSensorValueTemperatureSet(uint16_t *NewSensorValueTemperature);
extern void AirspeedSensorSensorValueTemperatureGet(uint16_t *NewSensorValueTemperature);
extern void AirspeedSensorSensorConnectedSet(uint8_t *NewSensorConnected);
extern void AirspeedSensorSensorConnectedGet(uint8_t *NewSensorConnected);


#endif // AIRSPEEDSENSOR_H

/**
 * @}
 * @}
 */
