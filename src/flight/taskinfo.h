/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup TaskInfo TaskInfo 
 * @brief Task information
 *
 * Autogenerated files and functions for TaskInfo Object
 *
 * @{ 
 *
 * @file       taskinfo.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the TaskInfo object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: taskinfo.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TASKINFO_H
#define TASKINFO_H

/* Object constants */
#define TASKINFO_OBJID 0x7A28AFE8
#define TASKINFO_ISSINGLEINST 1
#define TASKINFO_ISSETTINGS 0
#define TASKINFO_ISPRIORITY 0
#define TASKINFO_NUMBYTES sizeof(TaskInfoData)

/* Generic interface functions */
int32_t TaskInfoInitialize();
UAVObjHandle TaskInfoHandle();
void TaskInfoSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint16_t System;
    uint16_t CallbackScheduler0;
    uint16_t CallbackScheduler1;
    uint16_t CallbackScheduler2;
    uint16_t CallbackScheduler3;
    uint16_t Receiver;
    uint16_t Stabilization;
    uint16_t Actuator;
    uint16_t Sensors;
    uint16_t Attitude;
    uint16_t Altitude;
    uint16_t Airspeed;
    uint16_t MagBaro;
    uint16_t FlightPlan;
    uint16_t TelemetryTx;
    uint16_t TelemetryRx;
    uint16_t RadioRx;
    uint16_t Com2UsbBridge;
    uint16_t Usb2ComBridge;
    uint16_t GPS;
    uint16_t OSDGen;
}  TaskInfoStackRemainingData ;
typedef struct __attribute__ ((__packed__)) {
    uint16_t array[21];
}  TaskInfoStackRemainingDataArray ;
#define TaskInfoStackRemainingToArray( var ) UAVObjectFieldToArray( TaskInfoStackRemainingData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t System;
    uint8_t CallbackScheduler0;
    uint8_t CallbackScheduler1;
    uint8_t CallbackScheduler2;
    uint8_t CallbackScheduler3;
    uint8_t Receiver;
    uint8_t Stabilization;
    uint8_t Actuator;
    uint8_t Sensors;
    uint8_t Attitude;
    uint8_t Altitude;
    uint8_t Airspeed;
    uint8_t MagBaro;
    uint8_t FlightPlan;
    uint8_t TelemetryTx;
    uint8_t TelemetryRx;
    uint8_t RadioRx;
    uint8_t Com2UsbBridge;
    uint8_t Usb2ComBridge;
    uint8_t GPS;
    uint8_t OSDGen;
}  TaskInfoRunningData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[21];
}  TaskInfoRunningDataArray ;
#define TaskInfoRunningToArray( var ) UAVObjectFieldToArray( TaskInfoRunningData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t System;
    uint8_t CallbackScheduler0;
    uint8_t CallbackScheduler1;
    uint8_t CallbackScheduler2;
    uint8_t CallbackScheduler3;
    uint8_t Receiver;
    uint8_t Stabilization;
    uint8_t Actuator;
    uint8_t Sensors;
    uint8_t Attitude;
    uint8_t Altitude;
    uint8_t Airspeed;
    uint8_t MagBaro;
    uint8_t FlightPlan;
    uint8_t TelemetryTx;
    uint8_t TelemetryRx;
    uint8_t RadioRx;
    uint8_t Com2UsbBridge;
    uint8_t Usb2ComBridge;
    uint8_t GPS;
    uint8_t OSDGen;
}  TaskInfoRunningTimeData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[21];
}  TaskInfoRunningTimeDataArray ;
#define TaskInfoRunningTimeToArray( var ) UAVObjectFieldToArray( TaskInfoRunningTimeData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    TaskInfoStackRemainingData StackRemaining;
    TaskInfoRunningData Running;
    TaskInfoRunningTimeData RunningTime;
} __attribute__((packed)) TaskInfoDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef TaskInfoDataPacked __attribute__((aligned(4))) TaskInfoData;
    
/* Typesafe Object access functions */
static inline int32_t TaskInfoGet(TaskInfoData *dataOut) { return UAVObjGetData(TaskInfoHandle(), dataOut); }
static inline int32_t TaskInfoSet(const TaskInfoData *dataIn) { return UAVObjSetData(TaskInfoHandle(), dataIn); }
static inline int32_t TaskInfoInstGet(uint16_t instId, TaskInfoData *dataOut) { return UAVObjGetInstanceData(TaskInfoHandle(), instId, dataOut); }
static inline int32_t TaskInfoInstSet(uint16_t instId, const TaskInfoData *dataIn) { return UAVObjSetInstanceData(TaskInfoHandle(), instId, dataIn); }
static inline int32_t TaskInfoConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(TaskInfoHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t TaskInfoConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(TaskInfoHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t TaskInfoCreateInstance() { return UAVObjCreateInstance(TaskInfoHandle(), &TaskInfoSetDefaults); }
static inline void TaskInfoRequestUpdate() { UAVObjRequestUpdate(TaskInfoHandle()); }
static inline void TaskInfoRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(TaskInfoHandle(), instId); }
static inline void TaskInfoUpdated() { UAVObjUpdated(TaskInfoHandle()); }
static inline void TaskInfoInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(TaskInfoHandle(), instId); }
static inline void TaskInfoLogging() { UAVObjLogging(TaskInfoHandle()); }
static inline void TaskInfoInstLogging(uint16_t instId) { UAVObjInstanceLogging(TaskInfoHandle(), instId); }
static inline int32_t TaskInfoGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(TaskInfoHandle(), dataOut); }
static inline int32_t TaskInfoSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(TaskInfoHandle(), dataIn); }
static inline int8_t TaskInfoReadOnly() { return UAVObjReadOnly(TaskInfoHandle()); }

/* Field StackRemaining information */

// Array element names for field StackRemaining
typedef enum {
    TASKINFO_STACKREMAINING_SYSTEM=0,
    TASKINFO_STACKREMAINING_CALLBACKSCHEDULER0=1,
    TASKINFO_STACKREMAINING_CALLBACKSCHEDULER1=2,
    TASKINFO_STACKREMAINING_CALLBACKSCHEDULER2=3,
    TASKINFO_STACKREMAINING_CALLBACKSCHEDULER3=4,
    TASKINFO_STACKREMAINING_RECEIVER=5,
    TASKINFO_STACKREMAINING_STABILIZATION=6,
    TASKINFO_STACKREMAINING_ACTUATOR=7,
    TASKINFO_STACKREMAINING_SENSORS=8,
    TASKINFO_STACKREMAINING_ATTITUDE=9,
    TASKINFO_STACKREMAINING_ALTITUDE=10,
    TASKINFO_STACKREMAINING_AIRSPEED=11,
    TASKINFO_STACKREMAINING_MAGBARO=12,
    TASKINFO_STACKREMAINING_FLIGHTPLAN=13,
    TASKINFO_STACKREMAINING_TELEMETRYTX=14,
    TASKINFO_STACKREMAINING_TELEMETRYRX=15,
    TASKINFO_STACKREMAINING_RADIORX=16,
    TASKINFO_STACKREMAINING_COM2USBBRIDGE=17,
    TASKINFO_STACKREMAINING_USB2COMBRIDGE=18,
    TASKINFO_STACKREMAINING_GPS=19,
    TASKINFO_STACKREMAINING_OSDGEN=20
} TaskInfoStackRemainingElem;

// Number of elements for field StackRemaining
#define TASKINFO_STACKREMAINING_NUMELEM 21

/* Field Running information */

// Enumeration options for field Running
typedef enum {
    TASKINFO_RUNNING_FALSE=0,
    TASKINFO_RUNNING_TRUE=1
} TaskInfoRunningOptions;

// Array element names for field Running
typedef enum {
    TASKINFO_RUNNING_SYSTEM=0,
    TASKINFO_RUNNING_CALLBACKSCHEDULER0=1,
    TASKINFO_RUNNING_CALLBACKSCHEDULER1=2,
    TASKINFO_RUNNING_CALLBACKSCHEDULER2=3,
    TASKINFO_RUNNING_CALLBACKSCHEDULER3=4,
    TASKINFO_RUNNING_RECEIVER=5,
    TASKINFO_RUNNING_STABILIZATION=6,
    TASKINFO_RUNNING_ACTUATOR=7,
    TASKINFO_RUNNING_SENSORS=8,
    TASKINFO_RUNNING_ATTITUDE=9,
    TASKINFO_RUNNING_ALTITUDE=10,
    TASKINFO_RUNNING_AIRSPEED=11,
    TASKINFO_RUNNING_MAGBARO=12,
    TASKINFO_RUNNING_FLIGHTPLAN=13,
    TASKINFO_RUNNING_TELEMETRYTX=14,
    TASKINFO_RUNNING_TELEMETRYRX=15,
    TASKINFO_RUNNING_RADIORX=16,
    TASKINFO_RUNNING_COM2USBBRIDGE=17,
    TASKINFO_RUNNING_USB2COMBRIDGE=18,
    TASKINFO_RUNNING_GPS=19,
    TASKINFO_RUNNING_OSDGEN=20
} TaskInfoRunningElem;

// Number of elements for field Running
#define TASKINFO_RUNNING_NUMELEM 21

/* Field RunningTime information */

// Array element names for field RunningTime
typedef enum {
    TASKINFO_RUNNINGTIME_SYSTEM=0,
    TASKINFO_RUNNINGTIME_CALLBACKSCHEDULER0=1,
    TASKINFO_RUNNINGTIME_CALLBACKSCHEDULER1=2,
    TASKINFO_RUNNINGTIME_CALLBACKSCHEDULER2=3,
    TASKINFO_RUNNINGTIME_CALLBACKSCHEDULER3=4,
    TASKINFO_RUNNINGTIME_RECEIVER=5,
    TASKINFO_RUNNINGTIME_STABILIZATION=6,
    TASKINFO_RUNNINGTIME_ACTUATOR=7,
    TASKINFO_RUNNINGTIME_SENSORS=8,
    TASKINFO_RUNNINGTIME_ATTITUDE=9,
    TASKINFO_RUNNINGTIME_ALTITUDE=10,
    TASKINFO_RUNNINGTIME_AIRSPEED=11,
    TASKINFO_RUNNINGTIME_MAGBARO=12,
    TASKINFO_RUNNINGTIME_FLIGHTPLAN=13,
    TASKINFO_RUNNINGTIME_TELEMETRYTX=14,
    TASKINFO_RUNNINGTIME_TELEMETRYRX=15,
    TASKINFO_RUNNINGTIME_RADIORX=16,
    TASKINFO_RUNNINGTIME_COM2USBBRIDGE=17,
    TASKINFO_RUNNINGTIME_USB2COMBRIDGE=18,
    TASKINFO_RUNNINGTIME_GPS=19,
    TASKINFO_RUNNINGTIME_OSDGEN=20
} TaskInfoRunningTimeElem;

// Number of elements for field RunningTime
#define TASKINFO_RUNNINGTIME_NUMELEM 21



/* Set/Get functions */
extern void TaskInfoStackRemainingSet(TaskInfoStackRemainingData *NewStackRemaining);
extern void TaskInfoStackRemainingGet(TaskInfoStackRemainingData *NewStackRemaining);
extern void TaskInfoStackRemainingArraySet(uint16_t *NewStackRemaining);
extern void TaskInfoStackRemainingArrayGet(uint16_t *NewStackRemaining);
extern void TaskInfoRunningSet(TaskInfoRunningData *NewRunning);
extern void TaskInfoRunningGet(TaskInfoRunningData *NewRunning);
extern void TaskInfoRunningArraySet(uint8_t *NewRunning);
extern void TaskInfoRunningArrayGet(uint8_t *NewRunning);
extern void TaskInfoRunningTimeSet(TaskInfoRunningTimeData *NewRunningTime);
extern void TaskInfoRunningTimeGet(TaskInfoRunningTimeData *NewRunningTime);
extern void TaskInfoRunningTimeArraySet(uint8_t *NewRunningTime);
extern void TaskInfoRunningTimeArrayGet(uint8_t *NewRunningTime);


#endif // TASKINFO_H

/**
 * @}
 * @}
 */
