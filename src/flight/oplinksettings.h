/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup OPLinkSettings OPLinkSettings 
 * @brief OPLink configurations options.
 *
 * Autogenerated files and functions for OPLinkSettings Object
 *
 * @{ 
 *
 * @file       oplinksettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OPLinkSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: oplinksettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OPLINKSETTINGS_H
#define OPLINKSETTINGS_H

/* Object constants */
#define OPLINKSETTINGS_OBJID 0x8885F812
#define OPLINKSETTINGS_ISSINGLEINST 1
#define OPLINKSETTINGS_ISSETTINGS 1
#define OPLINKSETTINGS_ISPRIORITY 0
#define OPLINKSETTINGS_NUMBYTES sizeof(OPLinkSettingsData)

/* Generic interface functions */
int32_t OPLinkSettingsInitialize();
UAVObjHandle OPLinkSettingsHandle();
void OPLinkSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t CoordID;
    uint8_t Coordinator;
    uint8_t OneWay;
    uint8_t PPM;
    uint8_t PPMOnly;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t VCPPort;
    uint8_t ComSpeed;
    uint8_t MaxRFPower;
    uint8_t MinChannel;
    uint8_t MaxChannel;
} __attribute__((packed)) OPLinkSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OPLinkSettingsDataPacked __attribute__((aligned(4))) OPLinkSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t OPLinkSettingsGet(OPLinkSettingsData *dataOut) { return UAVObjGetData(OPLinkSettingsHandle(), dataOut); }
static inline int32_t OPLinkSettingsSet(const OPLinkSettingsData *dataIn) { return UAVObjSetData(OPLinkSettingsHandle(), dataIn); }
static inline int32_t OPLinkSettingsInstGet(uint16_t instId, OPLinkSettingsData *dataOut) { return UAVObjGetInstanceData(OPLinkSettingsHandle(), instId, dataOut); }
static inline int32_t OPLinkSettingsInstSet(uint16_t instId, const OPLinkSettingsData *dataIn) { return UAVObjSetInstanceData(OPLinkSettingsHandle(), instId, dataIn); }
static inline int32_t OPLinkSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(OPLinkSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t OPLinkSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OPLinkSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t OPLinkSettingsCreateInstance() { return UAVObjCreateInstance(OPLinkSettingsHandle(), &OPLinkSettingsSetDefaults); }
static inline void OPLinkSettingsRequestUpdate() { UAVObjRequestUpdate(OPLinkSettingsHandle()); }
static inline void OPLinkSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OPLinkSettingsHandle(), instId); }
static inline void OPLinkSettingsUpdated() { UAVObjUpdated(OPLinkSettingsHandle()); }
static inline void OPLinkSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OPLinkSettingsHandle(), instId); }
static inline void OPLinkSettingsLogging() { UAVObjLogging(OPLinkSettingsHandle()); }
static inline void OPLinkSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(OPLinkSettingsHandle(), instId); }
static inline int32_t OPLinkSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OPLinkSettingsHandle(), dataOut); }
static inline int32_t OPLinkSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OPLinkSettingsHandle(), dataIn); }
static inline int8_t OPLinkSettingsReadOnly() { return UAVObjReadOnly(OPLinkSettingsHandle()); }

/* Field CoordID information */

/* Field Coordinator information */

// Enumeration options for field Coordinator
typedef enum {
    OPLINKSETTINGS_COORDINATOR_FALSE=0,
    OPLINKSETTINGS_COORDINATOR_TRUE=1
} OPLinkSettingsCoordinatorOptions;

/* Field OneWay information */

// Enumeration options for field OneWay
typedef enum {
    OPLINKSETTINGS_ONEWAY_FALSE=0,
    OPLINKSETTINGS_ONEWAY_TRUE=1
} OPLinkSettingsOneWayOptions;

/* Field PPM information */

// Enumeration options for field PPM
typedef enum {
    OPLINKSETTINGS_PPM_FALSE=0,
    OPLINKSETTINGS_PPM_TRUE=1
} OPLinkSettingsPPMOptions;

/* Field PPMOnly information */

// Enumeration options for field PPMOnly
typedef enum {
    OPLINKSETTINGS_PPMONLY_FALSE=0,
    OPLINKSETTINGS_PPMONLY_TRUE=1
} OPLinkSettingsPPMOnlyOptions;

/* Field MainPort information */

// Enumeration options for field MainPort
typedef enum {
    OPLINKSETTINGS_MAINPORT_DISABLED=0,
    OPLINKSETTINGS_MAINPORT_TELEMETRY=1,
    OPLINKSETTINGS_MAINPORT_SERIAL=2,
    OPLINKSETTINGS_MAINPORT_PPM=3,
    OPLINKSETTINGS_MAINPORT_PWM=4
} OPLinkSettingsMainPortOptions;

/* Field FlexiPort information */

// Enumeration options for field FlexiPort
typedef enum {
    OPLINKSETTINGS_FLEXIPORT_DISABLED=0,
    OPLINKSETTINGS_FLEXIPORT_TELEMETRY=1,
    OPLINKSETTINGS_FLEXIPORT_SERIAL=2,
    OPLINKSETTINGS_FLEXIPORT_PPM=3,
    OPLINKSETTINGS_FLEXIPORT_PWM=4
} OPLinkSettingsFlexiPortOptions;

/* Field VCPPort information */

// Enumeration options for field VCPPort
typedef enum {
    OPLINKSETTINGS_VCPPORT_DISABLED=0,
    OPLINKSETTINGS_VCPPORT_SERIAL=1
} OPLinkSettingsVCPPortOptions;

/* Field ComSpeed information */

// Enumeration options for field ComSpeed
typedef enum {
    OPLINKSETTINGS_COMSPEED_4800=0,
    OPLINKSETTINGS_COMSPEED_9600=1,
    OPLINKSETTINGS_COMSPEED_19200=2,
    OPLINKSETTINGS_COMSPEED_38400=3,
    OPLINKSETTINGS_COMSPEED_57600=4,
    OPLINKSETTINGS_COMSPEED_115200=5
} OPLinkSettingsComSpeedOptions;

/* Field MaxRFPower information */

// Enumeration options for field MaxRFPower
typedef enum {
    OPLINKSETTINGS_MAXRFPOWER_0=0,
    OPLINKSETTINGS_MAXRFPOWER_125=1,
    OPLINKSETTINGS_MAXRFPOWER_16=2,
    OPLINKSETTINGS_MAXRFPOWER_316=3,
    OPLINKSETTINGS_MAXRFPOWER_63=4,
    OPLINKSETTINGS_MAXRFPOWER_126=5,
    OPLINKSETTINGS_MAXRFPOWER_25=6,
    OPLINKSETTINGS_MAXRFPOWER_50=7,
    OPLINKSETTINGS_MAXRFPOWER_100=8
} OPLinkSettingsMaxRFPowerOptions;

/* Field MinChannel information */

/* Field MaxChannel information */



/* Set/Get functions */
extern void OPLinkSettingsCoordIDSet(uint32_t *NewCoordID);
extern void OPLinkSettingsCoordIDGet(uint32_t *NewCoordID);
extern void OPLinkSettingsCoordinatorSet(uint8_t *NewCoordinator);
extern void OPLinkSettingsCoordinatorGet(uint8_t *NewCoordinator);
extern void OPLinkSettingsOneWaySet(uint8_t *NewOneWay);
extern void OPLinkSettingsOneWayGet(uint8_t *NewOneWay);
extern void OPLinkSettingsPPMSet(uint8_t *NewPPM);
extern void OPLinkSettingsPPMGet(uint8_t *NewPPM);
extern void OPLinkSettingsPPMOnlySet(uint8_t *NewPPMOnly);
extern void OPLinkSettingsPPMOnlyGet(uint8_t *NewPPMOnly);
extern void OPLinkSettingsMainPortSet(uint8_t *NewMainPort);
extern void OPLinkSettingsMainPortGet(uint8_t *NewMainPort);
extern void OPLinkSettingsFlexiPortSet(uint8_t *NewFlexiPort);
extern void OPLinkSettingsFlexiPortGet(uint8_t *NewFlexiPort);
extern void OPLinkSettingsVCPPortSet(uint8_t *NewVCPPort);
extern void OPLinkSettingsVCPPortGet(uint8_t *NewVCPPort);
extern void OPLinkSettingsComSpeedSet(uint8_t *NewComSpeed);
extern void OPLinkSettingsComSpeedGet(uint8_t *NewComSpeed);
extern void OPLinkSettingsMaxRFPowerSet(uint8_t *NewMaxRFPower);
extern void OPLinkSettingsMaxRFPowerGet(uint8_t *NewMaxRFPower);
extern void OPLinkSettingsMinChannelSet(uint8_t *NewMinChannel);
extern void OPLinkSettingsMinChannelGet(uint8_t *NewMinChannel);
extern void OPLinkSettingsMaxChannelSet(uint8_t *NewMaxChannel);
extern void OPLinkSettingsMaxChannelGet(uint8_t *NewMaxChannel);


#endif // OPLINKSETTINGS_H

/**
 * @}
 * @}
 */
