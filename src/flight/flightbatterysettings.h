/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup FlightBatterySettings FlightBatterySettings 
 * @brief Flight Battery configuration.
 *
 * Autogenerated files and functions for FlightBatterySettings Object
 *
 * @{ 
 *
 * @file       flightbatterysettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the FlightBatterySettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flightbatterysettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTBATTERYSETTINGS_H
#define FLIGHTBATTERYSETTINGS_H

/* Object constants */
#define FLIGHTBATTERYSETTINGS_OBJID 0xC3D9C8AA
#define FLIGHTBATTERYSETTINGS_ISSINGLEINST 1
#define FLIGHTBATTERYSETTINGS_ISSETTINGS 1
#define FLIGHTBATTERYSETTINGS_ISPRIORITY 0
#define FLIGHTBATTERYSETTINGS_NUMBYTES sizeof(FlightBatterySettingsData)

/* Generic interface functions */
int32_t FlightBatterySettingsInitialize();
UAVObjHandle FlightBatterySettingsHandle();
void FlightBatterySettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    float Warning;
    float Alarm;
}  FlightBatterySettingsCellVoltageThresholdsData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  FlightBatterySettingsCellVoltageThresholdsDataArray ;
#define FlightBatterySettingsCellVoltageThresholdsToArray( var ) UAVObjectFieldToArray( FlightBatterySettingsCellVoltageThresholdsData, var )

typedef struct __attribute__ ((__packed__)) {
    float VoltageFactor;
    float CurrentFactor;
    float VoltageZero;
    float CurrentZero;
}  FlightBatterySettingsSensorCalibrationsData ;
typedef struct __attribute__ ((__packed__)) {
    float array[4];
}  FlightBatterySettingsSensorCalibrationsDataArray ;
#define FlightBatterySettingsSensorCalibrationsToArray( var ) UAVObjectFieldToArray( FlightBatterySettingsSensorCalibrationsData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t Capacity;
    FlightBatterySettingsCellVoltageThresholdsData CellVoltageThresholds;
    FlightBatterySettingsSensorCalibrationsData SensorCalibrations;
    uint8_t Type;
    uint8_t NbCells;
} __attribute__((packed)) FlightBatterySettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef FlightBatterySettingsDataPacked __attribute__((aligned(4))) FlightBatterySettingsData;
    
/* Typesafe Object access functions */
static inline int32_t FlightBatterySettingsGet(FlightBatterySettingsData *dataOut) { return UAVObjGetData(FlightBatterySettingsHandle(), dataOut); }
static inline int32_t FlightBatterySettingsSet(const FlightBatterySettingsData *dataIn) { return UAVObjSetData(FlightBatterySettingsHandle(), dataIn); }
static inline int32_t FlightBatterySettingsInstGet(uint16_t instId, FlightBatterySettingsData *dataOut) { return UAVObjGetInstanceData(FlightBatterySettingsHandle(), instId, dataOut); }
static inline int32_t FlightBatterySettingsInstSet(uint16_t instId, const FlightBatterySettingsData *dataIn) { return UAVObjSetInstanceData(FlightBatterySettingsHandle(), instId, dataIn); }
static inline int32_t FlightBatterySettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(FlightBatterySettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t FlightBatterySettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FlightBatterySettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t FlightBatterySettingsCreateInstance() { return UAVObjCreateInstance(FlightBatterySettingsHandle(), &FlightBatterySettingsSetDefaults); }
static inline void FlightBatterySettingsRequestUpdate() { UAVObjRequestUpdate(FlightBatterySettingsHandle()); }
static inline void FlightBatterySettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FlightBatterySettingsHandle(), instId); }
static inline void FlightBatterySettingsUpdated() { UAVObjUpdated(FlightBatterySettingsHandle()); }
static inline void FlightBatterySettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FlightBatterySettingsHandle(), instId); }
static inline void FlightBatterySettingsLogging() { UAVObjLogging(FlightBatterySettingsHandle()); }
static inline void FlightBatterySettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(FlightBatterySettingsHandle(), instId); }
static inline int32_t FlightBatterySettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FlightBatterySettingsHandle(), dataOut); }
static inline int32_t FlightBatterySettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FlightBatterySettingsHandle(), dataIn); }
static inline int8_t FlightBatterySettingsReadOnly() { return UAVObjReadOnly(FlightBatterySettingsHandle()); }

/* Field Capacity information */

/* Field CellVoltageThresholds information */

// Array element names for field CellVoltageThresholds
typedef enum {
    FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_WARNING=0,
    FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_ALARM=1
} FlightBatterySettingsCellVoltageThresholdsElem;

// Number of elements for field CellVoltageThresholds
#define FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_NUMELEM 2

/* Field SensorCalibrations information */

// Array element names for field SensorCalibrations
typedef enum {
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_VOLTAGEFACTOR=0,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_CURRENTFACTOR=1,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_VOLTAGEZERO=2,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_CURRENTZERO=3
} FlightBatterySettingsSensorCalibrationsElem;

// Number of elements for field SensorCalibrations
#define FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_NUMELEM 4

/* Field Type information */

// Enumeration options for field Type
typedef enum {
    FLIGHTBATTERYSETTINGS_TYPE_LIPO=0,
    FLIGHTBATTERYSETTINGS_TYPE_A123=1,
    FLIGHTBATTERYSETTINGS_TYPE_LICO=2,
    FLIGHTBATTERYSETTINGS_TYPE_LIFESO4=3,
    FLIGHTBATTERYSETTINGS_TYPE_NONE=4
} FlightBatterySettingsTypeOptions;

/* Field NbCells information */



/* Set/Get functions */
extern void FlightBatterySettingsCapacitySet(uint32_t *NewCapacity);
extern void FlightBatterySettingsCapacityGet(uint32_t *NewCapacity);
extern void FlightBatterySettingsCellVoltageThresholdsSet(FlightBatterySettingsCellVoltageThresholdsData *NewCellVoltageThresholds);
extern void FlightBatterySettingsCellVoltageThresholdsGet(FlightBatterySettingsCellVoltageThresholdsData *NewCellVoltageThresholds);
extern void FlightBatterySettingsCellVoltageThresholdsArraySet(float *NewCellVoltageThresholds);
extern void FlightBatterySettingsCellVoltageThresholdsArrayGet(float *NewCellVoltageThresholds);
extern void FlightBatterySettingsSensorCalibrationsSet(FlightBatterySettingsSensorCalibrationsData *NewSensorCalibrations);
extern void FlightBatterySettingsSensorCalibrationsGet(FlightBatterySettingsSensorCalibrationsData *NewSensorCalibrations);
extern void FlightBatterySettingsSensorCalibrationsArraySet(float *NewSensorCalibrations);
extern void FlightBatterySettingsSensorCalibrationsArrayGet(float *NewSensorCalibrations);
extern void FlightBatterySettingsTypeSet(uint8_t *NewType);
extern void FlightBatterySettingsTypeGet(uint8_t *NewType);
extern void FlightBatterySettingsNbCellsSet(uint8_t *NewNbCells);
extern void FlightBatterySettingsNbCellsGet(uint8_t *NewNbCells);


#endif // FLIGHTBATTERYSETTINGS_H

/**
 * @}
 * @}
 */
