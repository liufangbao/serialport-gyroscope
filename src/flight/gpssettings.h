/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GPSSettings GPSSettings 
 * @brief GPS Module specific settings
 *
 * Autogenerated files and functions for GPSSettings Object
 *
 * @{ 
 *
 * @file       gpssettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GPSSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gpssettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GPSSETTINGS_H
#define GPSSETTINGS_H

/* Object constants */
#define GPSSETTINGS_OBJID 0xDCDE4E70
#define GPSSETTINGS_ISSINGLEINST 1
#define GPSSETTINGS_ISSETTINGS 1
#define GPSSETTINGS_ISPRIORITY 0
#define GPSSETTINGS_NUMBYTES sizeof(GPSSettingsData)

/* Generic interface functions */
int32_t GPSSettingsInitialize();
UAVObjHandle GPSSettingsHandle();
void GPSSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float MaxPDOP;
    uint8_t DataProtocol;
    uint8_t MinSatellites;
    uint8_t UbxAutoConfig;
    int8_t UbxRate;
    uint8_t UbxDynamicModel;
    uint8_t UbxSBASMode;
    uint8_t UbxSBASChannelsUsed;
    uint8_t UbxSBASSats;
} __attribute__((packed)) GPSSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GPSSettingsDataPacked __attribute__((aligned(4))) GPSSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t GPSSettingsGet(GPSSettingsData *dataOut) { return UAVObjGetData(GPSSettingsHandle(), dataOut); }
static inline int32_t GPSSettingsSet(const GPSSettingsData *dataIn) { return UAVObjSetData(GPSSettingsHandle(), dataIn); }
static inline int32_t GPSSettingsInstGet(uint16_t instId, GPSSettingsData *dataOut) { return UAVObjGetInstanceData(GPSSettingsHandle(), instId, dataOut); }
static inline int32_t GPSSettingsInstSet(uint16_t instId, const GPSSettingsData *dataIn) { return UAVObjSetInstanceData(GPSSettingsHandle(), instId, dataIn); }
static inline int32_t GPSSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GPSSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GPSSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GPSSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GPSSettingsCreateInstance() { return UAVObjCreateInstance(GPSSettingsHandle(), &GPSSettingsSetDefaults); }
static inline void GPSSettingsRequestUpdate() { UAVObjRequestUpdate(GPSSettingsHandle()); }
static inline void GPSSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GPSSettingsHandle(), instId); }
static inline void GPSSettingsUpdated() { UAVObjUpdated(GPSSettingsHandle()); }
static inline void GPSSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GPSSettingsHandle(), instId); }
static inline void GPSSettingsLogging() { UAVObjLogging(GPSSettingsHandle()); }
static inline void GPSSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(GPSSettingsHandle(), instId); }
static inline int32_t GPSSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GPSSettingsHandle(), dataOut); }
static inline int32_t GPSSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GPSSettingsHandle(), dataIn); }
static inline int8_t GPSSettingsReadOnly() { return UAVObjReadOnly(GPSSettingsHandle()); }

/* Field MaxPDOP information */

/* Field DataProtocol information */

// Enumeration options for field DataProtocol
typedef enum {
    GPSSETTINGS_DATAPROTOCOL_NMEA=0,
    GPSSETTINGS_DATAPROTOCOL_UBX=1
} GPSSettingsDataProtocolOptions;

/* Field MinSatellites information */

/* Field UbxAutoConfig information */

// Enumeration options for field UbxAutoConfig
typedef enum {
    GPSSETTINGS_UBXAUTOCONFIG_DISABLED=0,
    GPSSETTINGS_UBXAUTOCONFIG_CONFIGURE=1,
    GPSSETTINGS_UBXAUTOCONFIG_CONFIGUREANDSTORE=2
} GPSSettingsUbxAutoConfigOptions;

/* Field UbxRate information */

/* Field UbxDynamicModel information */

// Enumeration options for field UbxDynamicModel
typedef enum {
    GPSSETTINGS_UBXDYNAMICMODEL_PORTABLE=0,
    GPSSETTINGS_UBXDYNAMICMODEL_STATIONARY=1,
    GPSSETTINGS_UBXDYNAMICMODEL_PEDESTRIAN=2,
    GPSSETTINGS_UBXDYNAMICMODEL_AUTOMOTIVE=3,
    GPSSETTINGS_UBXDYNAMICMODEL_SEA=4,
    GPSSETTINGS_UBXDYNAMICMODEL_AIRBORNE1G=5,
    GPSSETTINGS_UBXDYNAMICMODEL_AIRBORNE2G=6,
    GPSSETTINGS_UBXDYNAMICMODEL_AIRBORNE4G=7
} GPSSettingsUbxDynamicModelOptions;

/* Field UbxSBASMode information */

// Enumeration options for field UbxSBASMode
typedef enum {
    GPSSETTINGS_UBXSBASMODE_DISABLED=0,
    GPSSETTINGS_UBXSBASMODE_RANGING=1,
    GPSSETTINGS_UBXSBASMODE_CORRECTION=2,
    GPSSETTINGS_UBXSBASMODE_INTEGRITY=3,
    GPSSETTINGS_UBXSBASMODE_RANGINGCORRECTION=4,
    GPSSETTINGS_UBXSBASMODE_RANGINGINTEGRITY=5,
    GPSSETTINGS_UBXSBASMODE_RANGINGCORRECTIONINTEGRITY=6,
    GPSSETTINGS_UBXSBASMODE_CORRECTIONINTEGRITY=7
} GPSSettingsUbxSBASModeOptions;

/* Field UbxSBASChannelsUsed information */

/* Field UbxSBASSats information */

// Enumeration options for field UbxSBASSats
typedef enum {
    GPSSETTINGS_UBXSBASSATS_AUTOSCAN=0,
    GPSSETTINGS_UBXSBASSATS_WAAS=1,
    GPSSETTINGS_UBXSBASSATS_EGNOS=2,
    GPSSETTINGS_UBXSBASSATS_MSAS=3,
    GPSSETTINGS_UBXSBASSATS_GAGAN=4,
    GPSSETTINGS_UBXSBASSATS_SDCM=5
} GPSSettingsUbxSBASSatsOptions;



/* Set/Get functions */
extern void GPSSettingsMaxPDOPSet(float *NewMaxPDOP);
extern void GPSSettingsMaxPDOPGet(float *NewMaxPDOP);
extern void GPSSettingsDataProtocolSet(uint8_t *NewDataProtocol);
extern void GPSSettingsDataProtocolGet(uint8_t *NewDataProtocol);
extern void GPSSettingsMinSatellitesSet(uint8_t *NewMinSatellites);
extern void GPSSettingsMinSatellitesGet(uint8_t *NewMinSatellites);
extern void GPSSettingsUbxAutoConfigSet(uint8_t *NewUbxAutoConfig);
extern void GPSSettingsUbxAutoConfigGet(uint8_t *NewUbxAutoConfig);
extern void GPSSettingsUbxRateSet(int8_t *NewUbxRate);
extern void GPSSettingsUbxRateGet(int8_t *NewUbxRate);
extern void GPSSettingsUbxDynamicModelSet(uint8_t *NewUbxDynamicModel);
extern void GPSSettingsUbxDynamicModelGet(uint8_t *NewUbxDynamicModel);
extern void GPSSettingsUbxSBASModeSet(uint8_t *NewUbxSBASMode);
extern void GPSSettingsUbxSBASModeGet(uint8_t *NewUbxSBASMode);
extern void GPSSettingsUbxSBASChannelsUsedSet(uint8_t *NewUbxSBASChannelsUsed);
extern void GPSSettingsUbxSBASChannelsUsedGet(uint8_t *NewUbxSBASChannelsUsed);
extern void GPSSettingsUbxSBASSatsSet(uint8_t *NewUbxSBASSats);
extern void GPSSettingsUbxSBASSatsGet(uint8_t *NewUbxSBASSats);


#endif // GPSSETTINGS_H

/**
 * @}
 * @}
 */
