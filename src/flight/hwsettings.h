/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup HwSettings HwSettings 
 * @brief Selection of optional hardware configurations.
 *
 * Autogenerated files and functions for HwSettings Object
 *
 * @{ 
 *
 * @file       hwsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the HwSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSETTINGS_H
#define HWSETTINGS_H

/* Object constants */
#define HWSETTINGS_OBJID 0xA65C5CD0
#define HWSETTINGS_ISSINGLEINST 1
#define HWSETTINGS_ISSETTINGS 1
#define HWSETTINGS_ISPRIORITY 0
#define HWSETTINGS_NUMBYTES sizeof(HwSettingsData)

/* Generic interface functions */
int32_t HwSettingsInitialize();
UAVObjHandle HwSettingsHandle();
void HwSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    uint8_t CameraStab;
    uint8_t GPS;
    uint8_t Fault;
    uint8_t Altitude;
    uint8_t Airspeed;
    uint8_t TxPID;
    uint8_t Battery;
    uint8_t Overo;
    uint8_t MagBaro;
    uint8_t OsdHk;
}  HwSettingsOptionalModulesData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[10];
}  HwSettingsOptionalModulesDataArray ;
#define HwSettingsOptionalModulesToArray( var ) UAVObjectFieldToArray( HwSettingsOptionalModulesData, var )

typedef struct __attribute__ ((__packed__)) {
    uint8_t adc0;
    uint8_t adc1;
    uint8_t adc2;
    uint8_t adc3;
}  HwSettingsADCRoutingData ;
typedef struct __attribute__ ((__packed__)) {
    uint8_t array[4];
}  HwSettingsADCRoutingDataArray ;
#define HwSettingsADCRoutingToArray( var ) UAVObjectFieldToArray( HwSettingsADCRoutingData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint8_t CC_RcvrPort;
    uint8_t CC_MainPort;
    uint8_t CC_FlexiPort;
    uint8_t RV_RcvrPort;
    uint8_t RV_AuxPort;
    uint8_t RV_AuxSBusPort;
    uint8_t RV_FlexiPort;
    uint8_t RV_TelemetryPort;
    uint8_t RV_GPSPort;
    uint8_t RM_RcvrPort;
    uint8_t RM_MainPort;
    uint8_t RM_FlexiPort;
    uint8_t TelemetrySpeed;
    uint8_t GPSSpeed;
    uint8_t ComUsbBridgeSpeed;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    HwSettingsOptionalModulesData OptionalModules;
    HwSettingsADCRoutingData ADCRouting;
    uint8_t DSMxBind;
    uint8_t WS2811LED_Out;
} __attribute__((packed)) HwSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef HwSettingsDataPacked __attribute__((aligned(4))) HwSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t HwSettingsGet(HwSettingsData *dataOut) { return UAVObjGetData(HwSettingsHandle(), dataOut); }
static inline int32_t HwSettingsSet(const HwSettingsData *dataIn) { return UAVObjSetData(HwSettingsHandle(), dataIn); }
static inline int32_t HwSettingsInstGet(uint16_t instId, HwSettingsData *dataOut) { return UAVObjGetInstanceData(HwSettingsHandle(), instId, dataOut); }
static inline int32_t HwSettingsInstSet(uint16_t instId, const HwSettingsData *dataIn) { return UAVObjSetInstanceData(HwSettingsHandle(), instId, dataIn); }
static inline int32_t HwSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t HwSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t HwSettingsCreateInstance() { return UAVObjCreateInstance(HwSettingsHandle(), &HwSettingsSetDefaults); }
static inline void HwSettingsRequestUpdate() { UAVObjRequestUpdate(HwSettingsHandle()); }
static inline void HwSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwSettingsHandle(), instId); }
static inline void HwSettingsUpdated() { UAVObjUpdated(HwSettingsHandle()); }
static inline void HwSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwSettingsHandle(), instId); }
static inline void HwSettingsLogging() { UAVObjLogging(HwSettingsHandle()); }
static inline void HwSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(HwSettingsHandle(), instId); }
static inline int32_t HwSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwSettingsHandle(), dataOut); }
static inline int32_t HwSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwSettingsHandle(), dataIn); }
static inline int8_t HwSettingsReadOnly() { return UAVObjReadOnly(HwSettingsHandle()); }

/* Field CC_RcvrPort information */

// Enumeration options for field CC_RcvrPort
typedef enum {
    HWSETTINGS_CC_RCVRPORT_DISABLEDONESHOT=0,
    HWSETTINGS_CC_RCVRPORT_PWMNOONESHOT=1,
    HWSETTINGS_CC_RCVRPORT_PPMNOONESHOT=2,
    HWSETTINGS_CC_RCVRPORT_PPMPWMNOONESHOT=3,
    HWSETTINGS_CC_RCVRPORT_PPMOUTPUTSNOONESHOT=4,
    HWSETTINGS_CC_RCVRPORT_PPM_PIN8ONESHOT=5,
    HWSETTINGS_CC_RCVRPORT_OUTPUTSONESHOT=6
} HwSettingsCC_RcvrPortOptions;

/* Field CC_MainPort information */

// Enumeration options for field CC_MainPort
typedef enum {
    HWSETTINGS_CC_MAINPORT_DISABLED=0,
    HWSETTINGS_CC_MAINPORT_TELEMETRY=1,
    HWSETTINGS_CC_MAINPORT_GPS=2,
    HWSETTINGS_CC_MAINPORT_SBUS=3,
    HWSETTINGS_CC_MAINPORT_DSM=4,
    HWSETTINGS_CC_MAINPORT_DEBUGCONSOLE=5,
    HWSETTINGS_CC_MAINPORT_COMBRIDGE=6,
    HWSETTINGS_CC_MAINPORT_OSDHK=7
} HwSettingsCC_MainPortOptions;

/* Field CC_FlexiPort information */

// Enumeration options for field CC_FlexiPort
typedef enum {
    HWSETTINGS_CC_FLEXIPORT_DISABLED=0,
    HWSETTINGS_CC_FLEXIPORT_TELEMETRY=1,
    HWSETTINGS_CC_FLEXIPORT_GPS=2,
    HWSETTINGS_CC_FLEXIPORT_I2C=3,
    HWSETTINGS_CC_FLEXIPORT_PPM=4,
    HWSETTINGS_CC_FLEXIPORT_DSM=5,
    HWSETTINGS_CC_FLEXIPORT_DEBUGCONSOLE=6,
    HWSETTINGS_CC_FLEXIPORT_COMBRIDGE=7,
    HWSETTINGS_CC_FLEXIPORT_OSDHK=8
} HwSettingsCC_FlexiPortOptions;

/* Field RV_RcvrPort information */

// Enumeration options for field RV_RcvrPort
typedef enum {
    HWSETTINGS_RV_RCVRPORT_DISABLED=0,
    HWSETTINGS_RV_RCVRPORT_PWM=1,
    HWSETTINGS_RV_RCVRPORT_PPM=2,
    HWSETTINGS_RV_RCVRPORT_PPMOUTPUTS=3,
    HWSETTINGS_RV_RCVRPORT_OUTPUTS=4
} HwSettingsRV_RcvrPortOptions;

/* Field RV_AuxPort information */

// Enumeration options for field RV_AuxPort
typedef enum {
    HWSETTINGS_RV_AUXPORT_DISABLED=0,
    HWSETTINGS_RV_AUXPORT_TELEMETRY=1,
    HWSETTINGS_RV_AUXPORT_DSM=2,
    HWSETTINGS_RV_AUXPORT_COMAUX=3,
    HWSETTINGS_RV_AUXPORT_COMBRIDGE=4,
    HWSETTINGS_RV_AUXPORT_OSDHK=5
} HwSettingsRV_AuxPortOptions;

/* Field RV_AuxSBusPort information */

// Enumeration options for field RV_AuxSBusPort
typedef enum {
    HWSETTINGS_RV_AUXSBUSPORT_DISABLED=0,
    HWSETTINGS_RV_AUXSBUSPORT_SBUS=1,
    HWSETTINGS_RV_AUXSBUSPORT_DSM=2,
    HWSETTINGS_RV_AUXSBUSPORT_COMAUX=3,
    HWSETTINGS_RV_AUXSBUSPORT_COMBRIDGE=4,
    HWSETTINGS_RV_AUXSBUSPORT_OSDHK=5
} HwSettingsRV_AuxSBusPortOptions;

/* Field RV_FlexiPort information */

// Enumeration options for field RV_FlexiPort
typedef enum {
    HWSETTINGS_RV_FLEXIPORT_DISABLED=0,
    HWSETTINGS_RV_FLEXIPORT_I2C=1,
    HWSETTINGS_RV_FLEXIPORT_DSM=2,
    HWSETTINGS_RV_FLEXIPORT_COMAUX=3,
    HWSETTINGS_RV_FLEXIPORT_COMBRIDGE=4
} HwSettingsRV_FlexiPortOptions;

/* Field RV_TelemetryPort information */

// Enumeration options for field RV_TelemetryPort
typedef enum {
    HWSETTINGS_RV_TELEMETRYPORT_DISABLED=0,
    HWSETTINGS_RV_TELEMETRYPORT_TELEMETRY=1,
    HWSETTINGS_RV_TELEMETRYPORT_COMAUX=2,
    HWSETTINGS_RV_TELEMETRYPORT_COMBRIDGE=3
} HwSettingsRV_TelemetryPortOptions;

/* Field RV_GPSPort information */

// Enumeration options for field RV_GPSPort
typedef enum {
    HWSETTINGS_RV_GPSPORT_DISABLED=0,
    HWSETTINGS_RV_GPSPORT_TELEMETRY=1,
    HWSETTINGS_RV_GPSPORT_GPS=2,
    HWSETTINGS_RV_GPSPORT_COMAUX=3,
    HWSETTINGS_RV_GPSPORT_COMBRIDGE=4
} HwSettingsRV_GPSPortOptions;

/* Field RM_RcvrPort information */

// Enumeration options for field RM_RcvrPort
typedef enum {
    HWSETTINGS_RM_RCVRPORT_DISABLED=0,
    HWSETTINGS_RM_RCVRPORT_PWM=1,
    HWSETTINGS_RM_RCVRPORT_PPM=2,
    HWSETTINGS_RM_RCVRPORT_PPMPWM=3,
    HWSETTINGS_RM_RCVRPORT_PPMTELEMETRY=4,
    HWSETTINGS_RM_RCVRPORT_PPMOUTPUTS=5,
    HWSETTINGS_RM_RCVRPORT_OUTPUTS=6,
    HWSETTINGS_RM_RCVRPORT_TELEMETRY=7
} HwSettingsRM_RcvrPortOptions;

/* Field RM_MainPort information */

// Enumeration options for field RM_MainPort
typedef enum {
    HWSETTINGS_RM_MAINPORT_DISABLED=0,
    HWSETTINGS_RM_MAINPORT_TELEMETRY=1,
    HWSETTINGS_RM_MAINPORT_GPS=2,
    HWSETTINGS_RM_MAINPORT_SBUS=3,
    HWSETTINGS_RM_MAINPORT_DSM=4,
    HWSETTINGS_RM_MAINPORT_DEBUGCONSOLE=5,
    HWSETTINGS_RM_MAINPORT_COMBRIDGE=6,
    HWSETTINGS_RM_MAINPORT_OSDHK=7
} HwSettingsRM_MainPortOptions;

/* Field RM_FlexiPort information */

// Enumeration options for field RM_FlexiPort
typedef enum {
    HWSETTINGS_RM_FLEXIPORT_DISABLED=0,
    HWSETTINGS_RM_FLEXIPORT_TELEMETRY=1,
    HWSETTINGS_RM_FLEXIPORT_GPS=2,
    HWSETTINGS_RM_FLEXIPORT_I2C=3,
    HWSETTINGS_RM_FLEXIPORT_DSM=4,
    HWSETTINGS_RM_FLEXIPORT_DEBUGCONSOLE=5,
    HWSETTINGS_RM_FLEXIPORT_COMBRIDGE=6,
    HWSETTINGS_RM_FLEXIPORT_OSDHK=7
} HwSettingsRM_FlexiPortOptions;

/* Field TelemetrySpeed information */

// Enumeration options for field TelemetrySpeed
typedef enum {
    HWSETTINGS_TELEMETRYSPEED_2400=0,
    HWSETTINGS_TELEMETRYSPEED_4800=1,
    HWSETTINGS_TELEMETRYSPEED_9600=2,
    HWSETTINGS_TELEMETRYSPEED_19200=3,
    HWSETTINGS_TELEMETRYSPEED_38400=4,
    HWSETTINGS_TELEMETRYSPEED_57600=5,
    HWSETTINGS_TELEMETRYSPEED_115200=6
} HwSettingsTelemetrySpeedOptions;

/* Field GPSSpeed information */

// Enumeration options for field GPSSpeed
typedef enum {
    HWSETTINGS_GPSSPEED_2400=0,
    HWSETTINGS_GPSSPEED_4800=1,
    HWSETTINGS_GPSSPEED_9600=2,
    HWSETTINGS_GPSSPEED_19200=3,
    HWSETTINGS_GPSSPEED_38400=4,
    HWSETTINGS_GPSSPEED_57600=5,
    HWSETTINGS_GPSSPEED_115200=6,
    HWSETTINGS_GPSSPEED_230400=7
} HwSettingsGPSSpeedOptions;

/* Field ComUsbBridgeSpeed information */

// Enumeration options for field ComUsbBridgeSpeed
typedef enum {
    HWSETTINGS_COMUSBBRIDGESPEED_2400=0,
    HWSETTINGS_COMUSBBRIDGESPEED_4800=1,
    HWSETTINGS_COMUSBBRIDGESPEED_9600=2,
    HWSETTINGS_COMUSBBRIDGESPEED_19200=3,
    HWSETTINGS_COMUSBBRIDGESPEED_38400=4,
    HWSETTINGS_COMUSBBRIDGESPEED_57600=5,
    HWSETTINGS_COMUSBBRIDGESPEED_115200=6
} HwSettingsComUsbBridgeSpeedOptions;

/* Field USB_HIDPort information */

// Enumeration options for field USB_HIDPort
typedef enum {
    HWSETTINGS_USB_HIDPORT_USBTELEMETRY=0,
    HWSETTINGS_USB_HIDPORT_RCTRANSMITTER=1,
    HWSETTINGS_USB_HIDPORT_DISABLED=2
} HwSettingsUSB_HIDPortOptions;

/* Field USB_VCPPort information */

// Enumeration options for field USB_VCPPort
typedef enum {
    HWSETTINGS_USB_VCPPORT_USBTELEMETRY=0,
    HWSETTINGS_USB_VCPPORT_COMBRIDGE=1,
    HWSETTINGS_USB_VCPPORT_DEBUGCONSOLE=2,
    HWSETTINGS_USB_VCPPORT_DISABLED=3
} HwSettingsUSB_VCPPortOptions;

/* Field OptionalModules information */

// Enumeration options for field OptionalModules
typedef enum {
    HWSETTINGS_OPTIONALMODULES_DISABLED=0,
    HWSETTINGS_OPTIONALMODULES_ENABLED=1
} HwSettingsOptionalModulesOptions;

// Array element names for field OptionalModules
typedef enum {
    HWSETTINGS_OPTIONALMODULES_CAMERASTAB=0,
    HWSETTINGS_OPTIONALMODULES_GPS=1,
    HWSETTINGS_OPTIONALMODULES_FAULT=2,
    HWSETTINGS_OPTIONALMODULES_ALTITUDE=3,
    HWSETTINGS_OPTIONALMODULES_AIRSPEED=4,
    HWSETTINGS_OPTIONALMODULES_TXPID=5,
    HWSETTINGS_OPTIONALMODULES_BATTERY=6,
    HWSETTINGS_OPTIONALMODULES_OVERO=7,
    HWSETTINGS_OPTIONALMODULES_MAGBARO=8,
    HWSETTINGS_OPTIONALMODULES_OSDHK=9
} HwSettingsOptionalModulesElem;

// Number of elements for field OptionalModules
#define HWSETTINGS_OPTIONALMODULES_NUMELEM 10

/* Field ADCRouting information */

// Enumeration options for field ADCRouting
typedef enum {
    HWSETTINGS_ADCROUTING_DISABLED=0,
    HWSETTINGS_ADCROUTING_BATTERYVOLTAGE=1,
    HWSETTINGS_ADCROUTING_BATTERYCURRENT=2,
    HWSETTINGS_ADCROUTING_ANALOGAIRSPEED=3,
    HWSETTINGS_ADCROUTING_GENERIC=4
} HwSettingsADCRoutingOptions;

// Array element names for field ADCRouting
typedef enum {
    HWSETTINGS_ADCROUTING_ADC0=0,
    HWSETTINGS_ADCROUTING_ADC1=1,
    HWSETTINGS_ADCROUTING_ADC2=2,
    HWSETTINGS_ADCROUTING_ADC3=3
} HwSettingsADCRoutingElem;

// Number of elements for field ADCRouting
#define HWSETTINGS_ADCROUTING_NUMELEM 4

/* Field DSMxBind information */

/* Field WS2811LED_Out information */

// Enumeration options for field WS2811LED_Out
typedef enum {
    HWSETTINGS_WS2811LED_OUT_SERVOOUT1=0,
    HWSETTINGS_WS2811LED_OUT_SERVOOUT2=1,
    HWSETTINGS_WS2811LED_OUT_SERVOOUT3=2,
    HWSETTINGS_WS2811LED_OUT_SERVOOUT4=3,
    HWSETTINGS_WS2811LED_OUT_SERVOOUT5=4,
    HWSETTINGS_WS2811LED_OUT_SERVOOUT6=5,
    HWSETTINGS_WS2811LED_OUT_FLEXIIOPIN3=6,
    HWSETTINGS_WS2811LED_OUT_FLEXIIOPIN4=7,
    HWSETTINGS_WS2811LED_OUT_DISABLED=8
} HwSettingsWS2811LED_OutOptions;



/* Set/Get functions */
extern void HwSettingsCC_RcvrPortSet(uint8_t *NewCC_RcvrPort);
extern void HwSettingsCC_RcvrPortGet(uint8_t *NewCC_RcvrPort);
extern void HwSettingsCC_MainPortSet(uint8_t *NewCC_MainPort);
extern void HwSettingsCC_MainPortGet(uint8_t *NewCC_MainPort);
extern void HwSettingsCC_FlexiPortSet(uint8_t *NewCC_FlexiPort);
extern void HwSettingsCC_FlexiPortGet(uint8_t *NewCC_FlexiPort);
extern void HwSettingsRV_RcvrPortSet(uint8_t *NewRV_RcvrPort);
extern void HwSettingsRV_RcvrPortGet(uint8_t *NewRV_RcvrPort);
extern void HwSettingsRV_AuxPortSet(uint8_t *NewRV_AuxPort);
extern void HwSettingsRV_AuxPortGet(uint8_t *NewRV_AuxPort);
extern void HwSettingsRV_AuxSBusPortSet(uint8_t *NewRV_AuxSBusPort);
extern void HwSettingsRV_AuxSBusPortGet(uint8_t *NewRV_AuxSBusPort);
extern void HwSettingsRV_FlexiPortSet(uint8_t *NewRV_FlexiPort);
extern void HwSettingsRV_FlexiPortGet(uint8_t *NewRV_FlexiPort);
extern void HwSettingsRV_TelemetryPortSet(uint8_t *NewRV_TelemetryPort);
extern void HwSettingsRV_TelemetryPortGet(uint8_t *NewRV_TelemetryPort);
extern void HwSettingsRV_GPSPortSet(uint8_t *NewRV_GPSPort);
extern void HwSettingsRV_GPSPortGet(uint8_t *NewRV_GPSPort);
extern void HwSettingsRM_RcvrPortSet(uint8_t *NewRM_RcvrPort);
extern void HwSettingsRM_RcvrPortGet(uint8_t *NewRM_RcvrPort);
extern void HwSettingsRM_MainPortSet(uint8_t *NewRM_MainPort);
extern void HwSettingsRM_MainPortGet(uint8_t *NewRM_MainPort);
extern void HwSettingsRM_FlexiPortSet(uint8_t *NewRM_FlexiPort);
extern void HwSettingsRM_FlexiPortGet(uint8_t *NewRM_FlexiPort);
extern void HwSettingsTelemetrySpeedSet(uint8_t *NewTelemetrySpeed);
extern void HwSettingsTelemetrySpeedGet(uint8_t *NewTelemetrySpeed);
extern void HwSettingsGPSSpeedSet(uint8_t *NewGPSSpeed);
extern void HwSettingsGPSSpeedGet(uint8_t *NewGPSSpeed);
extern void HwSettingsComUsbBridgeSpeedSet(uint8_t *NewComUsbBridgeSpeed);
extern void HwSettingsComUsbBridgeSpeedGet(uint8_t *NewComUsbBridgeSpeed);
extern void HwSettingsUSB_HIDPortSet(uint8_t *NewUSB_HIDPort);
extern void HwSettingsUSB_HIDPortGet(uint8_t *NewUSB_HIDPort);
extern void HwSettingsUSB_VCPPortSet(uint8_t *NewUSB_VCPPort);
extern void HwSettingsUSB_VCPPortGet(uint8_t *NewUSB_VCPPort);
extern void HwSettingsOptionalModulesSet(HwSettingsOptionalModulesData *NewOptionalModules);
extern void HwSettingsOptionalModulesGet(HwSettingsOptionalModulesData *NewOptionalModules);
extern void HwSettingsOptionalModulesArraySet(uint8_t *NewOptionalModules);
extern void HwSettingsOptionalModulesArrayGet(uint8_t *NewOptionalModules);
extern void HwSettingsADCRoutingSet(HwSettingsADCRoutingData *NewADCRouting);
extern void HwSettingsADCRoutingGet(HwSettingsADCRoutingData *NewADCRouting);
extern void HwSettingsADCRoutingArraySet(uint8_t *NewADCRouting);
extern void HwSettingsADCRoutingArrayGet(uint8_t *NewADCRouting);
extern void HwSettingsDSMxBindSet(uint8_t *NewDSMxBind);
extern void HwSettingsDSMxBindGet(uint8_t *NewDSMxBind);
extern void HwSettingsWS2811LED_OutSet(uint8_t *NewWS2811LED_Out);
extern void HwSettingsWS2811LED_OutGet(uint8_t *NewWS2811LED_Out);


#endif // HWSETTINGS_H

/**
 * @}
 * @}
 */
