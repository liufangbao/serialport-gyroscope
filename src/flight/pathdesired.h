/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup PathDesired PathDesired 
 * @brief The endpoint or path the craft is trying to achieve.  Can come from @ref ManualControl or @ref PathPlanner 
 *
 * Autogenerated files and functions for PathDesired Object
 *
 * @{ 
 *
 * @file       pathdesired.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the PathDesired object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: pathdesired.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PATHDESIRED_H
#define PATHDESIRED_H

/* Object constants */
#define PATHDESIRED_OBJID 0x32DDD952
#define PATHDESIRED_ISSINGLEINST 1
#define PATHDESIRED_ISSETTINGS 0
#define PATHDESIRED_ISPRIORITY 0
#define PATHDESIRED_NUMBYTES sizeof(PathDesiredData)

/* Generic interface functions */
int32_t PathDesiredInitialize();
UAVObjHandle PathDesiredHandle();
void PathDesiredSetDefaults(UAVObjHandle obj, uint16_t instId);

typedef struct __attribute__ ((__packed__)) {
    float North;
    float East;
    float Down;
}  PathDesiredStartData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  PathDesiredStartDataArray ;
#define PathDesiredStartToArray( var ) UAVObjectFieldToArray( PathDesiredStartData, var )

typedef struct __attribute__ ((__packed__)) {
    float North;
    float East;
    float Down;
}  PathDesiredEndData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  PathDesiredEndDataArray ;
#define PathDesiredEndToArray( var ) UAVObjectFieldToArray( PathDesiredEndData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    PathDesiredStartData Start;
    PathDesiredEndData End;
    float StartingVelocity;
    float EndingVelocity;
    float ModeParameters[4];
    int16_t UID;
    uint8_t Mode;
} __attribute__((packed)) PathDesiredDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef PathDesiredDataPacked __attribute__((aligned(4))) PathDesiredData;
    
/* Typesafe Object access functions */
static inline int32_t PathDesiredGet(PathDesiredData *dataOut) { return UAVObjGetData(PathDesiredHandle(), dataOut); }
static inline int32_t PathDesiredSet(const PathDesiredData *dataIn) { return UAVObjSetData(PathDesiredHandle(), dataIn); }
static inline int32_t PathDesiredInstGet(uint16_t instId, PathDesiredData *dataOut) { return UAVObjGetInstanceData(PathDesiredHandle(), instId, dataOut); }
static inline int32_t PathDesiredInstSet(uint16_t instId, const PathDesiredData *dataIn) { return UAVObjSetInstanceData(PathDesiredHandle(), instId, dataIn); }
static inline int32_t PathDesiredConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PathDesiredHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t PathDesiredConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PathDesiredHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t PathDesiredCreateInstance() { return UAVObjCreateInstance(PathDesiredHandle(), &PathDesiredSetDefaults); }
static inline void PathDesiredRequestUpdate() { UAVObjRequestUpdate(PathDesiredHandle()); }
static inline void PathDesiredRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PathDesiredHandle(), instId); }
static inline void PathDesiredUpdated() { UAVObjUpdated(PathDesiredHandle()); }
static inline void PathDesiredInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PathDesiredHandle(), instId); }
static inline void PathDesiredLogging() { UAVObjLogging(PathDesiredHandle()); }
static inline void PathDesiredInstLogging(uint16_t instId) { UAVObjInstanceLogging(PathDesiredHandle(), instId); }
static inline int32_t PathDesiredGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PathDesiredHandle(), dataOut); }
static inline int32_t PathDesiredSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PathDesiredHandle(), dataIn); }
static inline int8_t PathDesiredReadOnly() { return UAVObjReadOnly(PathDesiredHandle()); }

/* Field Start information */

// Array element names for field Start
typedef enum {
    PATHDESIRED_START_NORTH=0,
    PATHDESIRED_START_EAST=1,
    PATHDESIRED_START_DOWN=2
} PathDesiredStartElem;

// Number of elements for field Start
#define PATHDESIRED_START_NUMELEM 3

/* Field End information */

// Array element names for field End
typedef enum {
    PATHDESIRED_END_NORTH=0,
    PATHDESIRED_END_EAST=1,
    PATHDESIRED_END_DOWN=2
} PathDesiredEndElem;

// Number of elements for field End
#define PATHDESIRED_END_NUMELEM 3

/* Field StartingVelocity information */

/* Field EndingVelocity information */

/* Field ModeParameters information */

// Number of elements for field ModeParameters
#define PATHDESIRED_MODEPARAMETERS_NUMELEM 4

/* Field UID information */

/* Field Mode information */

// Enumeration options for field Mode
typedef enum {
    PATHDESIRED_MODE_FLYENDPOINT=0,
    PATHDESIRED_MODE_FLYVECTOR=1,
    PATHDESIRED_MODE_FLYCIRCLERIGHT=2,
    PATHDESIRED_MODE_FLYCIRCLELEFT=3,
    PATHDESIRED_MODE_DRIVEENDPOINT=4,
    PATHDESIRED_MODE_DRIVEVECTOR=5,
    PATHDESIRED_MODE_DRIVECIRCLELEFT=6,
    PATHDESIRED_MODE_DRIVECIRCLERIGHT=7,
    PATHDESIRED_MODE_FIXEDATTITUDE=8,
    PATHDESIRED_MODE_SETACCESSORY=9,
    PATHDESIRED_MODE_LAND=10,
    PATHDESIRED_MODE_DISARMALARM=11,
    PATHDESIRED_MODE_BRAKE=12
} PathDesiredModeOptions;



/* Set/Get functions */
extern void PathDesiredStartSet(PathDesiredStartData *NewStart);
extern void PathDesiredStartGet(PathDesiredStartData *NewStart);
extern void PathDesiredStartArraySet(float *NewStart);
extern void PathDesiredStartArrayGet(float *NewStart);
extern void PathDesiredEndSet(PathDesiredEndData *NewEnd);
extern void PathDesiredEndGet(PathDesiredEndData *NewEnd);
extern void PathDesiredEndArraySet(float *NewEnd);
extern void PathDesiredEndArrayGet(float *NewEnd);
extern void PathDesiredStartingVelocitySet(float *NewStartingVelocity);
extern void PathDesiredStartingVelocityGet(float *NewStartingVelocity);
extern void PathDesiredEndingVelocitySet(float *NewEndingVelocity);
extern void PathDesiredEndingVelocityGet(float *NewEndingVelocity);
extern void PathDesiredModeParametersSet(float *NewModeParameters);
extern void PathDesiredModeParametersGet(float *NewModeParameters);
extern void PathDesiredUIDSet(int16_t *NewUID);
extern void PathDesiredUIDGet(int16_t *NewUID);
extern void PathDesiredModeSet(uint8_t *NewMode);
extern void PathDesiredModeGet(uint8_t *NewMode);


#endif // PATHDESIRED_H

/**
 * @}
 * @}
 */
