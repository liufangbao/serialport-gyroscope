/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup I2CStats I2CStats 
 * @brief Tracks statistics on the I2C bus.
 *
 * Autogenerated files and functions for I2CStats Object
 *
 * @{ 
 *
 * @file       i2cstats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the I2CStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: i2cstats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef I2CSTATS_H
#define I2CSTATS_H

/* Object constants */
#define I2CSTATS_OBJID 0xB714823E
#define I2CSTATS_ISSINGLEINST 1
#define I2CSTATS_ISSETTINGS 0
#define I2CSTATS_ISPRIORITY 0
#define I2CSTATS_NUMBYTES sizeof(I2CStatsData)

/* Generic interface functions */
int32_t I2CStatsInitialize();
UAVObjHandle I2CStatsHandle();
void I2CStatsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t evirq_log[5];
    uint32_t erirq_log[5];
    uint8_t event_errors;
    uint8_t fsm_errors;
    uint8_t irq_errors;
    uint8_t nacks;
    uint8_t timeouts;
    uint8_t last_error_type;
    uint8_t event_log[5];
    uint8_t state_log[5];
} __attribute__((packed)) I2CStatsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef I2CStatsDataPacked __attribute__((aligned(4))) I2CStatsData;
    
/* Typesafe Object access functions */
static inline int32_t I2CStatsGet(I2CStatsData *dataOut) { return UAVObjGetData(I2CStatsHandle(), dataOut); }
static inline int32_t I2CStatsSet(const I2CStatsData *dataIn) { return UAVObjSetData(I2CStatsHandle(), dataIn); }
static inline int32_t I2CStatsInstGet(uint16_t instId, I2CStatsData *dataOut) { return UAVObjGetInstanceData(I2CStatsHandle(), instId, dataOut); }
static inline int32_t I2CStatsInstSet(uint16_t instId, const I2CStatsData *dataIn) { return UAVObjSetInstanceData(I2CStatsHandle(), instId, dataIn); }
static inline int32_t I2CStatsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(I2CStatsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t I2CStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(I2CStatsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t I2CStatsCreateInstance() { return UAVObjCreateInstance(I2CStatsHandle(), &I2CStatsSetDefaults); }
static inline void I2CStatsRequestUpdate() { UAVObjRequestUpdate(I2CStatsHandle()); }
static inline void I2CStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(I2CStatsHandle(), instId); }
static inline void I2CStatsUpdated() { UAVObjUpdated(I2CStatsHandle()); }
static inline void I2CStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(I2CStatsHandle(), instId); }
static inline void I2CStatsLogging() { UAVObjLogging(I2CStatsHandle()); }
static inline void I2CStatsInstLogging(uint16_t instId) { UAVObjInstanceLogging(I2CStatsHandle(), instId); }
static inline int32_t I2CStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(I2CStatsHandle(), dataOut); }
static inline int32_t I2CStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(I2CStatsHandle(), dataIn); }
static inline int8_t I2CStatsReadOnly() { return UAVObjReadOnly(I2CStatsHandle()); }

/* Field evirq_log information */

// Number of elements for field evirq_log
#define I2CSTATS_EVIRQ_LOG_NUMELEM 5

/* Field erirq_log information */

// Number of elements for field erirq_log
#define I2CSTATS_ERIRQ_LOG_NUMELEM 5

/* Field event_errors information */

/* Field fsm_errors information */

/* Field irq_errors information */

/* Field nacks information */

/* Field timeouts information */

/* Field last_error_type information */

// Enumeration options for field last_error_type
typedef enum {
    I2CSTATS_LAST_ERROR_TYPE_EVENT=0,
    I2CSTATS_LAST_ERROR_TYPE_FSM=1,
    I2CSTATS_LAST_ERROR_TYPE_INTERRUPT=2
} I2CStatslast_error_typeOptions;

/* Field event_log information */

// Enumeration options for field event_log
typedef enum {
    I2CSTATS_EVENT_LOG_I2C_EVENT_BUS_ERROR=0,
    I2CSTATS_EVENT_LOG_I2C_EVENT_START=1,
    I2CSTATS_EVENT_LOG_I2C_EVENT_STARTED_MORE_TXN_READ=2,
    I2CSTATS_EVENT_LOG_I2C_EVENT_STARTED_MORE_TXN_WRITE=3,
    I2CSTATS_EVENT_LOG_I2C_EVENT_STARTED_LAST_TXN_READ=4,
    I2CSTATS_EVENT_LOG_I2C_EVENT_STARTED_LAST_TXN_WRITE=5,
    I2CSTATS_EVENT_LOG_I2C_EVENT_ADDR_SENT_LEN_EQ_0=6,
    I2CSTATS_EVENT_LOG_I2C_EVENT_ADDR_SENT_LEN_EQ_1=7,
    I2CSTATS_EVENT_LOG_I2C_EVENT_ADDR_SENT_LEN_EQ_2=8,
    I2CSTATS_EVENT_LOG_I2C_EVENT_ADDR_SENT_LEN_GT_2=9,
    I2CSTATS_EVENT_LOG_I2C_EVENT_TRANSFER_DONE_LEN_EQ_0=10,
    I2CSTATS_EVENT_LOG_I2C_EVENT_TRANSFER_DONE_LEN_EQ_1=11,
    I2CSTATS_EVENT_LOG_I2C_EVENT_TRANSFER_DONE_LEN_EQ_2=12,
    I2CSTATS_EVENT_LOG_I2C_EVENT_TRANSFER_DONE_LEN_GT_2=13,
    I2CSTATS_EVENT_LOG_I2C_EVENT_NACK=14,
    I2CSTATS_EVENT_LOG_I2C_EVENT_STOPPED=15,
    I2CSTATS_EVENT_LOG_I2C_EVENT_AUTO=16
} I2CStatsevent_logOptions;

// Number of elements for field event_log
#define I2CSTATS_EVENT_LOG_NUMELEM 5

/* Field state_log information */

// Enumeration options for field state_log
typedef enum {
    I2CSTATS_STATE_LOG_I2C_STATE_FSM_FAULT=0,
    I2CSTATS_STATE_LOG_I2C_STATE_BUS_ERROR=1,
    I2CSTATS_STATE_LOG_I2C_STATE_STOPPED=2,
    I2CSTATS_STATE_LOG_I2C_STATE_STOPPING=3,
    I2CSTATS_STATE_LOG_I2C_STATE_STARTING=4,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_ADDR=5,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_PRE_ONE=6,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_PRE_FIRST=7,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_PRE_MIDDLE=8,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_LAST=9,
    I2CSTATS_STATE_LOG_I2C_STATE_R_MORE_TXN_POST_LAST=10,
    I2CSTATS_STATE_LOG_R_LAST_TXN_ADDR=11,
    I2CSTATS_STATE_LOG_I2C_STATE_R_LAST_TXN_PRE_ONE=12,
    I2CSTATS_STATE_LOG_I2C_STATE_R_LAST_TXN_PRE_FIRST=13,
    I2CSTATS_STATE_LOG_I2C_STATE_R_LAST_TXN_PRE_MIDDLE=14,
    I2CSTATS_STATE_LOG_I2C_STATE_R_LAST_TXN_PRE_LAST=15,
    I2CSTATS_STATE_LOG_I2C_STATE_R_LAST_TXN_POST_LAST=16,
    I2CSTATS_STATE_LOG_I2C_STATE_W_MORE_TXN_ADDR=17,
    I2CSTATS_STATE_LOG_I2C_STATE_W_MORE_TXN_MIDDLE=18,
    I2CSTATS_STATE_LOG_I2C_STATE_W_MORE_TXN_LAST=19,
    I2CSTATS_STATE_LOG_I2C_STATE_W_LAST_TXN_ADDR=20,
    I2CSTATS_STATE_LOG_I2C_STATE_W_LAST_TXN_MIDDLE=21,
    I2CSTATS_STATE_LOG_I2C_STATE_W_LAST_TXN_LAST=22,
    I2CSTATS_STATE_LOG_I2C_STATE_NACK=23
} I2CStatsstate_logOptions;

// Number of elements for field state_log
#define I2CSTATS_STATE_LOG_NUMELEM 5



/* Set/Get functions */
extern void I2CStatsevirq_logSet(uint32_t *Newevirq_log);
extern void I2CStatsevirq_logGet(uint32_t *Newevirq_log);
extern void I2CStatserirq_logSet(uint32_t *Newerirq_log);
extern void I2CStatserirq_logGet(uint32_t *Newerirq_log);
extern void I2CStatsevent_errorsSet(uint8_t *Newevent_errors);
extern void I2CStatsevent_errorsGet(uint8_t *Newevent_errors);
extern void I2CStatsfsm_errorsSet(uint8_t *Newfsm_errors);
extern void I2CStatsfsm_errorsGet(uint8_t *Newfsm_errors);
extern void I2CStatsirq_errorsSet(uint8_t *Newirq_errors);
extern void I2CStatsirq_errorsGet(uint8_t *Newirq_errors);
extern void I2CStatsnacksSet(uint8_t *Newnacks);
extern void I2CStatsnacksGet(uint8_t *Newnacks);
extern void I2CStatstimeoutsSet(uint8_t *Newtimeouts);
extern void I2CStatstimeoutsGet(uint8_t *Newtimeouts);
extern void I2CStatslast_error_typeSet(uint8_t *Newlast_error_type);
extern void I2CStatslast_error_typeGet(uint8_t *Newlast_error_type);
extern void I2CStatsevent_logSet(uint8_t *Newevent_log);
extern void I2CStatsevent_logGet(uint8_t *Newevent_log);
extern void I2CStatsstate_logSet(uint8_t *Newstate_log);
extern void I2CStatsstate_logGet(uint8_t *Newstate_log);


#endif // I2CSTATS_H

/**
 * @}
 * @}
 */
