/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup AirspeedSettings AirspeedSettings 
 * @brief Settings for the @ref BaroAirspeed module used on CopterControl or Revolution
 *
 * Autogenerated files and functions for AirspeedSettings Object
 *
 * @{ 
 *
 * @file       airspeedsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AirspeedSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: airspeedsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AIRSPEEDSETTINGS_H
#define AIRSPEEDSETTINGS_H

/* Object constants */
#define AIRSPEEDSETTINGS_OBJID 0x69F4AD7A
#define AIRSPEEDSETTINGS_ISSINGLEINST 1
#define AIRSPEEDSETTINGS_ISSETTINGS 1
#define AIRSPEEDSETTINGS_ISPRIORITY 0
#define AIRSPEEDSETTINGS_NUMBYTES sizeof(AirspeedSettingsData)

/* Generic interface functions */
int32_t AirspeedSettingsInitialize();
UAVObjHandle AirspeedSettingsHandle();
void AirspeedSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float Scale;
    float IMUBasedEstimationLowPassPeriod1;
    float IMUBasedEstimationLowPassPeriod2;
    uint16_t ZeroPoint;
    uint8_t SamplePeriod;
    uint8_t AirspeedSensorType;
} __attribute__((packed)) AirspeedSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AirspeedSettingsDataPacked __attribute__((aligned(4))) AirspeedSettingsData;
    
/* Typesafe Object access functions */
static inline int32_t AirspeedSettingsGet(AirspeedSettingsData *dataOut) { return UAVObjGetData(AirspeedSettingsHandle(), dataOut); }
static inline int32_t AirspeedSettingsSet(const AirspeedSettingsData *dataIn) { return UAVObjSetData(AirspeedSettingsHandle(), dataIn); }
static inline int32_t AirspeedSettingsInstGet(uint16_t instId, AirspeedSettingsData *dataOut) { return UAVObjGetInstanceData(AirspeedSettingsHandle(), instId, dataOut); }
static inline int32_t AirspeedSettingsInstSet(uint16_t instId, const AirspeedSettingsData *dataIn) { return UAVObjSetInstanceData(AirspeedSettingsHandle(), instId, dataIn); }
static inline int32_t AirspeedSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AirspeedSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t AirspeedSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AirspeedSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t AirspeedSettingsCreateInstance() { return UAVObjCreateInstance(AirspeedSettingsHandle(), &AirspeedSettingsSetDefaults); }
static inline void AirspeedSettingsRequestUpdate() { UAVObjRequestUpdate(AirspeedSettingsHandle()); }
static inline void AirspeedSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AirspeedSettingsHandle(), instId); }
static inline void AirspeedSettingsUpdated() { UAVObjUpdated(AirspeedSettingsHandle()); }
static inline void AirspeedSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AirspeedSettingsHandle(), instId); }
static inline void AirspeedSettingsLogging() { UAVObjLogging(AirspeedSettingsHandle()); }
static inline void AirspeedSettingsInstLogging(uint16_t instId) { UAVObjInstanceLogging(AirspeedSettingsHandle(), instId); }
static inline int32_t AirspeedSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AirspeedSettingsHandle(), dataOut); }
static inline int32_t AirspeedSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AirspeedSettingsHandle(), dataIn); }
static inline int8_t AirspeedSettingsReadOnly() { return UAVObjReadOnly(AirspeedSettingsHandle()); }

/* Field Scale information */

/* Field IMUBasedEstimationLowPassPeriod1 information */

/* Field IMUBasedEstimationLowPassPeriod2 information */

/* Field ZeroPoint information */

/* Field SamplePeriod information */

/* Field AirspeedSensorType information */

// Enumeration options for field AirspeedSensorType
typedef enum {
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_PIXHAWKAIRSPEEDMS4525DO=0,
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_EAGLETREEAIRSPEEDV3=1,
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_DIYDRONESMPXV5004=2,
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_DIYDRONESMPXV7002=3,
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_GROUNDSPEEDBASEDWINDESTIMATION=4,
    AIRSPEEDSETTINGS_AIRSPEEDSENSORTYPE_NONE=5
} AirspeedSettingsAirspeedSensorTypeOptions;



/* Set/Get functions */
extern void AirspeedSettingsScaleSet(float *NewScale);
extern void AirspeedSettingsScaleGet(float *NewScale);
extern void AirspeedSettingsIMUBasedEstimationLowPassPeriod1Set(float *NewIMUBasedEstimationLowPassPeriod1);
extern void AirspeedSettingsIMUBasedEstimationLowPassPeriod1Get(float *NewIMUBasedEstimationLowPassPeriod1);
extern void AirspeedSettingsIMUBasedEstimationLowPassPeriod2Set(float *NewIMUBasedEstimationLowPassPeriod2);
extern void AirspeedSettingsIMUBasedEstimationLowPassPeriod2Get(float *NewIMUBasedEstimationLowPassPeriod2);
extern void AirspeedSettingsZeroPointSet(uint16_t *NewZeroPoint);
extern void AirspeedSettingsZeroPointGet(uint16_t *NewZeroPoint);
extern void AirspeedSettingsSamplePeriodSet(uint8_t *NewSamplePeriod);
extern void AirspeedSettingsSamplePeriodGet(uint8_t *NewSamplePeriod);
extern void AirspeedSettingsAirspeedSensorTypeSet(uint8_t *NewAirspeedSensorType);
extern void AirspeedSettingsAirspeedSensorTypeGet(uint8_t *NewAirspeedSensorType);


#endif // AIRSPEEDSETTINGS_H

/**
 * @}
 * @}
 */
