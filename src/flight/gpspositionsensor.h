/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GPSPositionSensor GPSPositionSensor 
 * @brief Raw GPS data from @ref GPSModule.
 *
 * Autogenerated files and functions for GPSPositionSensor Object
 *
 * @{ 
 *
 * @file       gpspositionsensor.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the GPSPositionSensor object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gpspositionsensor.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GPSPOSITIONSENSOR_H
#define GPSPOSITIONSENSOR_H

/* Object constants */
#define GPSPOSITIONSENSOR_OBJID 0x7D26A6E6
#define GPSPOSITIONSENSOR_ISSINGLEINST 1
#define GPSPOSITIONSENSOR_ISSETTINGS 0
#define GPSPOSITIONSENSOR_ISPRIORITY 0
#define GPSPOSITIONSENSOR_NUMBYTES sizeof(GPSPositionSensorData)

/* Generic interface functions */
int32_t GPSPositionSensorInitialize();
UAVObjHandle GPSPositionSensorHandle();
void GPSPositionSensorSetDefaults(UAVObjHandle obj, uint16_t instId);


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    int32_t Latitude;
    int32_t Longitude;
    float Altitude;
    float GeoidSeparation;
    float Heading;
    float Groundspeed;
    float PDOP;
    float HDOP;
    float VDOP;
    uint8_t Status;
    int8_t Satellites;
    uint8_t SensorType;
    uint8_t AutoConfigStatus;
} __attribute__((packed)) GPSPositionSensorDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef GPSPositionSensorDataPacked __attribute__((aligned(4))) GPSPositionSensorData;
    
/* Typesafe Object access functions */
static inline int32_t GPSPositionSensorGet(GPSPositionSensorData *dataOut) { return UAVObjGetData(GPSPositionSensorHandle(), dataOut); }
static inline int32_t GPSPositionSensorSet(const GPSPositionSensorData *dataIn) { return UAVObjSetData(GPSPositionSensorHandle(), dataIn); }
static inline int32_t GPSPositionSensorInstGet(uint16_t instId, GPSPositionSensorData *dataOut) { return UAVObjGetInstanceData(GPSPositionSensorHandle(), instId, dataOut); }
static inline int32_t GPSPositionSensorInstSet(uint16_t instId, const GPSPositionSensorData *dataIn) { return UAVObjSetInstanceData(GPSPositionSensorHandle(), instId, dataIn); }
static inline int32_t GPSPositionSensorConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GPSPositionSensorHandle(), queue, EV_MASK_ALL_UPDATES); }
static inline int32_t GPSPositionSensorConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GPSPositionSensorHandle(), cb, EV_MASK_ALL_UPDATES); }
static inline uint16_t GPSPositionSensorCreateInstance() { return UAVObjCreateInstance(GPSPositionSensorHandle(), &GPSPositionSensorSetDefaults); }
static inline void GPSPositionSensorRequestUpdate() { UAVObjRequestUpdate(GPSPositionSensorHandle()); }
static inline void GPSPositionSensorRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GPSPositionSensorHandle(), instId); }
static inline void GPSPositionSensorUpdated() { UAVObjUpdated(GPSPositionSensorHandle()); }
static inline void GPSPositionSensorInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GPSPositionSensorHandle(), instId); }
static inline void GPSPositionSensorLogging() { UAVObjLogging(GPSPositionSensorHandle()); }
static inline void GPSPositionSensorInstLogging(uint16_t instId) { UAVObjInstanceLogging(GPSPositionSensorHandle(), instId); }
static inline int32_t GPSPositionSensorGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GPSPositionSensorHandle(), dataOut); }
static inline int32_t GPSPositionSensorSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GPSPositionSensorHandle(), dataIn); }
static inline int8_t GPSPositionSensorReadOnly() { return UAVObjReadOnly(GPSPositionSensorHandle()); }

/* Field Latitude information */

/* Field Longitude information */

/* Field Altitude information */

/* Field GeoidSeparation information */

/* Field Heading information */

/* Field Groundspeed information */

/* Field PDOP information */

/* Field HDOP information */

/* Field VDOP information */

/* Field Status information */

// Enumeration options for field Status
typedef enum {
    GPSPOSITIONSENSOR_STATUS_NOGPS=0,
    GPSPOSITIONSENSOR_STATUS_NOFIX=1,
    GPSPOSITIONSENSOR_STATUS_FIX2D=2,
    GPSPOSITIONSENSOR_STATUS_FIX3D=3
} GPSPositionSensorStatusOptions;

/* Field Satellites information */

/* Field SensorType information */

// Enumeration options for field SensorType
typedef enum {
    GPSPOSITIONSENSOR_SENSORTYPE_UNKNOWN=0,
    GPSPOSITIONSENSOR_SENSORTYPE_NMEA=1,
    GPSPOSITIONSENSOR_SENSORTYPE_UBX=2,
    GPSPOSITIONSENSOR_SENSORTYPE_UBX7=3,
    GPSPOSITIONSENSOR_SENSORTYPE_UBX8=4
} GPSPositionSensorSensorTypeOptions;

/* Field AutoConfigStatus information */

// Enumeration options for field AutoConfigStatus
typedef enum {
    GPSPOSITIONSENSOR_AUTOCONFIGSTATUS_DISABLED=0,
    GPSPOSITIONSENSOR_AUTOCONFIGSTATUS_RUNNING=1,
    GPSPOSITIONSENSOR_AUTOCONFIGSTATUS_DONE=2,
    GPSPOSITIONSENSOR_AUTOCONFIGSTATUS_ERROR=3
} GPSPositionSensorAutoConfigStatusOptions;



/* Set/Get functions */
extern void GPSPositionSensorLatitudeSet(int32_t *NewLatitude);
extern void GPSPositionSensorLatitudeGet(int32_t *NewLatitude);
extern void GPSPositionSensorLongitudeSet(int32_t *NewLongitude);
extern void GPSPositionSensorLongitudeGet(int32_t *NewLongitude);
extern void GPSPositionSensorAltitudeSet(float *NewAltitude);
extern void GPSPositionSensorAltitudeGet(float *NewAltitude);
extern void GPSPositionSensorGeoidSeparationSet(float *NewGeoidSeparation);
extern void GPSPositionSensorGeoidSeparationGet(float *NewGeoidSeparation);
extern void GPSPositionSensorHeadingSet(float *NewHeading);
extern void GPSPositionSensorHeadingGet(float *NewHeading);
extern void GPSPositionSensorGroundspeedSet(float *NewGroundspeed);
extern void GPSPositionSensorGroundspeedGet(float *NewGroundspeed);
extern void GPSPositionSensorPDOPSet(float *NewPDOP);
extern void GPSPositionSensorPDOPGet(float *NewPDOP);
extern void GPSPositionSensorHDOPSet(float *NewHDOP);
extern void GPSPositionSensorHDOPGet(float *NewHDOP);
extern void GPSPositionSensorVDOPSet(float *NewVDOP);
extern void GPSPositionSensorVDOPGet(float *NewVDOP);
extern void GPSPositionSensorStatusSet(uint8_t *NewStatus);
extern void GPSPositionSensorStatusGet(uint8_t *NewStatus);
extern void GPSPositionSensorSatellitesSet(int8_t *NewSatellites);
extern void GPSPositionSensorSatellitesGet(int8_t *NewSatellites);
extern void GPSPositionSensorSensorTypeSet(uint8_t *NewSensorType);
extern void GPSPositionSensorSensorTypeGet(uint8_t *NewSensorType);
extern void GPSPositionSensorAutoConfigStatusSet(uint8_t *NewAutoConfigStatus);
extern void GPSPositionSensorAutoConfigStatusGet(uint8_t *NewAutoConfigStatus);


#endif // GPSPOSITIONSENSOR_H

/**
 * @}
 * @}
 */
